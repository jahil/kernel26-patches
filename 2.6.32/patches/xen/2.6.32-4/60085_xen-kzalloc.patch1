From: jbeulich@novell.com
Subject: use kzalloc() in favor of kmalloc()+memset()
Patch-mainline: n/a

Also use clear_page() in favor of memset(, 0, PAGE_SIZE).

--- sle11sp1-2010-09-07.orig/drivers/xen/blkback/blkback.c	2010-03-22 12:57:07.000000000 +0100
+++ sle11sp1-2010-09-07/drivers/xen/blkback/blkback.c	2010-08-30 15:15:46.000000000 +0200
@@ -671,7 +671,7 @@ static int __init blkif_init(void)
 
 	mmap_pages = blkif_reqs * BLKIF_MAX_SEGMENTS_PER_REQUEST;
 
-	pending_reqs          = kmalloc(sizeof(pending_reqs[0]) *
+	pending_reqs          = kzalloc(sizeof(pending_reqs[0]) *
 					blkif_reqs, GFP_KERNEL);
 	pending_grant_handles = kmalloc(sizeof(pending_grant_handles[0]) *
 					mmap_pages, GFP_KERNEL);
@@ -688,7 +688,6 @@ static int __init blkif_init(void)
 
 	blkif_interface_init();
 
-	memset(pending_reqs, 0, sizeof(pending_reqs));
 	INIT_LIST_HEAD(&pending_free);
 
 	for (i = 0; i < blkif_reqs; i++)
--- sle11sp1-2010-09-07.orig/drivers/xen/core/gnttab.c	2010-09-15 11:26:26.000000000 +0200
+++ sle11sp1-2010-09-07/drivers/xen/core/gnttab.c	2010-09-15 11:26:45.000000000 +0200
@@ -547,7 +547,7 @@ int gnttab_copy_grant_page(grant_ref_t r
 
 	new_addr = page_address(new_page);
 	addr = page_address(page);
-	memcpy(new_addr, addr, PAGE_SIZE);
+	copy_page(new_addr, addr);
 
 	pfn = page_to_pfn(page);
 	mfn = pfn_to_mfn(pfn);
--- sle11sp1-2010-09-07.orig/drivers/xen/core/machine_reboot.c	2010-08-17 13:41:18.000000000 +0200
+++ sle11sp1-2010-09-07/drivers/xen/core/machine_reboot.c	2010-08-30 15:14:28.000000000 +0200
@@ -101,7 +101,7 @@ static void post_suspend(int suspend_can
 		BUG();
 	HYPERVISOR_shared_info = (shared_info_t *)fix_to_virt(FIX_SHARED_INFO);
 
-	memset(empty_zero_page, 0, PAGE_SIZE);
+	clear_page(empty_zero_page);
 
 	fpp = PAGE_SIZE/sizeof(unsigned long);
 	for (i = 0, j = 0, k = -1; i < max_pfn; i += fpp, j++) {
--- sle11sp1-2010-09-07.orig/drivers/xen/core/smpboot.c	2010-08-17 14:26:41.000000000 +0200
+++ sle11sp1-2010-09-07/drivers/xen/core/smpboot.c	2010-08-30 15:14:34.000000000 +0200
@@ -204,17 +204,12 @@ static void __cpuinit cpu_initialize_con
 	ctxt.flags = VGCF_IN_KERNEL;
 	ctxt.user_regs.ds = __USER_DS;
 	ctxt.user_regs.es = __USER_DS;
-	ctxt.user_regs.fs = 0;
-	ctxt.user_regs.gs = 0;
 	ctxt.user_regs.ss = __KERNEL_DS;
 	ctxt.user_regs.eip = (unsigned long)cpu_bringup_and_idle;
 	ctxt.user_regs.eflags = X86_EFLAGS_IF | 0x1000; /* IOPL_RING1 */
 
-	memset(&ctxt.fpu_ctxt, 0, sizeof(ctxt.fpu_ctxt));
-
 	smp_trap_init(ctxt.trap_ctxt);
 
-	ctxt.ldt_ents = 0;
 	ctxt.gdt_frames[0] = arbitrary_virt_to_mfn(get_cpu_gdt_table(cpu));
 	ctxt.gdt_ents = GDT_SIZE / 8;
 
--- sle11sp1-2010-09-07.orig/drivers/xen/netback/interface.c	2010-08-17 15:02:24.000000000 +0200
+++ sle11sp1-2010-09-07/drivers/xen/netback/interface.c	2010-08-30 15:14:48.000000000 +0200
@@ -223,7 +223,6 @@ netif_t *netif_alloc(struct device *pare
 	SET_NETDEV_DEV(dev, parent);
 
 	netif = netdev_priv(dev);
-	memset(netif, 0, sizeof(*netif));
 	netif->domid  = domid;
 	netif->group = UINT_MAX;
 	netif->handle = handle;
--- sle11sp1-2010-09-07.orig/drivers/xen/scsiback/emulate.c	2009-11-06 10:51:17.000000000 +0100
+++ sle11sp1-2010-09-07/drivers/xen/scsiback/emulate.c	2010-08-30 15:14:55.000000000 +0200
@@ -240,13 +240,11 @@ static void __report_luns(pending_req_t 
 	alloc_len  = sizeof(struct scsi_lun) * alloc_luns
 				+ VSCSI_REPORT_LUNS_HEADER;
 retry:
-	if ((buff = kmalloc(alloc_len, GFP_KERNEL)) == NULL) {
+	if ((buff = kzalloc(alloc_len, GFP_KERNEL)) == NULL) {
 		printk(KERN_ERR "scsiback:%s kmalloc err\n", __FUNCTION__);
 		goto fail;
 	}
 
-	memset(buff, 0, alloc_len);
-
 	one_lun = (struct scsi_lun *) &buff[8];
 	spin_lock_irqsave(&info->v2p_lock, flags);
 	list_for_each_entry(entry, head, l) {
--- sle11sp1-2010-09-07.orig/drivers/xen/scsiback/scsiback.c	2010-01-04 12:41:57.000000000 +0100
+++ sle11sp1-2010-09-07/drivers/xen/scsiback/scsiback.c	2010-08-30 15:15:02.000000000 +0200
@@ -676,7 +676,7 @@ static int __init scsiback_init(void)
 
 	mmap_pages = vscsiif_reqs * VSCSIIF_SG_TABLESIZE;
 
-	pending_reqs          = kmalloc(sizeof(pending_reqs[0]) *
+	pending_reqs          = kzalloc(sizeof(pending_reqs[0]) *
 					vscsiif_reqs, GFP_KERNEL);
 	pending_grant_handles = kmalloc(sizeof(pending_grant_handles[0]) *
 					mmap_pages, GFP_KERNEL);
@@ -691,7 +691,6 @@ static int __init scsiback_init(void)
 	if (scsiback_interface_init() < 0)
 		goto out_of_kmem;
 
-	memset(pending_reqs, 0, sizeof(pending_reqs));
 	INIT_LIST_HEAD(&pending_free);
 
 	for (i = 0; i < vscsiif_reqs; i++)
--- sle11sp1-2010-09-07.orig/drivers/xen/sfc_netutil/accel_cuckoo_hash.c	2008-02-20 09:32:49.000000000 +0100
+++ sle11sp1-2010-09-07/drivers/xen/sfc_netutil/accel_cuckoo_hash.c	2010-08-30 15:15:12.000000000 +0200
@@ -76,7 +76,7 @@ int cuckoo_hash_init(cuckoo_hash_table *
 	BUG_ON(length_bits >= sizeof(unsigned) * 8);
 	BUG_ON(key_length > sizeof(cuckoo_hash_key));
 
-	table_mem = kmalloc(sizeof(cuckoo_hash_entry) * 2 * length, GFP_KERNEL);
+	table_mem = kzalloc(sizeof(cuckoo_hash_entry) * 2 * length, GFP_KERNEL);
 
 	if (table_mem == NULL)
 		return -ENOMEM;
@@ -92,9 +92,6 @@ int cuckoo_hash_init(cuckoo_hash_table *
 
 	set_hash_parameters(hashtab);
 
-	/* Zero the table */
-	memset(hashtab->table0, 0, length * 2 * sizeof(cuckoo_hash_entry));
-
 	return 0;
 }
 EXPORT_SYMBOL_GPL(cuckoo_hash_init);
--- sle11sp1-2010-09-07.orig/drivers/xen/tpmback/interface.c	2010-08-23 10:59:54.000000000 +0200
+++ sle11sp1-2010-09-07/drivers/xen/tpmback/interface.c	2010-08-30 15:15:18.000000000 +0200
@@ -130,7 +130,7 @@ int tpmif_map(tpmif_t *tpmif, unsigned l
 	}
 
 	tpmif->tx = (tpmif_tx_interface_t *)tpmif->tx_area->addr;
-	memset(tpmif->tx, 0, PAGE_SIZE);
+	clear_page(tpmif->tx);
 
 	err = bind_interdomain_evtchn_to_irqhandler(
 		tpmif->domid, evtchn, tpmif_be_int, 0, tpmif->devname, tpmif);
--- sle11sp1-2010-09-07.orig/drivers/xen/usbback/usbback.c	2010-04-15 17:36:18.000000000 +0200
+++ sle11sp1-2010-09-07/drivers/xen/usbback/usbback.c	2010-08-30 15:15:54.000000000 +0200
@@ -1149,7 +1149,7 @@ static int __init usbback_init(void)
 		return -ENODEV;
 
 	mmap_pages = usbif_reqs * USBIF_MAX_SEGMENTS_PER_REQUEST;
-	pending_reqs = kmalloc(sizeof(pending_reqs[0]) *
+	pending_reqs = kzalloc(sizeof(pending_reqs[0]) *
 			usbif_reqs, GFP_KERNEL);
 	pending_grant_handles = kmalloc(sizeof(pending_grant_handles[0]) *
 			mmap_pages, GFP_KERNEL);
@@ -1163,7 +1163,6 @@ static int __init usbback_init(void)
 	for (i = 0; i < mmap_pages; i++)
 		pending_grant_handles[i] = USBBACK_INVALID_HANDLE;
 
-	memset(pending_reqs, 0, sizeof(pending_reqs));
 	INIT_LIST_HEAD(&pending_free);
 
 	for (i = 0; i < usbif_reqs; i++)
