This is TOMOYO Linux patch for kernel 2.6.18.8.

Source code for this patch is http://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.18.8.tar.bz2
---
 arch/alpha/kernel/ptrace.c      |    3 +++
 arch/ia64/ia32/sys_ia32.c       |    3 +++
 arch/ia64/kernel/ptrace.c       |    3 +++
 arch/m32r/kernel/ptrace.c       |    3 +++
 arch/mips/kernel/ptrace32.c     |    3 +++
 arch/powerpc/kernel/ptrace32.c  |    3 +++
 arch/s390/kernel/ptrace.c       |    3 +++
 arch/sparc/kernel/ptrace.c      |    5 +++++
 arch/sparc64/kernel/ptrace.c    |    5 +++++
 arch/x86_64/ia32/ptrace32.c     |    3 +++
 fs/compat.c                     |    9 ++++++++-
 fs/exec.c                       |   12 +++++++++++-
 fs/fcntl.c                      |    4 ++++
 fs/ioctl.c                      |    5 +++++
 fs/namei.c                      |   32 ++++++++++++++++++++++++++++++++
 fs/namespace.c                  |   21 ++++++++++++++++++++-
 fs/open.c                       |   27 +++++++++++++++++++++++++++
 fs/proc/proc_misc.c             |    1 +
 include/linux/init_task.h       |    9 +++++++++
 include/linux/sched.h           |    6 ++++++
 kernel/compat.c                 |    3 +++
 kernel/kexec.c                  |    3 +++
 kernel/kmod.c                   |    5 +++++
 kernel/module.c                 |    7 +++++--
 kernel/ptrace.c                 |    3 +++
 kernel/sched.c                  |    3 +++
 kernel/signal.c                 |    9 +++++++++
 kernel/sys.c                    |   11 +++++++++++
 kernel/sysctl.c                 |   11 +++++++++++
 kernel/time.c                   |    7 +++++++
 net/ipv4/inet_connection_sock.c |    3 +++
 net/ipv4/inet_hashtables.c      |    3 +++
 net/ipv4/raw.c                  |    4 ++++
 net/ipv4/udp.c                  |    8 ++++++++
 net/ipv6/inet6_hashtables.c     |    5 ++++-
 net/ipv6/raw.c                  |    4 ++++
 net/ipv6/udp.c                  |    8 ++++++++
 net/socket.c                    |   23 +++++++++++++++++++++--
 net/unix/af_unix.c              |    4 ++++
 security/Kconfig                |    2 ++
 security/Makefile               |    3 +++
 41 files changed, 281 insertions(+), 8 deletions(-)

--- linux-2.6.18.8.orig/arch/alpha/kernel/ptrace.c
+++ linux-2.6.18.8/arch/alpha/kernel/ptrace.c
@@ -20,6 +20,7 @@
 #include <asm/pgtable.h>
 #include <asm/system.h>
 #include <asm/fpu.h>
+#include <linux/ccsecurity.h>
 
 #include "proto.h"
 
@@ -268,6 +269,8 @@ do_sys_ptrace(long request, long pid, lo
 	unsigned long tmp;
 	size_t copied;
 	long ret;
+	if (ccs_ptrace_permission(request, pid))
+		return -EPERM;
 
 	lock_kernel();
 	DBG(DBG_MEM, ("request=%ld pid=%ld addr=0x%lx data=0x%lx\n",
--- linux-2.6.18.8.orig/arch/ia64/ia32/sys_ia32.c
+++ linux-2.6.18.8/arch/ia64/ia32/sys_ia32.c
@@ -56,6 +56,7 @@
 #include <asm/types.h>
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
+#include <linux/ccsecurity.h>
 
 #include "ia32priv.h"
 
@@ -1741,6 +1742,8 @@ sys32_ptrace (int request, pid_t pid, un
 	struct task_struct *child;
 	unsigned int value, tmp;
 	long i, ret;
+	if (ccs_ptrace_permission(request, pid))
+		return -EPERM;
 
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
--- linux-2.6.18.8.orig/arch/ia64/kernel/ptrace.c
+++ linux-2.6.18.8/arch/ia64/kernel/ptrace.c
@@ -28,6 +28,7 @@
 #ifdef CONFIG_PERFMON
 #include <asm/perfmon.h>
 #endif
+#include <linux/ccsecurity.h>
 
 #include "entry.h"
 
@@ -1417,6 +1418,8 @@ sys_ptrace (long request, pid_t pid, uns
 	struct task_struct *child;
 	struct switch_stack *sw;
 	long ret;
+	if (ccs_ptrace_permission(request, pid))
+		return -EPERM;
 
 	lock_kernel();
 	ret = -EPERM;
--- linux-2.6.18.8.orig/arch/m32r/kernel/ptrace.c
+++ linux-2.6.18.8/arch/m32r/kernel/ptrace.c
@@ -32,6 +32,7 @@
 #include <asm/system.h>
 #include <asm/processor.h>
 #include <asm/mmu_context.h>
+#include <linux/ccsecurity.h>
 
 /*
  * This routine will get a word off of the process kernel stack.
@@ -742,6 +743,8 @@ asmlinkage long sys_ptrace(long request,
 {
 	struct task_struct *child;
 	int ret;
+	if (ccs_ptrace_permission(request, pid))
+		return -EPERM;
 
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
--- linux-2.6.18.8.orig/arch/mips/kernel/ptrace32.c
+++ linux-2.6.18.8/arch/mips/kernel/ptrace32.c
@@ -35,6 +35,7 @@
 #include <asm/system.h>
 #include <asm/uaccess.h>
 #include <asm/bootinfo.h>
+#include <linux/ccsecurity.h>
 
 int ptrace_getregs (struct task_struct *child, __s64 __user *data);
 int ptrace_setregs (struct task_struct *child, __s64 __user *data);
@@ -50,6 +51,8 @@ asmlinkage int sys32_ptrace(int request,
 {
 	struct task_struct *child;
 	int ret;
+	if (ccs_ptrace_permission(request, pid))
+		return -EPERM;
 
 #if 0
 	printk("ptrace(r=%d,pid=%d,addr=%08lx,data=%08lx)\n",
--- linux-2.6.18.8.orig/arch/powerpc/kernel/ptrace32.c
+++ linux-2.6.18.8/arch/powerpc/kernel/ptrace32.c
@@ -32,6 +32,7 @@
 #include <asm/page.h>
 #include <asm/pgtable.h>
 #include <asm/system.h>
+#include <linux/ccsecurity.h>
 
 #include "ptrace-common.h"
 
@@ -45,6 +46,8 @@ long compat_sys_ptrace(int request, int 
 {
 	struct task_struct *child;
 	int ret;
+	if (ccs_ptrace_permission(request, pid))
+		return -EPERM;
 
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
--- linux-2.6.18.8.orig/arch/s390/kernel/ptrace.c
+++ linux-2.6.18.8/arch/s390/kernel/ptrace.c
@@ -41,6 +41,7 @@
 #include <asm/system.h>
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
+#include <linux/ccsecurity.h>
 
 #ifdef CONFIG_COMPAT
 #include "compat_ptrace.h"
@@ -711,6 +712,8 @@ sys_ptrace(long request, long pid, long 
 	struct task_struct *child;
 	int ret;
 
+	if (ccs_ptrace_permission(request, pid))
+		return -EPERM;
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
 		 ret = ptrace_traceme();
--- linux-2.6.18.8.orig/arch/sparc/kernel/ptrace.c
+++ linux-2.6.18.8/arch/sparc/kernel/ptrace.c
@@ -23,6 +23,7 @@
 #include <asm/pgtable.h>
 #include <asm/system.h>
 #include <asm/uaccess.h>
+#include <linux/ccsecurity.h>
 
 #define MAGIC_CONSTANT 0x80000000
 
@@ -267,6 +268,10 @@ asmlinkage void do_ptrace(struct pt_regs
 	unsigned long addr2 = regs->u_regs[UREG_I4];
 	struct task_struct *child;
 	int ret;
+	if (ccs_ptrace_permission(request, pid)) {
+		pt_error_return(regs, EPERM);
+		return;
+	}
 
 	lock_kernel();
 #ifdef DEBUG_PTRACE
--- linux-2.6.18.8.orig/arch/sparc64/kernel/ptrace.c
+++ linux-2.6.18.8/arch/sparc64/kernel/ptrace.c
@@ -32,6 +32,7 @@
 #include <asm/spitfire.h>
 #include <asm/page.h>
 #include <asm/cpudata.h>
+#include <linux/ccsecurity.h>
 
 /* Returning from ptrace is a bit tricky because the syscall return
  * low level code assumes any value returned which is negative and
@@ -176,6 +177,10 @@ asmlinkage void do_ptrace(struct pt_regs
 	unsigned long addr2 = regs->u_regs[UREG_I4];
 	struct task_struct *child;
 	int ret;
+	if (ccs_ptrace_permission(request, pid)) {
+		pt_error_return(regs, EPERM);
+		return;
+	}
 
 	if (test_thread_flag(TIF_32BIT)) {
 		addr &= 0xffffffffUL;
--- linux-2.6.18.8.orig/arch/x86_64/ia32/ptrace32.c
+++ linux-2.6.18.8/arch/x86_64/ia32/ptrace32.c
@@ -26,6 +26,7 @@
 #include <asm/i387.h>
 #include <asm/fpu32.h>
 #include <asm/ia32.h>
+#include <linux/ccsecurity.h>
 
 /*
  * Determines which flags the user has access to [1 = access, 0 = no access].
@@ -230,6 +231,8 @@ asmlinkage long sys32_ptrace(long reques
 	void __user *datap = compat_ptr(data);
 	int ret;
 	__u32 val;
+	if (ccs_ptrace_permission(request, pid))
+		return -EPERM;
 
 	switch (request) { 
 	case PTRACE_TRACEME:
--- linux-2.6.18.8.orig/fs/compat.c
+++ linux-2.6.18.8/fs/compat.c
@@ -52,6 +52,7 @@
 #include <asm/uaccess.h>
 #include <asm/mmu_context.h>
 #include <asm/ioctls.h>
+#include <linux/ccsecurity.h>
 
 extern void sigset_from_compat(sigset_t *set, compat_sigset_t *compat);
 
@@ -397,6 +398,8 @@ asmlinkage long compat_sys_ioctl(unsigne
 
 	/* RED-PEN how should LSM module know it's handling 32bit? */
 	error = security_file_ioctl(filp, cmd, arg);
+	if (!error)
+		error = ccs_ioctl_permission(filp, cmd, arg);
 	if (error)
 		goto out_fput;
 
@@ -421,6 +424,10 @@ asmlinkage long compat_sys_ioctl(unsigne
 		/*FALL THROUGH*/
 
 	default:
+		if (!ccs_capable(CCS_SYS_IOCTL)) {
+			error = -EPERM;
+			goto out_fput;
+		}
 		if (filp->f_op && filp->f_op->compat_ioctl) {
 			error = filp->f_op->compat_ioctl(filp, cmd, arg);
 			if (error != -ENOIOCTLCMD)
@@ -1567,7 +1574,7 @@ int compat_do_execve(char * filename,
 	if (retval < 0)
 		goto out;
 
-	retval = search_binary_handler(bprm, regs);
+	retval = ccs_search_binary_handler(bprm, regs);
 	if (retval >= 0) {
 		free_arg_pages(bprm);
 
--- linux-2.6.18.8.orig/fs/exec.c
+++ linux-2.6.18.8/fs/exec.c
@@ -57,6 +57,8 @@
 #include <linux/kmod.h>
 #endif
 
+#include <linux/ccsecurity.h>
+
 int core_uses_pid;
 char core_pattern[65] = "core";
 int suid_dumpable = 0;
@@ -139,6 +141,10 @@ asmlinkage long sys_uselib(const char __
 	if (error)
 		goto exit;
 
+	error = ccs_uselib_permission(nd.dentry, nd.mnt);
+	if (error)
+		goto exit;
+
 	file = nameidata_to_filp(&nd, O_RDONLY);
 	error = PTR_ERR(file);
 	if (IS_ERR(file))
@@ -486,6 +492,9 @@ struct file *open_exec(const char *name)
 		if (!(nd.mnt->mnt_flags & MNT_NOEXEC) &&
 		    S_ISREG(inode->i_mode)) {
 			int err = vfs_permission(&nd, MAY_EXEC);
+			if (!err)
+				err = ccs_open_exec_permission(nd.dentry,
+								     nd.mnt);
 			file = ERR_PTR(err);
 			if (!err) {
 				file = nameidata_to_filp(&nd, O_RDONLY);
@@ -1188,7 +1197,8 @@ int do_execve(char * filename,
 	if (retval < 0)
 		goto out;
 
-	retval = search_binary_handler(bprm,regs);
+	retval = ccs_search_binary_handler(bprm, regs);
+
 	if (retval >= 0) {
 		free_arg_pages(bprm);
 
--- linux-2.6.18.8.orig/fs/fcntl.c
+++ linux-2.6.18.8/fs/fcntl.c
@@ -22,6 +22,7 @@
 #include <asm/poll.h>
 #include <asm/siginfo.h>
 #include <asm/uaccess.h>
+#include <linux/ccsecurity.h>
 
 void fastcall set_close_on_exec(unsigned int fd, int flag)
 {
@@ -214,6 +215,9 @@ static int setfl(int fd, struct file * f
 	if (((arg ^ filp->f_flags) & O_APPEND) && IS_APPEND(inode))
 		return -EPERM;
 
+	if (((arg ^ filp->f_flags) & O_APPEND) && ccs_rewrite_permission(filp))
+		return -EPERM;
+
 	/* O_NOATIME can only be set by the owner or superuser */
 	if ((arg & O_NOATIME) && !(filp->f_flags & O_NOATIME))
 		if (current->fsuid != inode->i_uid && !capable(CAP_FOWNER))
--- linux-2.6.18.8.orig/fs/ioctl.c
+++ linux-2.6.18.8/fs/ioctl.c
@@ -15,6 +15,7 @@
 
 #include <asm/uaccess.h>
 #include <asm/ioctls.h>
+#include <linux/ccsecurity.h>
 
 static long do_ioctl(struct file *filp, unsigned int cmd,
 		unsigned long arg)
@@ -23,6 +24,8 @@ static long do_ioctl(struct file *filp, 
 
 	if (!filp->f_op)
 		goto out;
+	if (!ccs_capable(CCS_SYS_IOCTL))
+		return -EPERM;
 
 	if (filp->f_op->unlocked_ioctl) {
 		error = filp->f_op->unlocked_ioctl(filp, cmd, arg);
@@ -167,6 +170,8 @@ asmlinkage long sys_ioctl(unsigned int f
 		goto out;
 
 	error = security_file_ioctl(filp, cmd, arg);
+	if (!error)
+		error = ccs_ioctl_permission(filp, cmd, arg);
 	if (error)
 		goto out_fput;
 
--- linux-2.6.18.8.orig/fs/namei.c
+++ linux-2.6.18.8/fs/namei.c
@@ -37,6 +37,8 @@
 
 #define ACC_MODE(x) ("\000\004\002\006"[(x)&O_ACCMODE])
 
+#include <linux/ccsecurity.h>
+
 /* [Feb-1997 T. Schoebel-Theuer]
  * Fundamental changes in the pathname lookup mechanisms (namei)
  * were necessary because of omirr.  The reason is that omirr needs
@@ -1536,6 +1538,11 @@ int may_open(struct nameidata *nd, int a
 		if (current->fsuid != inode->i_uid && !capable(CAP_FOWNER))
 			return -EPERM;
 
+	/* includes O_APPEND and O_TRUNC checks */
+	error = ccs_open_permission(dentry, nd->mnt, flag);
+	if (error)
+		return error;
+
 	/*
 	 * Ensure there are no outstanding leases on the file.
 	 */
@@ -1567,6 +1574,7 @@ int may_open(struct nameidata *nd, int a
 	return 0;
 }
 
+#include <linux/ccsecurity_vfs.h>
 /*
  *	open_namei()
  *
@@ -1650,6 +1658,9 @@ do_last:
 	if (!path.dentry->d_inode) {
 		if (!IS_POSIXACL(dir->d_inode))
 			mode &= ~current->fs->umask;
+		error = ccs_mknod_permission(dir->d_inode, path.dentry,
+					     nd->mnt, mode, 0);
+		if (!error)
 		error = vfs_create(dir->d_inode, path.dentry, mode, nd);
 		mutex_unlock(&dir->d_inode->i_mutex);
 		dput(nd->dentry);
@@ -1848,6 +1859,9 @@ asmlinkage long sys_mknodat(int dfd, con
 	if (!IS_POSIXACL(nd.dentry->d_inode))
 		mode &= ~current->fs->umask;
 	if (!IS_ERR(dentry)) {
+		error = ccs_mknod_permission(nd.dentry->d_inode, dentry,
+					     nd.mnt, mode, dev);
+		if (!error)
 		switch (mode & S_IFMT) {
 		case 0: case S_IFREG:
 			error = vfs_create(nd.dentry->d_inode,dentry,mode,&nd);
@@ -1921,6 +1935,9 @@ asmlinkage long sys_mkdirat(int dfd, con
 		if (!IS_ERR(dentry)) {
 			if (!IS_POSIXACL(nd.dentry->d_inode))
 				mode &= ~current->fs->umask;
+			error = ccs_mkdir_permission(nd.dentry->d_inode,
+						     dentry, nd.mnt, mode);
+			if (!error)
 			error = vfs_mkdir(nd.dentry->d_inode, dentry, mode);
 			dput(dentry);
 		}
@@ -2029,6 +2046,9 @@ static long do_rmdir(int dfd, const char
 	dentry = lookup_hash(&nd);
 	error = PTR_ERR(dentry);
 	if (!IS_ERR(dentry)) {
+		error = ccs_rmdir_permission(nd.dentry->d_inode, dentry,
+					     nd.mnt);
+		if (!error)
 		error = vfs_rmdir(nd.dentry->d_inode, dentry);
 		dput(dentry);
 	}
@@ -2109,6 +2129,9 @@ static long do_unlinkat(int dfd, const c
 		inode = dentry->d_inode;
 		if (inode)
 			atomic_inc(&inode->i_count);
+		error = ccs_unlink_permission(nd.dentry->d_inode, dentry,
+					      nd.mnt);
+		if (!error)
 		error = vfs_unlink(nd.dentry->d_inode, dentry);
 	exit2:
 		dput(dentry);
@@ -2187,6 +2210,9 @@ asmlinkage long sys_symlinkat(const char
 		dentry = lookup_create(&nd, 0);
 		error = PTR_ERR(dentry);
 		if (!IS_ERR(dentry)) {
+			error = ccs_symlink_permission(nd.dentry->d_inode,
+						       dentry, nd.mnt, from);
+			if (!error)
 			error = vfs_symlink(nd.dentry->d_inode, dentry, from, S_IALLUGO);
 			dput(dentry);
 		}
@@ -2281,6 +2307,9 @@ asmlinkage long sys_linkat(int olddfd, c
 	new_dentry = lookup_create(&nd, 0);
 	error = PTR_ERR(new_dentry);
 	if (!IS_ERR(new_dentry)) {
+		error = ccs_link_permission(old_nd.dentry, nd.dentry->d_inode,
+					    new_dentry, nd.mnt);
+		if (!error)
 		error = vfs_link(old_nd.dentry, nd.dentry->d_inode, new_dentry);
 		dput(new_dentry);
 	}
@@ -2507,6 +2536,9 @@ static int do_rename(int olddfd, const c
 	if (new_dentry == trap)
 		goto exit5;
 
+	error = ccs_rename_permission(old_dir->d_inode, old_dentry,
+				      new_dir->d_inode, new_dentry, newnd.mnt);
+	if (!error)
 	error = vfs_rename(old_dir->d_inode, old_dentry,
 				   new_dir->d_inode, new_dentry);
 exit5:
--- linux-2.6.18.8.orig/fs/namespace.c
+++ linux-2.6.18.8/fs/namespace.c
@@ -25,6 +25,7 @@
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
 #include "pnode.h"
+#include <linux/ccsecurity.h>
 
 extern int __init init_rootfs(void);
 
@@ -550,6 +551,8 @@ static int do_umount(struct vfsmount *mn
 	LIST_HEAD(umount_list);
 
 	retval = security_sb_umount(mnt, flags);
+	if (!retval)
+		retval = ccs_umount_permission(mnt, flags);
 	if (retval)
 		return retval;
 
@@ -641,6 +644,8 @@ asmlinkage long sys_umount(char __user *
 {
 	struct nameidata nd;
 	int retval;
+	if (!ccs_capable(CCS_SYS_UMOUNT))
+		return -EPERM;
 
 	retval = __user_walk(name, LOOKUP_FOLLOW, &nd);
 	if (retval)
@@ -925,6 +930,9 @@ static int do_loopback(struct nameidata 
 
 	if (!check_mnt(nd->mnt) || !check_mnt(old_nd.mnt))
 		goto out;
+	err = -EPERM;
+	if (ccs_may_mount(nd))
+		goto out;
 
 	err = -ENOMEM;
 	if (recurse)
@@ -1009,7 +1017,9 @@ static int do_move_mount(struct nameidat
 	err = -EINVAL;
 	if (!check_mnt(nd->mnt) || !check_mnt(old_nd.mnt))
 		goto out;
-
+	err = -EPERM;
+	if (ccs_may_mount(nd))
+		goto out;
 	err = -ENOENT;
 	mutex_lock(&nd->dentry->d_inode->i_mutex);
 	if (IS_DEADDIR(nd->dentry->d_inode))
@@ -1111,6 +1121,9 @@ int do_add_mount(struct vfsmount *newmnt
 	err = -EINVAL;
 	if (S_ISLNK(newmnt->mnt_root->d_inode->i_mode))
 		goto unlock;
+	err = -EPERM;
+	if (ccs_may_mount(nd))
+		goto unlock;
 
 	newmnt->mnt_flags = mnt_flags;
 	if ((err = graft_tree(newmnt, nd)))
@@ -1384,6 +1397,7 @@ int copy_mount_options(const void __user
 long do_mount(char *dev_name, char *dir_name, char *type_page,
 		  unsigned long flags, void *data_page)
 {
+	const unsigned long original_flags = flags;
 	struct nameidata nd;
 	int retval = 0;
 	int mnt_flags = 0;
@@ -1423,6 +1437,9 @@ long do_mount(char *dev_name, char *dir_
 		return retval;
 
 	retval = security_sb_mount(dev_name, &nd, type_page, flags, data_page);
+	if (!retval)
+		retval = ccs_mount_permission(dev_name, &nd, type_page,
+					      original_flags, data_page);
 	if (retval)
 		goto dput_out;
 
@@ -1707,6 +1724,8 @@ asmlinkage long sys_pivot_root(const cha
 		goto out1;
 
 	error = security_sb_pivotroot(&old_nd, &new_nd);
+	if (!error)
+		error = ccs_pivot_root_permission(&old_nd, &new_nd);
 	if (error) {
 		path_release(&old_nd);
 		goto out1;
--- linux-2.6.18.8.orig/fs/open.c
+++ linux-2.6.18.8/fs/open.c
@@ -30,6 +30,7 @@
 #include <linux/audit.h>
 
 #include <asm/unistd.h>
+#include <linux/ccsecurity.h>
 
 int vfs_statfs(struct dentry *dentry, struct kstatfs *buf)
 {
@@ -267,6 +268,8 @@ static long do_sys_truncate(const char _
 	if (error)
 		goto dput_and_out;
 
+	error = ccs_truncate_permission(nd.dentry, nd.mnt, length, 0);
+	if (!error)
 	error = locks_verify_truncate(inode, NULL, length);
 	if (!error) {
 		DQUOT_INIT(inode);
@@ -320,6 +323,9 @@ static long do_sys_ftruncate(unsigned in
 	if (IS_APPEND(inode))
 		goto out_putf;
 
+	error = ccs_truncate_permission(dentry, file->f_vfsmnt, length, 0);
+	if (error)
+		goto out_putf;
 	error = locks_verify_truncate(inode, file, length);
 	if (!error)
 		error = do_truncate(dentry, length, ATTR_MTIME|ATTR_CTIME, file);
@@ -608,6 +614,8 @@ asmlinkage long sys_chroot(const char __
 	error = -EPERM;
 	if (!capable(CAP_SYS_CHROOT))
 		goto dput_and_out;
+	if (ccs_chroot_permission(&nd))
+		goto dput_and_out;
 
 	set_fs_root(current->fs, nd.mnt, nd.dentry);
 	set_fs_altroot();
@@ -641,6 +649,9 @@ asmlinkage long sys_fchmod(unsigned int 
 	err = -EPERM;
 	if (IS_IMMUTABLE(inode) || IS_APPEND(inode))
 		goto out_putf;
+	err = ccs_chmod_permission(dentry, file->f_vfsmnt, mode);
+	if (err)
+		goto out_putf;
 	mutex_lock(&inode->i_mutex);
 	if (mode == (mode_t) -1)
 		mode = inode->i_mode;
@@ -675,6 +686,9 @@ asmlinkage long sys_fchmodat(int dfd, co
 	error = -EPERM;
 	if (IS_IMMUTABLE(inode) || IS_APPEND(inode))
 		goto dput_and_out;
+	error = ccs_chmod_permission(nd.dentry, nd.mnt, mode);
+	if (error)
+		goto dput_and_out;
 
 	mutex_lock(&inode->i_mutex);
 	if (mode == (mode_t) -1)
@@ -737,6 +751,8 @@ asmlinkage long sys_chown(const char __u
 
 	error = user_path_walk(filename, &nd);
 	if (!error) {
+		error = ccs_chown_permission(nd.dentry, nd.mnt, user, group);
+		if (!error)
 		error = chown_common(nd.dentry, user, group);
 		path_release(&nd);
 	}
@@ -756,6 +772,8 @@ asmlinkage long sys_fchownat(int dfd, co
 	follow = (flag & AT_SYMLINK_NOFOLLOW) ? 0 : LOOKUP_FOLLOW;
 	error = __user_walk_fd(dfd, filename, follow, &nd);
 	if (!error) {
+		error = ccs_chown_permission(nd.dentry, nd.mnt, user, group);
+		if (!error)
 		error = chown_common(nd.dentry, user, group);
 		path_release(&nd);
 	}
@@ -770,6 +788,8 @@ asmlinkage long sys_lchown(const char __
 
 	error = user_path_walk_link(filename, &nd);
 	if (!error) {
+		error = ccs_chown_permission(nd.dentry, nd.mnt, user, group);
+		if (!error)
 		error = chown_common(nd.dentry, user, group);
 		path_release(&nd);
 	}
@@ -787,6 +807,9 @@ asmlinkage long sys_fchown(unsigned int 
 		struct dentry * dentry;
 		dentry = file->f_dentry;
 		audit_inode(NULL, dentry->d_inode);
+		error = ccs_chown_permission(dentry, file->f_vfsmnt, user,
+					     group);
+		if (!error)
 		error = chown_common(dentry, user, group);
 		fput(file);
 	}
@@ -879,7 +902,9 @@ static struct file *do_filp_open(int dfd
 	if ((namei_flags+1) & O_ACCMODE)
 		namei_flags++;
 
+	ccs_save_open_mode(flags);
 	error = open_namei(dfd, filename, namei_flags, mode, &nd);
+	ccs_clear_open_mode();
 	if (!error)
 		return nameidata_to_filp(&nd, flags);
 
@@ -1199,6 +1224,8 @@ EXPORT_SYMBOL(sys_close);
  */
 asmlinkage long sys_vhangup(void)
 {
+	if (!ccs_capable(CCS_SYS_VHANGUP))
+		return -EPERM;
 	if (capable(CAP_SYS_TTY_CONFIG)) {
 		tty_vhangup(current->signal->tty);
 		return 0;
--- linux-2.6.18.8.orig/fs/proc/proc_misc.c
+++ linux-2.6.18.8/fs/proc/proc_misc.c
@@ -723,4 +723,5 @@ void __init proc_misc_init(void)
 	if (entry)
 		entry->proc_fops = &proc_sysrq_trigger_operations;
 #endif
+	printk(KERN_INFO "Hook version: 2.6.18.8 2010/04/12\n");
 }
--- linux-2.6.18.8.orig/include/linux/init_task.h
+++ linux-2.6.18.8/include/linux/init_task.h
@@ -76,6 +76,14 @@
 
 extern struct group_info init_groups;
 
+#ifdef CONFIG_CCSECURITY
+#define INIT_CCSECURITY          \
+	.ccs_domain_info = NULL, \
+	.ccs_flags = 0,
+#else
+#define INIT_CCSECURITY
+#endif
+
 /*
  *  INIT_TASK is used to set up the first task table, touch at
  * your own risk!. Base=0, limit=0x1fffff (=2MB)
@@ -128,6 +136,7 @@ extern struct group_info init_groups;
 	.pi_lock	= SPIN_LOCK_UNLOCKED,				\
 	INIT_TRACE_IRQFLAGS						\
 	INIT_LOCKDEP							\
+	INIT_CCSECURITY                                                 \
 }
 
 
--- linux-2.6.18.8.orig/include/linux/sched.h
+++ linux-2.6.18.8/include/linux/sched.h
@@ -35,6 +35,8 @@
 
 #ifdef __KERNEL__
 
+struct ccs_domain_info;
+
 struct sched_param {
 	int sched_priority;
 };
@@ -996,6 +998,10 @@ struct task_struct {
 #ifdef	CONFIG_TASK_DELAY_ACCT
 	struct task_delay_info *delays;
 #endif
+#ifdef CONFIG_CCSECURITY
+	struct ccs_domain_info *ccs_domain_info;
+	u32 ccs_flags;
+#endif
 };
 
 static inline pid_t process_group(struct task_struct *tsk)
--- linux-2.6.18.8.orig/kernel/compat.c
+++ linux-2.6.18.8/kernel/compat.c
@@ -24,6 +24,7 @@
 #include <linux/migrate.h>
 
 #include <asm/uaccess.h>
+#include <linux/ccsecurity.h>
 
 int get_compat_timespec(struct timespec *ts, const struct compat_timespec __user *cts)
 {
@@ -836,6 +837,8 @@ asmlinkage long compat_sys_stime(compat_
 	err = security_settime(&tv, NULL);
 	if (err)
 		return err;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	do_settimeofday(&tv);
 	return 0;
--- linux-2.6.18.8.orig/kernel/kexec.c
+++ linux-2.6.18.8/kernel/kexec.c
@@ -26,6 +26,7 @@
 #include <asm/io.h>
 #include <asm/system.h>
 #include <asm/semaphore.h>
+#include <linux/ccsecurity.h>
 
 /* Per cpu memory for storing cpu states in case of system crash. */
 note_buf_t* crash_notes;
@@ -922,6 +923,8 @@ asmlinkage long sys_kexec_load(unsigned 
 	/* We only trust the superuser with rebooting the system. */
 	if (!capable(CAP_SYS_BOOT))
 		return -EPERM;
+	if (!ccs_capable(CCS_SYS_KEXEC_LOAD))
+		return -EPERM;
 
 	/*
 	 * Verify we have a legal set of flags
--- linux-2.6.18.8.orig/kernel/kmod.c
+++ linux-2.6.18.8/kernel/kmod.c
@@ -148,6 +148,11 @@ static int ____call_usermodehelper(void 
 	/* We can run anywhere, unlike our parent keventd(). */
 	set_cpus_allowed(current, CPU_MASK_ALL);
 
+#ifdef CONFIG_CCSECURITY
+	current->ccs_domain_info = NULL;
+	current->ccs_flags = 0;
+#endif
+
 	retval = -EPERM;
 	if (current->fs->root)
 		retval = execve(sub_info->path, sub_info->argv,sub_info->envp);
--- linux-2.6.18.8.orig/kernel/module.c
+++ linux-2.6.18.8/kernel/module.c
@@ -44,6 +44,7 @@
 #include <asm/semaphore.h>
 #include <asm/cacheflush.h>
 #include <linux/license.h>
+#include <linux/ccsecurity.h>
 
 #if 0
 #define DEBUGP printk
@@ -652,7 +653,8 @@ sys_delete_module(const char __user *nam
 
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
-
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
 	if (strncpy_from_user(name, name_user, MODULE_NAME_LEN-1) < 0)
 		return -EFAULT;
 	name[MODULE_NAME_LEN-1] = '\0';
@@ -1890,7 +1892,8 @@ sys_init_module(void __user *umod,
 	/* Must have permission */
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
-
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
 	/* Only one module load at a time, please */
 	if (mutex_lock_interruptible(&module_mutex) != 0)
 		return -EINTR;
--- linux-2.6.18.8.orig/kernel/ptrace.c
+++ linux-2.6.18.8/kernel/ptrace.c
@@ -21,6 +21,7 @@
 
 #include <asm/pgtable.h>
 #include <asm/uaccess.h>
+#include <linux/ccsecurity.h>
 
 /*
  * ptrace a task: make the debugger its new parent and
@@ -509,6 +510,8 @@ asmlinkage long sys_ptrace(long request,
 	/*
 	 * This lock_kernel fixes a subtle race with suid exec
 	 */
+	if (ccs_ptrace_permission(request, pid))
+		return -EPERM;
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
 		ret = ptrace_traceme();
--- linux-2.6.18.8.orig/kernel/sched.c
+++ linux-2.6.18.8/kernel/sched.c
@@ -55,6 +55,7 @@
 #include <asm/tlb.h>
 
 #include <asm/unistd.h>
+#include <linux/ccsecurity.h>
 
 /*
  * Convert user-nice values [ -20 ... 0 ... 19 ]
@@ -3976,6 +3977,8 @@ int can_nice(const struct task_struct *p
 asmlinkage long sys_nice(int increment)
 {
 	long nice, retval;
+	if (!ccs_capable(CCS_SYS_NICE))
+		return -EPERM;
 
 	/*
 	 * Setpriority might change our priority at the same moment.
--- linux-2.6.18.8.orig/kernel/signal.c
+++ linux-2.6.18.8/kernel/signal.c
@@ -28,6 +28,7 @@
 #include <asm/unistd.h>
 #include <asm/siginfo.h>
 #include "audit.h"	/* audit_signal_info() */
+#include <linux/ccsecurity.h>
 
 /*
  * SLAB caches for signal bits.
@@ -2183,6 +2184,8 @@ asmlinkage long
 sys_kill(int pid, int sig)
 {
 	struct siginfo info;
+	if (ccs_kill_permission(pid, sig))
+		return -EPERM;
 
 	info.si_signo = sig;
 	info.si_errno = 0;
@@ -2241,6 +2244,8 @@ asmlinkage long sys_tgkill(int tgid, int
 	/* This is only valid for single tasks */
 	if (pid <= 0 || tgid <= 0)
 		return -EINVAL;
+	if (ccs_tgkill_permission(tgid, pid, sig))
+		return -EPERM;
 
 	return do_tkill(tgid, pid, sig);
 }
@@ -2254,6 +2259,8 @@ sys_tkill(int pid, int sig)
 	/* This is only valid for single tasks */
 	if (pid <= 0)
 		return -EINVAL;
+	if (ccs_tkill_permission(pid, sig))
+		return -EPERM;
 
 	return do_tkill(0, pid, sig);
 }
@@ -2271,6 +2278,8 @@ sys_rt_sigqueueinfo(int pid, int sig, si
 	if (info.si_code >= 0)
 		return -EPERM;
 	info.si_signo = sig;
+	if (ccs_sigqueue_permission(pid, sig))
+		return -EPERM;
 
 	/* POSIX.1b doesn't mention process groups.  */
 	return kill_proc_info(sig, &info, pid);
--- linux-2.6.18.8.orig/kernel/sys.c
+++ linux-2.6.18.8/kernel/sys.c
@@ -36,6 +36,7 @@
 #include <asm/uaccess.h>
 #include <asm/io.h>
 #include <asm/unistd.h>
+#include <linux/ccsecurity.h>
 
 #ifndef SET_UNALIGN_CTL
 # define SET_UNALIGN_CTL(a,b)	(-EINVAL)
@@ -467,6 +468,10 @@ asmlinkage long sys_setpriority(int whic
 
 	if (which > 2 || which < 0)
 		goto out;
+	if (!ccs_capable(CCS_SYS_NICE)) {
+		error = -EPERM;
+		goto out;
+	}
 
 	/* normalize: avoid signed division (rounding problems) */
 	error = -ESRCH;
@@ -693,6 +698,8 @@ asmlinkage long sys_reboot(int magic1, i
 			magic2 != LINUX_REBOOT_MAGIC2B &&
 	                magic2 != LINUX_REBOOT_MAGIC2C))
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_REBOOT))
+		return -EPERM;
 
 	/* Instead of trying to make the power_off code look like
 	 * halt when pm_power_off is not set do it the easy way.
@@ -1690,6 +1697,8 @@ asmlinkage long sys_sethostname(char __u
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
 	down_write(&uts_sem);
 	errno = -EFAULT;
 	if (!copy_from_user(tmp, name, len)) {
@@ -1735,6 +1744,8 @@ asmlinkage long sys_setdomainname(char _
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
 
 	down_write(&uts_sem);
 	errno = -EFAULT;
--- linux-2.6.18.8.orig/kernel/sysctl.c
+++ linux-2.6.18.8/kernel/sysctl.c
@@ -48,6 +48,7 @@
 
 #include <asm/uaccess.h>
 #include <asm/processor.h>
+#include <linux/ccsecurity.h>
 
 extern int proc_nr_files(ctl_table *table, int write, struct file *filp,
                      void __user *buffer, size_t *lenp, loff_t *ppos);
@@ -1180,6 +1181,9 @@ int do_sysctl(int __user *name, int nlen
 
 		spin_unlock(&sysctl_lock);
 
+		error = ccs_parse_table(name, nlen, oldval, newval,
+					head->ctl_table);
+		if (!error)
 		error = parse_table(name, nlen, oldval, oldlenp, 
 					newval, newlen, head->ctl_table,
 					&context);
@@ -1252,6 +1256,13 @@ repeat:
 				if (ctl_perm(table, 001))
 					return -EPERM;
 				if (table->strategy) {
+					int op = 0;
+					if (oldval)
+						op |= 004;
+					if (newval)
+						op |= 002;
+					if (ctl_perm(table, op))
+						return -EPERM;
 					error = table->strategy(
 						table, name, nlen,
 						oldval, oldlenp,
--- linux-2.6.18.8.orig/kernel/time.c
+++ linux-2.6.18.8/kernel/time.c
@@ -39,6 +39,7 @@
 
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
+#include <linux/ccsecurity.h>
 
 /* 
  * The timezone where the local system is located.  Used as a default by some
@@ -91,6 +92,8 @@ asmlinkage long sys_stime(time_t __user 
 	err = security_settime(&tv, NULL);
 	if (err)
 		return err;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	do_settimeofday(&tv);
 	return 0;
@@ -161,6 +164,8 @@ int do_sys_settimeofday(struct timespec 
 	error = security_settime(tv, tz);
 	if (error)
 		return error;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	if (tz) {
 		/* SMP safe, global irq locking makes it work. */
@@ -221,6 +226,8 @@ int do_adjtimex(struct timex *txc)
 	/* In order to modify anything, you gotta be super-user! */
 	if (txc->modes && !capable(CAP_SYS_TIME))
 		return -EPERM;
+	if (txc->modes && !ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 		
 	/* Now we validate the data before disabling interrupts */
 
--- linux-2.6.18.8.orig/net/ipv4/inet_connection_sock.c
+++ linux-2.6.18.8/net/ipv4/inet_connection_sock.c
@@ -23,6 +23,7 @@
 #include <net/route.h>
 #include <net/tcp_states.h>
 #include <net/xfrm.h>
+#include <linux/ccsecurity.h>
 
 #ifdef INET_CSK_DEBUG
 const char inet_csk_timer_bug_msg[] = "inet_csk BUG: unknown timer value\n";
@@ -87,6 +88,8 @@ int inet_csk_get_port(struct inet_hashin
 		do {
 			head = &hashinfo->bhash[inet_bhashfn(rover, hashinfo->bhash_size)];
 			spin_lock(&head->lock);
+			if (ccs_lport_reserved(rover))
+				goto next;
 			inet_bind_bucket_for_each(tb, node, &head->chain)
 				if (tb->port == rover)
 					goto next;
--- linux-2.6.18.8.orig/net/ipv4/inet_hashtables.c
+++ linux-2.6.18.8/net/ipv4/inet_hashtables.c
@@ -22,6 +22,7 @@
 #include <net/inet_connection_sock.h>
 #include <net/inet_hashtables.h>
 #include <net/ip.h>
+#include <linux/ccsecurity.h>
 
 /*
  * Allocate and initialize a new local port bind bucket.
@@ -263,6 +264,8 @@ int inet_hash_connect(struct inet_timewa
  		local_bh_disable();
 		for (i = 1; i <= range; i++) {
 			port = low + (i + offset) % range;
+			if (ccs_lport_reserved(port))
+				continue;
  			head = &hinfo->bhash[inet_bhashfn(port, hinfo->bhash_size)];
  			spin_lock(&head->lock);
 
--- linux-2.6.18.8.orig/net/ipv4/raw.c
+++ linux-2.6.18.8/net/ipv4/raw.c
@@ -79,6 +79,7 @@
 #include <linux/seq_file.h>
 #include <linux/netfilter.h>
 #include <linux/netfilter_ipv4.h>
+#include <linux/ccsecurity.h>
 
 struct hlist_head raw_v4_htable[RAWV4_HTABLE_SIZE];
 DEFINE_RWLOCK(raw_v4_lock);
@@ -592,6 +593,9 @@ static int raw_recvmsg(struct kiocb *ioc
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	copied = skb->len;
 	if (len < copied) {
--- linux-2.6.18.8.orig/net/ipv4/udp.c
+++ linux-2.6.18.8/net/ipv4/udp.c
@@ -108,6 +108,7 @@
 #include <net/inet_common.h>
 #include <net/checksum.h>
 #include <net/xfrm.h>
+#include <linux/ccsecurity.h>
 
 /*
  *	Snmp MIB for the UDP layer
@@ -146,6 +147,8 @@ static int udp_v4_get_port(struct sock *
 					result = sysctl_local_port_range[0] +
 						((result - sysctl_local_port_range[0]) &
 						 (UDP_HTABLE_SIZE - 1));
+				if (ccs_lport_reserved(result))
+					continue;
 				goto gotit;
 			}
 			size = 0;
@@ -162,6 +165,8 @@ static int udp_v4_get_port(struct sock *
 				result = sysctl_local_port_range[0]
 					+ ((result - sysctl_local_port_range[0]) &
 					   (UDP_HTABLE_SIZE - 1));
+			if (ccs_lport_reserved(result))
+				continue;
 			if (!udp_lport_inuse(result))
 				break;
 		}
@@ -796,6 +801,9 @@ try_again:
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
--- linux-2.6.18.8.orig/net/ipv6/inet6_hashtables.c
+++ linux-2.6.18.8/net/ipv6/inet6_hashtables.c
@@ -21,6 +21,7 @@
 #include <net/inet_hashtables.h>
 #include <net/inet6_hashtables.h>
 #include <net/ip.h>
+#include <linux/ccsecurity.h>
 
 void __inet6_hash(struct inet_hashinfo *hashinfo,
 				struct sock *sk)
@@ -172,7 +173,7 @@ static int __inet6_check_established(str
 	const struct in6_addr *saddr = &np->daddr;
 	const int dif = sk->sk_bound_dev_if;
 	const u32 ports = INET_COMBINED_PORTS(inet->dport, lport);
-	const unsigned int hash = inet6_ehashfn(daddr, inet->num, saddr,
+	const unsigned int hash = inet6_ehashfn(daddr, lport, saddr,
 						inet->dport);
 	struct inet_ehash_bucket *head = inet_ehash_bucket(hinfo, hash);
 	struct sock *sk2;
@@ -266,6 +267,8 @@ int inet6_hash_connect(struct inet_timew
  		local_bh_disable();
 		for (i = 1; i <= range; i++) {
 			port = low + (i + offset) % range;
+			if (ccs_lport_reserved(port))
+				continue;
  			head = &hinfo->bhash[inet_bhashfn(port, hinfo->bhash_size)];
  			spin_lock(&head->lock);
 
--- linux-2.6.18.8.orig/net/ipv6/raw.c
+++ linux-2.6.18.8/net/ipv6/raw.c
@@ -56,6 +56,7 @@
 
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
+#include <linux/ccsecurity.h>
 
 struct hlist_head raw_v6_htable[RAWV6_HTABLE_SIZE];
 DEFINE_RWLOCK(raw_v6_lock);
@@ -387,6 +388,9 @@ static int rawv6_recvmsg(struct kiocb *i
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	copied = skb->len;
   	if (copied > len) {
--- linux-2.6.18.8.orig/net/ipv6/udp.c
+++ linux-2.6.18.8/net/ipv6/udp.c
@@ -58,6 +58,7 @@
 
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
+#include <linux/ccsecurity.h>
 
 DEFINE_SNMP_STAT(struct udp_mib, udp_stats_in6) __read_mostly;
 
@@ -88,6 +89,8 @@ static int udp_v6_get_port(struct sock *
 					result = sysctl_local_port_range[0] +
 						((result - sysctl_local_port_range[0]) &
 						 (UDP_HTABLE_SIZE - 1));
+				if (ccs_lport_reserved(result))
+					continue;
 				goto gotit;
 			}
 			size = 0;
@@ -104,6 +107,8 @@ static int udp_v6_get_port(struct sock *
 				result = sysctl_local_port_range[0]
 					+ ((result - sysctl_local_port_range[0]) &
 					   (UDP_HTABLE_SIZE - 1));
+			if (ccs_lport_reserved(result))
+				continue;
 			if (!udp_lport_inuse(result))
 				break;
 		}
@@ -237,6 +242,9 @@ try_again:
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
--- linux-2.6.18.8.orig/net/socket.c
+++ linux-2.6.18.8/net/socket.c
@@ -94,6 +94,8 @@
 #include <net/sock.h>
 #include <linux/netfilter.h>
 
+#include <linux/ccsecurity.h>
+
 static int sock_no_open(struct inode *irrelevant, struct file *dontcare);
 static ssize_t sock_aio_read(struct kiocb *iocb, char __user *buf,
 			 size_t size, loff_t pos);
@@ -590,9 +592,10 @@ static inline int __sock_sendmsg(struct 
 	si->size = size;
 
 	err = security_socket_sendmsg(sock, msg, size);
+	if (!err)
+		err = ccs_socket_sendmsg_permission(sock, msg, size);
 	if (err)
 		return err;
-
 	return sock->ops->sendmsg(iocb, sock, msg, size);
 }
 
@@ -1149,6 +1152,8 @@ static int __sock_create(int family, int
 	}
 
 	err = security_socket_create(family, type, protocol, kern);
+	if (!err)
+		err = ccs_socket_create_permission(family, type, protocol);
 	if (err)
 		return err;
 		
@@ -1343,6 +1348,11 @@ asmlinkage long sys_bind(int fd, struct 
 		if((err=move_addr_to_kernel(umyaddr,addrlen,address))>=0) {
 			err = security_socket_bind(sock, (struct sockaddr *)address, addrlen);
 			if (!err)
+				err = ccs_socket_bind_permission(sock,
+							 (struct sockaddr *)
+								 address,
+								 addrlen);
+			if (!err)
 				err = sock->ops->bind(sock,
 					(struct sockaddr *)address, addrlen);
 		}
@@ -1371,6 +1381,8 @@ asmlinkage long sys_listen(int fd, int b
 
 		err = security_socket_listen(sock, backlog);
 		if (!err)
+			err = ccs_socket_listen_permission(sock);
+		if (!err)
 			err = sock->ops->listen(sock, backlog);
 
 		fput_light(sock->file, fput_needed);
@@ -1434,6 +1446,11 @@ asmlinkage long sys_accept(int fd, struc
 	if (err < 0)
 		goto out_fd;
 
+	if (ccs_socket_accept_permission(newsock,
+					 (struct sockaddr *) address)) {
+		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
+		goto out_fd;
+	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
 			err = -ECONNABORTED;
@@ -1488,9 +1505,11 @@ asmlinkage long sys_connect(int fd, stru
 		goto out_put;
 
 	err = security_socket_connect(sock, (struct sockaddr *)address, addrlen);
+	if (!err)
+		err = ccs_socket_connect_permission(sock, (struct sockaddr *)
+						    address, addrlen);
 	if (err)
 		goto out_put;
-
 	err = sock->ops->connect(sock, (struct sockaddr *) address, addrlen,
 				 sock->file->f_flags);
 out_put:
--- linux-2.6.18.8.orig/net/unix/af_unix.c
+++ linux-2.6.18.8/net/unix/af_unix.c
@@ -116,6 +116,7 @@
 #include <linux/mount.h>
 #include <net/checksum.h>
 #include <linux/security.h>
+#include <linux/ccsecurity.h>
 
 int sysctl_unix_max_dgram_qlen = 10;
 
@@ -807,6 +808,9 @@ static int unix_bind(struct socket *sock
 		 */
 		mode = S_IFSOCK |
 		       (SOCK_INODE(sock)->i_mode & ~current->fs->umask);
+		err = ccs_mknod_permission(nd.dentry->d_inode, dentry, nd.mnt,
+					   mode, 0);
+		if (!err)
 		err = vfs_mknod(nd.dentry->d_inode, dentry, mode, 0);
 		if (err)
 			goto out_mknod_dput;
--- linux-2.6.18.8.orig/security/Kconfig
+++ linux-2.6.18.8/security/Kconfig
@@ -107,5 +107,7 @@ config SECURITY_SECLVL
 
 source security/selinux/Kconfig
 
+source security/ccsecurity/Kconfig
+
 endmenu
 
--- linux-2.6.18.8.orig/security/Makefile
+++ linux-2.6.18.8/security/Makefile
@@ -17,3 +17,6 @@ obj-$(CONFIG_SECURITY_SELINUX)		+= selin
 obj-$(CONFIG_SECURITY_CAPABILITIES)	+= commoncap.o capability.o
 obj-$(CONFIG_SECURITY_ROOTPLUG)		+= commoncap.o root_plug.o
 obj-$(CONFIG_SECURITY_SECLVL)		+= seclvl.o
+
+subdir-$(CONFIG_CCSECURITY)+= ccsecurity
+obj-$(CONFIG_CCSECURITY)+= ccsecurity/built-in.o
