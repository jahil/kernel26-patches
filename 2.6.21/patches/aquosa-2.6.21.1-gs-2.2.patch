--- linux-2.6.21.1/arch/i386/Kconfig	2007-04-27 23:49:26.000000000 +0200
+++ linux-2.6.21.1-gs-2.2/arch/i386/Kconfig	2007-05-24 15:40:50.000000000 +0200
@@ -305,6 +305,12 @@
 
 source "kernel/Kconfig.preempt"
 
+config GENERIC_SCHEDULER
+	bool 'Generic Scheduler'
+	help
+	  Gensched hooks, for implementing generic scheduling strategies in
+	  modules...
+
 config X86_UP_APIC
 	bool "Local APIC support on uniprocessors"
 	depends on !SMP && !(X86_VISWS || X86_VOYAGER || X86_GENERICARCH)
--- linux-2.6.21.1/arch/ppc/Kconfig	2007-04-27 23:49:26.000000000 +0200
+++ linux-2.6.21.1-gs-2.2/arch/ppc/Kconfig	2007-05-24 15:40:50.000000000 +0200
@@ -980,6 +980,12 @@
 	depends on SMP
 	default "4"
 
+config GENERIC_SCHEDULER
+	bool 'Generic Scheduler'
+	help
+	  Gensched hooks, for implementing generic scheduling strategies in
+	  modules...
+
 config HIGHMEM
 	bool "High memory support"
 
--- linux-2.6.21.1/arch/um/Kconfig	2007-04-27 23:49:26.000000000 +0200
+++ linux-2.6.21.1-gs-2.2/arch/um/Kconfig	2007-05-24 15:40:50.000000000 +0200
@@ -294,6 +294,12 @@
 	up for the time spent at the breakpoint.  This could result in a
 	noticeable lag.  If this is a problem, then disable this option.
 
+config GENERIC_SCHEDULER
+	bool 'Generic Scheduler'
+	help
+	  Gensched hooks, for implementing generic scheduling strategies in
+	  modules...
+
 endmenu
 
 source "init/Kconfig"
--- linux-2.6.21.1/include/linux/init_task.h	2007-04-27 23:49:26.000000000 +0200
+++ linux-2.6.21.1-gs-2.2/include/linux/init_task.h	2007-05-24 15:40:50.000000000 +0200
@@ -88,6 +88,12 @@
 
 extern struct group_info init_groups;
 
+#ifdef CONFIG_GENERIC_SCHEDULER
+#  define DATA_INIT .private_data = NULL,
+#else
+#  define DATA_INIT
+#endif /* CONFIG_GENERIC_SCHEDULER */
+
 /*
  *  INIT_TASK is used to set up the first task table, touch at
  * your own risk!. Base=0, limit=0x1fffff (=2MB)
@@ -139,6 +145,7 @@
 	.cpu_timers	= INIT_CPU_TIMERS(tsk.cpu_timers),		\
 	.fs_excl	= ATOMIC_INIT(0),				\
 	.pi_lock	= SPIN_LOCK_UNLOCKED,				\
+ 	DATA_INIT							\
 	INIT_TRACE_IRQFLAGS						\
 	INIT_LOCKDEP							\
 }
--- linux-2.6.21.1/include/linux/sched.h	2007-04-27 23:49:26.000000000 +0200
+++ linux-2.6.21.1-gs-2.2/include/linux/sched.h	2007-05-24 15:40:50.000000000 +0200
@@ -1042,6 +1042,10 @@
 	atomic_t fs_excl;	/* holding fs exclusive resources */
 	struct rcu_head rcu;
 
+#ifdef CONFIG_GENERIC_SCHEDULER
+	void *private_data;
+#endif /* CONFIG_GENERIC_SCHEDULER */
+
 	/*
 	 * cache last used pipe for splice
 	 */
@@ -1599,6 +1603,20 @@
 
 extern void signal_wake_up(struct task_struct *t, int resume_stopped);
 
+#ifdef CONFIG_GENERIC_SCHEDULER
+
+extern void (*block_hook)(struct task_struct *tsk);
+extern void (*unblock_hook)(struct task_struct *tsk, long old_state);
+extern void (*stop_hook)(struct task_struct *tsk);
+extern void (*continue_hook)(struct task_struct *tsk, long old_state);
+extern void (*fork_hook)(struct task_struct *tsk, struct task_struct *prev);
+extern void (*cleanup_hook)(struct task_struct *tsk);
+extern void (*switch_hook)(struct task_struct *prev, struct task_struct *next);
+extern void set_task_rr_prio(struct task_struct *p, int priority);
+extern rwlock_t hook_lock;
+
+#endif	/* CONFIG_GENERIC_SCHEDULER */
+
 /*
  * Wrappers for p->thread_info->cpu access. No-op on UP.
  */
--- linux-2.6.21.1/kernel/fork.c	2007-04-27 23:49:26.000000000 +0200
+++ linux-2.6.21.1-gs-2.2/kernel/fork.c	2007-05-24 15:40:50.000000000 +0200
@@ -68,6 +68,7 @@
 DEFINE_PER_CPU(unsigned long, process_counts) = 0;
 
 __cacheline_aligned DEFINE_RWLOCK(tasklist_lock);  /* outer */
+EXPORT_SYMBOL(tasklist_lock);
 
 int nr_processes(void)
 {
@@ -986,6 +987,10 @@
 	if (!p)
 		goto fork_out;
 
+#ifdef CONFIG_GENERIC_SCHEDULER
+	p->private_data = NULL;
+#endif
+
 	rt_mutex_init_task(p);
 
 #ifdef CONFIG_TRACE_IRQFLAGS
--- linux-2.6.21.1/kernel/exit.c	2007-04-27 23:49:26.000000000 +0200
+++ linux-2.6.21.1-gs-2.2/kernel/exit.c	2007-05-24 15:40:50.000000000 +0200
@@ -50,6 +50,11 @@
 
 extern void sem_exit (void);
 
+#ifdef CONFIG_GENERIC_SCHEDULER
+void (*cleanup_hook)(struct task_struct *tsk);
+EXPORT_SYMBOL_GPL(cleanup_hook);
+#endif /* CONFIG_GENERIC_SCHEDULER */
+
 static void exit_mm(struct task_struct * tsk);
 
 static void __unhash_process(struct task_struct *p)
@@ -965,6 +970,15 @@
 		__free_pipe_info(tsk->splice_pipe);
 
 	preempt_disable();
+
+#ifdef CONFIG_GENERIC_SCHEDULER
+	read_lock(&hook_lock);
+ 	if (cleanup_hook && tsk->private_data != NULL) {
+ 		cleanup_hook(tsk);
+ 	}
+	read_unlock(&hook_lock);
+#endif
+
 	/* causes final put_task_struct in finish_task_switch(). */
 	tsk->state = TASK_DEAD;
 
--- linux-2.6.21.1/kernel/sched.c	2007-04-27 23:49:26.000000000 +0200
+++ linux-2.6.21.1-gs-2.2/kernel/sched.c	2007-05-24 15:40:50.000000000 +0200
@@ -56,6 +56,26 @@
 
 #include <asm/unistd.h>
 
+#include <linux/sched.h>
+
+#ifdef CONFIG_GENERIC_SCHEDULER
+void (*block_hook)(struct task_struct *tsk);
+void (*unblock_hook)(struct task_struct *tsk, long old_state);
+void (*stop_hook)(struct task_struct *tsk);
+void (*continue_hook)(struct task_struct *tsk, long old_state);
+void (*fork_hook)(struct task_struct *tsk, struct task_struct *prev);
+void (*switch_hook)(struct task_struct *prev, struct task_struct *next);
+rwlock_t hook_lock __cacheline_aligned = RW_LOCK_UNLOCKED;
+EXPORT_SYMBOL(fork_hook);
+EXPORT_SYMBOL(block_hook);
+EXPORT_SYMBOL(unblock_hook);
+EXPORT_SYMBOL(stop_hook);
+EXPORT_SYMBOL(continue_hook);
+EXPORT_SYMBOL(switch_hook);
+EXPORT_SYMBOL(hook_lock);
+#endif	/* CONFIG_GENERIC_SCHEDULER */
+
+
 /*
  * Scheduler clock - returns current time in nanosec units.
  * This is default implementation.
@@ -858,6 +878,11 @@
 {
 	struct prio_array *target = rq->active;
 
+	if (p->array != NULL) {
+		printk("ATTEMPT TO __ACTIVATE WITH NON-NULL TASK->ARRAY !\n");
+		return;
+	}
+
 	if (batch_task(p))
 		target = rq->expired;
 	enqueue_task(p, target);
@@ -1011,6 +1036,10 @@
  */
 static void deactivate_task(struct task_struct *p, struct rq *rq)
 {
+	if (p->array == NULL) {
+		printk("ATTEMPT TO DEACTIVATE WITH NULL TASK->ARRAY !\n");
+		return;
+	}
 	dec_nr_running(p, rq);
 	dequeue_task(p, p->array);
 	p->array = NULL;
@@ -1562,6 +1591,26 @@
 out:
 	task_rq_unlock(rq, &flags);
 
+#ifdef CONFIG_GENERIC_SCHEDULER
+	if ((success == 1) && (old_state & TASK_STOPPED)) {
+		read_lock(&hook_lock);
+		if ((continue_hook != NULL) && (p->private_data != NULL)) {
+			/*p->state = old_state;*/
+			continue_hook(p, old_state);
+			/*p->state = TASK_RUNNING;*/
+		}
+		read_unlock(&hook_lock);
+	} else if ((success == 1) && (old_state < TASK_STOPPED)) {
+		read_lock(&hook_lock);
+		if ((unblock_hook != NULL) && (p->private_data != NULL)) {
+			/*p->state = old_state;*/
+			unblock_hook(p, old_state);
+			/*p->state = TASK_RUNNING;*/
+		}
+		read_unlock(&hook_lock);
+	}
+#endif /* CONFIG_GENERIC_SCHEDULER */
+
 	return success;
 }
 
@@ -1840,6 +1889,14 @@
 #endif
 	if (current->set_child_tid)
 		put_user(current->pid, current->set_child_tid);
+
+#ifdef CONFIG_GENERIC_SCHEDULER
+	read_lock(&hook_lock);
+	if (prev->private_data != NULL && fork_hook != NULL) {
+		fork_hook(current, prev);
+	}
+	read_unlock(&hook_lock);
+#endif /* CONFIG_GENERIC_SCHEDULER */
 }
 
 /*
@@ -1889,6 +1946,44 @@
 }
 
 /*
+ * activate_task_local - activate a task on the local CPU
+ */
+void activate_task_local(struct task_struct *task) {
+	unsigned long flags;
+	struct rq *rq;
+
+	read_lock(&tasklist_lock);
+	rq = task_rq_lock(task, &flags);
+
+	activate_task(task, rq, task_cpu(task) == smp_processor_id());
+	if (TASK_PREEMPTS_CURR(task, rq))
+		resched_task(rq->curr);
+
+	task_rq_unlock(rq, &flags);
+	read_unlock(&tasklist_lock);
+}
+EXPORT_SYMBOL(activate_task_local);
+
+/*
+ * deactivate_task_local - deactivate a task on the local CPU
+ */
+void deactivate_task_local(struct task_struct *task) {
+	unsigned long flags;
+	struct rq *rq;
+
+	read_lock(&tasklist_lock);
+	rq = task_rq_lock(task, &flags);
+
+	deactivate_task(task, rq);
+	if (rq->curr == task)
+		resched_task(rq->curr);
+
+	task_rq_unlock(rq, &flags);
+	read_unlock(&tasklist_lock);
+}
+EXPORT_SYMBOL(deactivate_task_local);
+
+/*
  * nr_running, nr_uninterruptible and nr_context_switches:
  *
  * externally visible scheduler statistics: current number of runnable
@@ -3336,6 +3431,20 @@
 	 */
 	run_time /= (CURRENT_BONUS(prev) ? : 1);
 
+#ifdef CONFIG_GENERIC_SCHEDULER
+	read_lock_irq(&hook_lock);
+	if (prev->state && (prev->state <= TASK_STOPPED) && !(preempt_count() & PREEMPT_ACTIVE)) {
+		if (unlikely((prev->state & TASK_INTERRUPTIBLE) &&
+				unlikely(signal_pending(prev)))) {
+		} else if (! (prev->flags & (PF_EXITING))) {
+			if ((stop_hook != NULL) && (prev->private_data != NULL) && (prev->state & TASK_STOPPED))
+			  stop_hook(prev);
+			else if ((block_hook != NULL) && (prev->private_data != NULL))
+			  block_hook(prev);
+		}
+	}
+#endif /* CONFIG_GENERIC_SCHEDULER */
+
 	spin_lock_irq(&rq->lock);
 
 	switch_count = &prev->nivcsw;
@@ -3351,6 +3460,10 @@
 		}
 	}
 
+#ifdef CONFIG_GENERIC_SCHEDULER
+	read_unlock(&hook_lock);
+#endif
+
 	cpu = smp_processor_id();
 	if (unlikely(!rq->nr_running)) {
 		idle_balance(cpu, rq);
@@ -3413,6 +3526,12 @@
 
 	sched_info_switch(prev, next);
 	if (likely(prev != next)) {
+#ifdef CONFIG_GENERIC_SCHEDULER
+		read_lock(&hook_lock);
+		if (switch_hook && (prev->private_data != NULL || next->private_data != NULL))
+			switch_hook(prev, next);
+		read_unlock(&hook_lock);
+#endif
 		next->timestamp = next->last_ran = now;
 		rq->nr_switches++;
 		rq->curr = next;
@@ -4171,6 +4290,36 @@
 }
 EXPORT_SYMBOL_GPL(sched_setscheduler);
 
+#ifdef CONFIG_GENERIC_SCHEDULER
+/**
+ * If priority != 0, then set policy to SCHED_RR and prio to priority.
+ * else, set policy to SCHED_NORMAL and prio to 0.
+ */
+void set_task_rr_prio(struct task_struct *p, int priority)
+{
+	struct prio_array *array;
+	unsigned long flags;
+	struct rq *rq;
+
+	read_lock(&tasklist_lock);
+	rq = task_rq_lock(p, &flags);
+	array = p->array;
+	if (array)
+		deactivate_task(p, task_rq(p));
+	if (priority > 0) {
+	  __setscheduler(p, SCHED_RR, priority);
+	} else {
+	  __setscheduler(p, SCHED_NORMAL, 0);
+	}
+	if (array) {
+		__activate_task(p, task_rq(p));
+	}
+	task_rq_unlock(rq, &flags);
+	read_unlock(&tasklist_lock);
+}
+EXPORT_SYMBOL_GPL(set_task_rr_prio);
+#endif
+
 static int
 do_sched_setscheduler(pid_t pid, int policy, struct sched_param __user *param)
 {
--- linux-2.6.21.1/Makefile	2007-04-27 23:49:26.000000000 +0200
+++ linux-2.6.21.1-gs-2.2/Makefile	2007-05-24 15:40:50.000000000 +0200
@@ -1,7 +1,7 @@
 VERSION = 2
 PATCHLEVEL = 6
 SUBLEVEL = 21
-EXTRAVERSION = .1
+EXTRAVERSION = .1-gs-2.2
 NAME = Nocturnal Monster Puppy
 
 # *DOCUMENTATION*
