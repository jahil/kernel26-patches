This is TOMOYO Linux patch for kernel 2.6.19.7.

Source code for this patch is http://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.19.7.tar.bz2
---
 arch/alpha/kernel/ptrace.c      |    9 +++
 arch/ia64/ia32/sys_ia32.c       |    9 +++
 arch/ia64/kernel/ptrace.c       |    9 +++
 arch/m32r/kernel/ptrace.c       |    9 +++
 arch/mips/kernel/ptrace32.c     |    9 +++
 arch/powerpc/kernel/ptrace32.c  |    9 +++
 arch/s390/kernel/ptrace.c       |    9 +++
 arch/sparc/kernel/ptrace.c      |   11 +++
 arch/sparc64/kernel/ptrace.c    |   11 +++
 arch/x86_64/ia32/ptrace32.c     |    9 +++
 fs/Kconfig                      |    2 
 fs/Makefile                     |    2 
 fs/attr.c                       |   19 ++++++
 fs/compat.c                     |   11 +++
 fs/exec.c                       |   21 +++++++
 fs/fcntl.c                      |    9 +++
 fs/ioctl.c                      |    7 ++
 fs/namei.c                      |  112 ++++++++++++++++++++++++++++++++++++++++
 fs/namespace.c                  |   50 +++++++++++++++++
 fs/open.c                       |   27 +++++++++
 fs/proc/Makefile                |    3 +
 fs/proc/proc_misc.c             |    5 +
 include/linux/init_task.h       |    4 +
 include/linux/sched.h           |    9 +++
 kernel/compat.c                 |    7 ++
 kernel/kexec.c                  |    7 ++
 kernel/kmod.c                   |    5 +
 kernel/module.c                 |   13 +++-
 kernel/ptrace.c                 |    9 +++
 kernel/sched.c                  |    7 ++
 kernel/signal.c                 |   21 +++++++
 kernel/sys.c                    |   21 +++++++
 kernel/sysctl.c                 |  112 ++++++++++++++++++++++++++++++++++++++++
 kernel/time.c                   |   11 +++
 kernel/time/ntp.c               |    7 ++
 net/core/datagram.c             |   11 +++
 net/ipv4/inet_connection_sock.c |    7 ++
 net/ipv4/inet_hashtables.c      |    7 ++
 net/ipv4/udp.c                  |   11 +++
 net/ipv6/inet6_hashtables.c     |    9 ++-
 net/socket.c                    |   42 ++++++++++++++-
 net/unix/af_unix.c              |   15 +++++
 42 files changed, 690 insertions(+), 7 deletions(-)

--- linux-2.6.19.7.orig/arch/alpha/kernel/ptrace.c
+++ linux-2.6.19.7/arch/alpha/kernel/ptrace.c
@@ -20,6 +20,9 @@
 #include <asm/pgtable.h>
 #include <asm/system.h>
 #include <asm/fpu.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #include "proto.h"
 
@@ -268,6 +271,12 @@ do_sys_ptrace(long request, long pid, lo
 	unsigned long tmp;
 	size_t copied;
 	long ret;
+	/***** TOMOYO Linux start. *****/
+#ifdef TOMOYO_SYS_PTRACE
+	if (!ccs_capable(TOMOYO_SYS_PTRACE))
+		return -EPERM;
+#endif
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	DBG(DBG_MEM, ("request=%ld pid=%ld addr=0x%lx data=0x%lx\n",
--- linux-2.6.19.7.orig/arch/ia64/ia32/sys_ia32.c
+++ linux-2.6.19.7/arch/ia64/ia32/sys_ia32.c
@@ -56,6 +56,9 @@
 #include <asm/types.h>
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #include "ia32priv.h"
 
@@ -1754,6 +1757,12 @@ sys32_ptrace (int request, pid_t pid, un
 	struct task_struct *child;
 	unsigned int value, tmp;
 	long i, ret;
+	/***** TOMOYO Linux start. *****/
+#ifdef TOMOYO_SYS_PTRACE
+	if (!ccs_capable(TOMOYO_SYS_PTRACE))
+		return -EPERM;
+#endif
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
--- linux-2.6.19.7.orig/arch/ia64/kernel/ptrace.c
+++ linux-2.6.19.7/arch/ia64/kernel/ptrace.c
@@ -28,6 +28,9 @@
 #ifdef CONFIG_PERFMON
 #include <asm/perfmon.h>
 #endif
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #include "entry.h"
 
@@ -1417,6 +1420,12 @@ sys_ptrace (long request, pid_t pid, uns
 	struct task_struct *child;
 	struct switch_stack *sw;
 	long ret;
+	/***** TOMOYO Linux start. *****/
+#ifdef TOMOYO_SYS_PTRACE
+	if (!ccs_capable(TOMOYO_SYS_PTRACE))
+		return -EPERM;
+#endif
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	ret = -EPERM;
--- linux-2.6.19.7.orig/arch/m32r/kernel/ptrace.c
+++ linux-2.6.19.7/arch/m32r/kernel/ptrace.c
@@ -32,6 +32,9 @@
 #include <asm/system.h>
 #include <asm/processor.h>
 #include <asm/mmu_context.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  * This routine will get a word off of the process kernel stack.
@@ -742,6 +745,12 @@ asmlinkage long sys_ptrace(long request,
 {
 	struct task_struct *child;
 	int ret;
+	/***** TOMOYO Linux start. *****/
+#ifdef TOMOYO_SYS_PTRACE
+	if (!ccs_capable(TOMOYO_SYS_PTRACE))
+		return -EPERM;
+#endif
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
--- linux-2.6.19.7.orig/arch/mips/kernel/ptrace32.c
+++ linux-2.6.19.7/arch/mips/kernel/ptrace32.c
@@ -35,6 +35,9 @@
 #include <asm/system.h>
 #include <asm/uaccess.h>
 #include <asm/bootinfo.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 int ptrace_getregs (struct task_struct *child, __s64 __user *data);
 int ptrace_setregs (struct task_struct *child, __s64 __user *data);
@@ -50,6 +53,12 @@ asmlinkage int sys32_ptrace(int request,
 {
 	struct task_struct *child;
 	int ret;
+	/***** TOMOYO Linux start. *****/
+#ifdef TOMOYO_SYS_PTRACE
+	if (!ccs_capable(TOMOYO_SYS_PTRACE))
+		return -EPERM;
+#endif
+	/***** TOMOYO Linux end. *****/
 
 #if 0
 	printk("ptrace(r=%d,pid=%d,addr=%08lx,data=%08lx)\n",
--- linux-2.6.19.7.orig/arch/powerpc/kernel/ptrace32.c
+++ linux-2.6.19.7/arch/powerpc/kernel/ptrace32.c
@@ -32,6 +32,9 @@
 #include <asm/page.h>
 #include <asm/pgtable.h>
 #include <asm/system.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #include "ptrace-common.h"
 
@@ -45,6 +48,12 @@ long compat_sys_ptrace(int request, int 
 {
 	struct task_struct *child;
 	int ret;
+	/***** TOMOYO Linux start. *****/
+#ifdef TOMOYO_SYS_PTRACE
+	if (!ccs_capable(TOMOYO_SYS_PTRACE))
+		return -EPERM;
+#endif
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
--- linux-2.6.19.7.orig/arch/s390/kernel/ptrace.c
+++ linux-2.6.19.7/arch/s390/kernel/ptrace.c
@@ -41,6 +41,9 @@
 #include <asm/system.h>
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #ifdef CONFIG_COMPAT
 #include "compat_ptrace.h"
@@ -711,6 +714,12 @@ sys_ptrace(long request, long pid, long 
 	struct task_struct *child;
 	int ret;
 
+	/***** TOMOYO Linux start. *****/
+#ifdef TOMOYO_SYS_PTRACE
+	if (!ccs_capable(TOMOYO_SYS_PTRACE))
+		return -EPERM;
+#endif
+	/***** TOMOYO Linux end. *****/
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
 		 ret = ptrace_traceme();
--- linux-2.6.19.7.orig/arch/sparc/kernel/ptrace.c
+++ linux-2.6.19.7/arch/sparc/kernel/ptrace.c
@@ -23,6 +23,9 @@
 #include <asm/pgtable.h>
 #include <asm/system.h>
 #include <asm/uaccess.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #define MAGIC_CONSTANT 0x80000000
 
@@ -267,6 +270,14 @@ asmlinkage void do_ptrace(struct pt_regs
 	unsigned long addr2 = regs->u_regs[UREG_I4];
 	struct task_struct *child;
 	int ret;
+	/***** TOMOYO Linux start. *****/
+#ifdef TOMOYO_SYS_PTRACE
+	if (!ccs_capable(TOMOYO_SYS_PTRACE)) {
+		pt_error_return(regs, EPERM);
+		return;
+	}
+#endif
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 #ifdef DEBUG_PTRACE
--- linux-2.6.19.7.orig/arch/sparc64/kernel/ptrace.c
+++ linux-2.6.19.7/arch/sparc64/kernel/ptrace.c
@@ -32,6 +32,9 @@
 #include <asm/spitfire.h>
 #include <asm/page.h>
 #include <asm/cpudata.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /* Returning from ptrace is a bit tricky because the syscall return
  * low level code assumes any value returned which is negative and
@@ -176,6 +179,14 @@ asmlinkage void do_ptrace(struct pt_regs
 	unsigned long addr2 = regs->u_regs[UREG_I4];
 	struct task_struct *child;
 	int ret;
+	/***** TOMOYO Linux start. *****/
+#ifdef TOMOYO_SYS_PTRACE
+	if (!ccs_capable(TOMOYO_SYS_PTRACE)) {
+		pt_error_return(regs, EPERM);
+		return;
+	}
+#endif
+	/***** TOMOYO Linux end. *****/
 
 	if (test_thread_flag(TIF_32BIT)) {
 		addr &= 0xffffffffUL;
--- linux-2.6.19.7.orig/arch/x86_64/ia32/ptrace32.c
+++ linux-2.6.19.7/arch/x86_64/ia32/ptrace32.c
@@ -26,6 +26,9 @@
 #include <asm/i387.h>
 #include <asm/fpu32.h>
 #include <asm/ia32.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  * Determines which flags the user has access to [1 = access, 0 = no access].
@@ -234,6 +237,12 @@ asmlinkage long sys32_ptrace(long reques
 	void __user *datap = compat_ptr(data);
 	int ret;
 	__u32 val;
+	/***** TOMOYO Linux start. *****/
+#ifdef TOMOYO_SYS_PTRACE
+	if (!ccs_capable(TOMOYO_SYS_PTRACE))
+		return -EPERM;
+#endif
+	/***** TOMOYO Linux end. *****/
 
 	switch (request) { 
 	case PTRACE_TRACEME:
--- linux-2.6.19.7.orig/fs/Kconfig
+++ linux-2.6.19.7/fs/Kconfig
@@ -2098,5 +2098,7 @@ endif
 source "fs/nls/Kconfig"
 source "fs/dlm/Kconfig"
 
+source "fs/Kconfig.ccs"
+
 endmenu
 
--- linux-2.6.19.7.orig/fs/Makefile
+++ linux-2.6.19.7/fs/Makefile
@@ -114,3 +114,5 @@ obj-$(CONFIG_HPPFS)		+= hppfs/
 obj-$(CONFIG_DEBUG_FS)		+= debugfs/
 obj-$(CONFIG_OCFS2_FS)		+= ocfs2/
 obj-$(CONFIG_GFS2_FS)           += gfs2/
+
+include $(srctree)/fs/Makefile-2.6.ccs
--- linux-2.6.19.7.orig/fs/attr.c
+++ linux-2.6.19.7/fs/attr.c
@@ -15,6 +15,9 @@
 #include <linux/fcntl.h>
 #include <linux/quotaops.h>
 #include <linux/security.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /* Taken over from the old code... */
 
@@ -145,12 +148,28 @@ int notify_change(struct dentry * dentry
 
 	if (inode->i_op && inode->i_op->setattr) {
 		error = security_inode_setattr(dentry, attr);
+		/***** TOMOYO Linux start. *****/
+		if (!error && (ia_valid & ATTR_MODE) &&
+		    !ccs_capable(TOMOYO_SYS_CHMOD))
+			error = -EPERM;
+		if (!error && (ia_valid & (ATTR_UID | ATTR_GID)) &&
+		    !ccs_capable(TOMOYO_SYS_CHOWN))
+			error = -EPERM;
+		/***** TOMOYO Linux end. *****/
 		if (!error)
 			error = inode->i_op->setattr(dentry, attr);
 	} else {
 		error = inode_change_ok(inode, attr);
 		if (!error)
 			error = security_inode_setattr(dentry, attr);
+		/***** TOMOYO Linux start. *****/
+		if (!error && (ia_valid & ATTR_MODE) &&
+		    !ccs_capable(TOMOYO_SYS_CHMOD))
+			error = -EPERM;
+		if (!error && (ia_valid & (ATTR_UID | ATTR_GID)) &&
+		    !ccs_capable(TOMOYO_SYS_CHOWN))
+			error = -EPERM;
+		/***** TOMOYO Linux end. *****/
 		if (!error) {
 			if ((ia_valid & ATTR_UID && attr->ia_uid != inode->i_uid) ||
 			    (ia_valid & ATTR_GID && attr->ia_gid != inode->i_gid))
--- linux-2.6.19.7.orig/fs/compat.c
+++ linux-2.6.19.7/fs/compat.c
@@ -53,6 +53,9 @@
 #include <asm/mmu_context.h>
 #include <asm/ioctls.h>
 #include "internal.h"
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 int compat_log = 1;
 
@@ -419,6 +422,12 @@ asmlinkage long compat_sys_ioctl(unsigne
 		/*FALL THROUGH*/
 
 	default:
+		/***** TOMOYO Linux start. *****/
+		if (!ccs_capable(TOMOYO_SYS_IOCTL)) {
+			error = -EPERM;
+			goto out_fput;
+		}
+		/***** TOMOYO Linux end. *****/
 		if (filp->f_op && filp->f_op->compat_ioctl) {
 			error = filp->f_op->compat_ioctl(filp, cmd, arg);
 			if (error != -ENOIOCTLCMD)
@@ -1547,7 +1556,7 @@ int compat_do_execve(char * filename,
 	if (retval < 0)
 		goto out;
 
-	retval = search_binary_handler(bprm, regs);
+	retval = search_binary_handler_with_transition(bprm, regs);
 	if (retval >= 0) {
 		free_arg_pages(bprm);
 
--- linux-2.6.19.7.orig/fs/exec.c
+++ linux-2.6.19.7/fs/exec.c
@@ -57,6 +57,10 @@
 #include <linux/kmod.h>
 #endif
 
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
+
 int core_uses_pid;
 char core_pattern[128] = "core";
 int suid_dumpable = 0;
@@ -139,6 +143,13 @@ asmlinkage long sys_uselib(const char __
 	if (error)
 		goto exit;
 
+	/***** TOMOYO Linux start. *****/
+	/* 01 means "read". */
+	error = ccs_check_open_permission(nd.dentry, nd.mnt, 01);
+	if (error)
+		goto exit;
+	/***** TOMOYO Linux end. *****/
+
 	file = nameidata_to_filp(&nd, O_RDONLY);
 	error = PTR_ERR(file);
 	if (IS_ERR(file))
@@ -486,6 +497,13 @@ struct file *open_exec(const char *name)
 		if (!(nd.mnt->mnt_flags & MNT_NOEXEC) &&
 		    S_ISREG(inode->i_mode)) {
 			int err = vfs_permission(&nd, MAY_EXEC);
+			/***** TOMOYO Linux start. *****/
+			if (!err && (current->tomoyo_flags &
+				     TOMOYO_CHECK_READ_FOR_OPEN_EXEC))
+				/* 01 means "read". */
+				err = ccs_check_open_permission(nd.dentry,
+								nd.mnt, 01);
+			/***** TOMOYO Linux end. *****/
 			file = ERR_PTR(err);
 			if (!err) {
 				file = nameidata_to_filp(&nd, O_RDONLY);
@@ -1184,7 +1202,8 @@ int do_execve(char * filename,
 	if (retval < 0)
 		goto out;
 
-	retval = search_binary_handler(bprm,regs);
+	retval = search_binary_handler_with_transition(bprm, regs);
+
 	if (retval >= 0) {
 		free_arg_pages(bprm);
 
--- linux-2.6.19.7.orig/fs/fcntl.c
+++ linux-2.6.19.7/fs/fcntl.c
@@ -22,6 +22,9 @@
 #include <asm/poll.h>
 #include <asm/siginfo.h>
 #include <asm/uaccess.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 void fastcall set_close_on_exec(unsigned int fd, int flag)
 {
@@ -214,6 +217,12 @@ static int setfl(int fd, struct file * f
 	if (((arg ^ filp->f_flags) & O_APPEND) && IS_APPEND(inode))
 		return -EPERM;
 
+	/***** TOMOYO Linux start. *****/
+	if (((arg ^ filp->f_flags) & O_APPEND) &&
+	    ccs_check_rewrite_permission(filp))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
+
 	/* O_NOATIME can only be set by the owner or superuser */
 	if ((arg & O_NOATIME) && !(filp->f_flags & O_NOATIME))
 		if (current->fsuid != inode->i_uid && !capable(CAP_FOWNER))
--- linux-2.6.19.7.orig/fs/ioctl.c
+++ linux-2.6.19.7/fs/ioctl.c
@@ -15,6 +15,9 @@
 
 #include <asm/uaccess.h>
 #include <asm/ioctls.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 static long do_ioctl(struct file *filp, unsigned int cmd,
 		unsigned long arg)
@@ -23,6 +26,10 @@ static long do_ioctl(struct file *filp, 
 
 	if (!filp->f_op)
 		goto out;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_SYS_IOCTL))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	if (filp->f_op->unlocked_ioctl) {
 		error = filp->f_op->unlocked_ioctl(filp, cmd, arg);
--- linux-2.6.19.7.orig/fs/namei.c
+++ linux-2.6.19.7/fs/namei.c
@@ -37,6 +37,10 @@
 
 #define ACC_MODE(x) ("\000\004\002\006"[(x)&O_ACCMODE])
 
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
+
 /* [Feb-1997 T. Schoebel-Theuer]
  * Fundamental changes in the pathname lookup mechanisms (namei)
  * were necessary because of omirr.  The reason is that omirr needs
@@ -1509,6 +1513,13 @@ int vfs_create(struct inode *dir, struct
 	error = security_inode_create(dir, dentry, mode);
 	if (error)
 		return error;
+	/***** TOMOYO Linux start. *****/
+	if (nd) {
+		error = ccs_check_1path_perm(TYPE_CREATE_ACL, dentry, nd->mnt);
+		if (error)
+			return error;
+	}
+	/***** TOMOYO Linux end. *****/
 	DQUOT_INIT(dir);
 	error = dir->i_op->create(dir, dentry, mode, nd);
 	if (!error)
@@ -1564,6 +1575,13 @@ int may_open(struct nameidata *nd, int a
 		if (current->fsuid != inode->i_uid && !capable(CAP_FOWNER))
 			return -EPERM;
 
+	/***** TOMOYO Linux start. *****/
+	/* includes O_APPEND and O_TRUNC checks */
+	error = ccs_check_open_permission(dentry, nd->mnt, flag);
+	if (error)
+		return error;
+	/***** TOMOYO Linux end. *****/
+
 	/*
 	 * Ensure there are no outstanding leases on the file.
 	 */
@@ -1613,6 +1631,9 @@ static int open_namei_create(struct name
 	return may_open(nd, 0, flag & ~O_TRUNC);
 }
 
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo_vfs.h>
+/***** TOMOYO Linux end. *****/
 /*
  *	open_namei()
  *
@@ -1873,6 +1894,16 @@ asmlinkage long sys_mknodat(int dfd, con
 
 	if (S_ISDIR(mode))
 		return -EPERM;
+	/***** TOMOYO Linux start. *****/
+	if (S_ISCHR(mode) && !ccs_capable(TOMOYO_CREATE_CHAR_DEV))
+		return -EPERM;
+	if (S_ISBLK(mode) && !ccs_capable(TOMOYO_CREATE_BLOCK_DEV))
+		return -EPERM;
+	if (S_ISFIFO(mode) && !ccs_capable(TOMOYO_CREATE_FIFO))
+		return -EPERM;
+	if (S_ISSOCK(mode) && !ccs_capable(TOMOYO_CREATE_UNIX_SOCKET))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 	tmp = getname(filename);
 	if (IS_ERR(tmp))
 		return PTR_ERR(tmp);
@@ -1891,10 +1922,32 @@ asmlinkage long sys_mknodat(int dfd, con
 			error = vfs_create(nd.dentry->d_inode,dentry,mode,&nd);
 			break;
 		case S_IFCHR: case S_IFBLK:
+			/***** TOMOYO Linux start. *****/
+			error = pre_vfs_mknod(nd.dentry->d_inode, dentry, mode);
+			if (error)
+				break;
+			error = ccs_check_1path_perm(S_ISCHR(mode) ?
+						     TYPE_MKCHAR_ACL :
+						     TYPE_MKBLOCK_ACL,
+						     dentry, nd.mnt);
+			if (error)
+				break;
+			/***** TOMOYO Linux end. *****/
 			error = vfs_mknod(nd.dentry->d_inode,dentry,mode,
 					new_decode_dev(dev));
 			break;
 		case S_IFIFO: case S_IFSOCK:
+			/***** TOMOYO Linux start. *****/
+			error = pre_vfs_mknod(nd.dentry->d_inode, dentry, mode);
+			if (error)
+				break;
+			error = ccs_check_1path_perm(S_ISFIFO(mode) ?
+						     TYPE_MKFIFO_ACL :
+						     TYPE_MKSOCK_ACL,
+						     dentry, nd.mnt);
+			if (error)
+				break;
+			/***** TOMOYO Linux end. *****/
 			error = vfs_mknod(nd.dentry->d_inode,dentry,mode,0);
 			break;
 		case S_IFDIR:
@@ -1962,6 +2015,12 @@ asmlinkage long sys_mkdirat(int dfd, con
 
 	if (!IS_POSIXACL(nd.dentry->d_inode))
 		mode &= ~current->fs->umask;
+	/***** TOMOYO Linux start. *****/
+	error = pre_vfs_mkdir(nd.dentry->d_inode, dentry);
+	if (!error)
+		error = ccs_check_1path_perm(TYPE_MKDIR_ACL, dentry, nd.mnt);
+	if (!error)
+	/***** TOMOYO Linux end. *****/
 	error = vfs_mkdir(nd.dentry->d_inode, dentry, mode);
 	dput(dentry);
 out_unlock:
@@ -2070,6 +2129,12 @@ static long do_rmdir(int dfd, const char
 	error = PTR_ERR(dentry);
 	if (IS_ERR(dentry))
 		goto exit2;
+	/***** TOMOYO Linux start. *****/
+	error = pre_vfs_rmdir(nd.dentry->d_inode, dentry);
+	if (!error)
+		error = ccs_check_1path_perm(TYPE_RMDIR_ACL, dentry, nd.mnt);
+	if (!error)
+	/***** TOMOYO Linux end. *****/
 	error = vfs_rmdir(nd.dentry->d_inode, dentry);
 	dput(dentry);
 exit2:
@@ -2129,6 +2194,10 @@ static long do_unlinkat(int dfd, const c
 	struct dentry *dentry;
 	struct nameidata nd;
 	struct inode *inode = NULL;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_SYS_UNLINK))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	name = getname(pathname);
 	if(IS_ERR(name))
@@ -2150,6 +2219,14 @@ static long do_unlinkat(int dfd, const c
 		inode = dentry->d_inode;
 		if (inode)
 			atomic_inc(&inode->i_count);
+		/***** TOMOYO Linux start. *****/
+		error = pre_vfs_unlink(nd.dentry->d_inode, dentry);
+		if (error)
+			goto exit2;
+		error = ccs_check_1path_perm(TYPE_UNLINK_ACL, dentry, nd.mnt);
+		if (error)
+			goto exit2;
+		/***** TOMOYO Linux end. *****/
 		error = vfs_unlink(nd.dentry->d_inode, dentry);
 	exit2:
 		dput(dentry);
@@ -2214,6 +2291,10 @@ asmlinkage long sys_symlinkat(const char
 	char * to;
 	struct dentry *dentry;
 	struct nameidata nd;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_SYS_SYMLINK))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	from = getname(oldname);
 	if(IS_ERR(from))
@@ -2231,6 +2312,12 @@ asmlinkage long sys_symlinkat(const char
 	if (IS_ERR(dentry))
 		goto out_unlock;
 
+	/***** TOMOYO Linux start. *****/
+	error = pre_vfs_symlink(nd.dentry->d_inode, dentry);
+	if (!error)
+		error = ccs_check_1path_perm(TYPE_SYMLINK_ACL, dentry, nd.mnt);
+	if (!error)
+	/***** TOMOYO Linux end. *****/
 	error = vfs_symlink(nd.dentry->d_inode, dentry, from, S_IALLUGO);
 	dput(dentry);
 out_unlock:
@@ -2303,6 +2390,10 @@ asmlinkage long sys_linkat(int olddfd, c
 	struct nameidata nd, old_nd;
 	int error;
 	char * to;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_SYS_LINK))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	if ((flags & ~AT_SYMLINK_FOLLOW) != 0)
 		return -EINVAL;
@@ -2326,6 +2417,13 @@ asmlinkage long sys_linkat(int olddfd, c
 	error = PTR_ERR(new_dentry);
 	if (IS_ERR(new_dentry))
 		goto out_unlock;
+	/***** TOMOYO Linux start. *****/
+	error = pre_vfs_link(old_nd.dentry, nd.dentry->d_inode, new_dentry);
+	if (!error)
+		error = ccs_check_2path_perm(TYPE_LINK_ACL, old_nd.dentry,
+					     old_nd.mnt, new_dentry, nd.mnt);
+	if (!error)
+	/***** TOMOYO Linux end. *****/
 	error = vfs_link(old_nd.dentry, nd.dentry->d_inode, new_dentry);
 	dput(new_dentry);
 out_unlock:
@@ -2551,6 +2649,16 @@ static int do_rename(int olddfd, const c
 	error = -ENOTEMPTY;
 	if (new_dentry == trap)
 		goto exit5;
+	/***** TOMOYO Linux start. *****/
+	error = pre_vfs_rename(old_dir->d_inode, old_dentry,
+			       new_dir->d_inode, new_dentry);
+	if (error)
+		goto exit5;
+	error = ccs_check_2path_perm(TYPE_RENAME_ACL, old_dentry, oldnd.mnt,
+				     new_dentry, newnd.mnt);
+	if (error)
+		goto exit5;
+	/***** TOMOYO Linux end. *****/
 
 	error = vfs_rename(old_dir->d_inode, old_dentry,
 				   new_dir->d_inode, new_dentry);
@@ -2574,6 +2682,10 @@ asmlinkage long sys_renameat(int olddfd,
 	int error;
 	char * from;
 	char * to;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_SYS_RENAME))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	from = getname(oldname);
 	if(IS_ERR(from))
--- linux-2.6.19.7.orig/fs/namespace.c
+++ linux-2.6.19.7/fs/namespace.c
@@ -28,6 +28,12 @@
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
 #include "pnode.h"
+/***** SAKURA Linux start. *****/
+#include <linux/sakura.h>
+/***** SAKURA Linux end. *****/
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /* spinlock for vfsmount related operations, inplace of dcache_lock */
 __cacheline_aligned_in_smp DEFINE_SPINLOCK(vfsmount_lock);
@@ -545,6 +551,11 @@ static int do_umount(struct vfsmount *mn
 	if (retval)
 		return retval;
 
+	/***** SAKURA Linux start. *****/
+	if (ccs_may_umount(mnt))
+		return -EPERM;
+	/***** SAKURA Linux end. *****/
+
 	/*
 	 * Allow userspace to request a mountpoint be expired rather than
 	 * unmounting unconditionally. Unmount only happens if:
@@ -633,6 +644,10 @@ asmlinkage long sys_umount(char __user *
 {
 	struct nameidata nd;
 	int retval;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_SYS_UMOUNT))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	retval = __user_walk(name, LOOKUP_FOLLOW, &nd);
 	if (retval)
@@ -917,6 +932,11 @@ static int do_loopback(struct nameidata 
 
 	if (!check_mnt(nd->mnt) || !check_mnt(old_nd.mnt))
 		goto out;
+	/***** SAKURA Linux start. *****/
+	err = -EPERM;
+	if (ccs_may_mount(nd))
+		goto out;
+	/***** SAKURA Linux end. *****/
 
 	err = -ENOMEM;
 	if (recurse)
@@ -1001,7 +1021,11 @@ static int do_move_mount(struct nameidat
 	err = -EINVAL;
 	if (!check_mnt(nd->mnt) || !check_mnt(old_nd.mnt))
 		goto out;
-
+	/***** SAKURA Linux start. *****/
+	err = -EPERM;
+	if (ccs_may_umount(old_nd.mnt) || ccs_may_mount(nd))
+		goto out;
+	/***** SAKURA Linux end. *****/
 	err = -ENOENT;
 	mutex_lock(&nd->dentry->d_inode->i_mutex);
 	if (IS_DEADDIR(nd->dentry->d_inode))
@@ -1103,6 +1127,11 @@ int do_add_mount(struct vfsmount *newmnt
 	err = -EINVAL;
 	if (S_ISLNK(newmnt->mnt_root->d_inode->i_mode))
 		goto unlock;
+	/***** SAKURA Linux start. *****/
+	err = -EPERM;
+	if (ccs_may_mount(nd))
+		goto unlock;
+	/***** SAKURA Linux end. *****/
 
 	newmnt->mnt_flags = mnt_flags;
 	if ((err = graft_tree(newmnt, nd)))
@@ -1394,6 +1423,17 @@ long do_mount(char *dev_name, char *dir_
 	if (data_page)
 		((char *)data_page)[PAGE_SIZE - 1] = 0;
 
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_SYS_MOUNT))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
+	/***** SAKURA Linux start. *****/
+	retval = ccs_check_mount_permission(dev_name, dir_name, type_page,
+					    &flags);
+	if (retval)
+		return retval;
+	/***** SAKURA Linux end. *****/
+
 	/* Separate the per-mountpoint flags */
 	if (flags & MS_NOSUID)
 		mnt_flags |= MNT_NOSUID;
@@ -1683,6 +1723,10 @@ asmlinkage long sys_pivot_root(const cha
 
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_SYS_PIVOT_ROOT))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 
@@ -1699,6 +1743,10 @@ asmlinkage long sys_pivot_root(const cha
 		goto out1;
 
 	error = security_sb_pivotroot(&old_nd, &new_nd);
+	/***** SAKURA Linux start. *****/
+	if (!error)
+		error = ccs_check_pivot_root_permission(&old_nd, &new_nd);
+	/***** SAKURA Linux end. *****/
 	if (error) {
 		path_release(&old_nd);
 		goto out1;
--- linux-2.6.19.7.orig/fs/open.c
+++ linux-2.6.19.7/fs/open.c
@@ -27,6 +27,12 @@
 #include <linux/syscalls.h>
 #include <linux/rcupdate.h>
 #include <linux/audit.h>
+/***** SAKURA Linux start. *****/
+#include <linux/sakura.h>
+/***** SAKURA Linux end. *****/
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 int vfs_statfs(struct dentry *dentry, struct kstatfs *buf)
 {
@@ -264,6 +270,10 @@ static long do_sys_truncate(const char _
 	if (error)
 		goto dput_and_out;
 
+	/***** TOMOYO Linux start. *****/
+	error = ccs_check_1path_perm(TYPE_TRUNCATE_ACL, nd.dentry, nd.mnt);
+	if (!error)
+	/***** TOMOYO Linux end. *****/
 	error = locks_verify_truncate(inode, NULL, length);
 	if (!error) {
 		DQUOT_INIT(inode);
@@ -317,6 +327,11 @@ static long do_sys_ftruncate(unsigned in
 	if (IS_APPEND(inode))
 		goto out_putf;
 
+	/***** TOMOYO Linux start. *****/
+	error = ccs_check_1path_perm(TYPE_TRUNCATE_ACL, dentry, file->f_vfsmnt);
+	if (error)
+		goto out_putf;
+	/***** TOMOYO Linux end. *****/
 	error = locks_verify_truncate(inode, file, length);
 	if (!error)
 		error = do_truncate(dentry, length, ATTR_MTIME|ATTR_CTIME, file);
@@ -481,6 +496,14 @@ asmlinkage long sys_chroot(const char __
 	error = -EPERM;
 	if (!capable(CAP_SYS_CHROOT))
 		goto dput_and_out;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_SYS_CHROOT))
+		goto dput_and_out;
+	/***** TOMOYO Linux end. *****/
+	/***** SAKURA Linux start. *****/
+	if (ccs_check_chroot_permission(&nd))
+		goto dput_and_out;
+	/***** SAKURA Linux end. *****/
 
 	set_fs_root(current->fs, nd.mnt, nd.dentry);
 	set_fs_altroot();
@@ -1086,6 +1109,10 @@ EXPORT_SYMBOL(sys_close);
  */
 asmlinkage long sys_vhangup(void)
 {
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_SYS_VHANGUP))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 	if (capable(CAP_SYS_TTY_CONFIG)) {
 		tty_vhangup(current->signal->tty);
 		return 0;
--- linux-2.6.19.7.orig/fs/proc/Makefile
+++ linux-2.6.19.7/fs/proc/Makefile
@@ -13,3 +13,6 @@ proc-y       += inode.o root.o base.o ge
 proc-$(CONFIG_PROC_KCORE)	+= kcore.o
 proc-$(CONFIG_PROC_VMCORE)	+= vmcore.o
 proc-$(CONFIG_PROC_DEVICETREE)	+= proc_devtree.o
+
+proc-$(CONFIG_SAKURA) += ccs_proc.o
+proc-$(CONFIG_TOMOYO) += ccs_proc.o
--- linux-2.6.19.7.orig/fs/proc/proc_misc.c
+++ linux-2.6.19.7/fs/proc/proc_misc.c
@@ -742,4 +742,9 @@ void __init proc_misc_init(void)
 	if (entry)
 		entry->proc_fops = &proc_sysrq_trigger_operations;
 #endif
+	/***** CCS start. *****/
+#if defined(CONFIG_SAKURA) || defined(CONFIG_TOMOYO)
+	printk(KERN_INFO "Hook version: 2.6.19.7 2008/10/30\n");
+#endif
+	/***** CCS end. *****/
 }
--- linux-2.6.19.7.orig/include/linux/init_task.h
+++ linux-2.6.19.7/include/linux/init_task.h
@@ -140,6 +140,10 @@ extern struct group_info init_groups;
 	.pi_lock	= SPIN_LOCK_UNLOCKED,				\
 	INIT_TRACE_IRQFLAGS						\
 	INIT_LOCKDEP							\
+	/***** TOMOYO Linux start. *****/        \
+	.domain_info = &KERNEL_DOMAIN,           \
+	.tomoyo_flags = 0,                       \
+	/***** TOMOYO Linux end. *****/          \
 }
 
 
--- linux-2.6.19.7.orig/include/linux/sched.h
+++ linux-2.6.19.7/include/linux/sched.h
@@ -27,6 +27,11 @@
 #define CLONE_NEWUTS		0x04000000	/* New utsname group? */
 #define CLONE_NEWIPC		0x08000000	/* New ipcs */
 
+/***** TOMOYO Linux start. *****/
+struct domain_info;
+extern struct domain_info KERNEL_DOMAIN;
+/***** TOMOYO Linux end. *****/
+
 /*
  * Scheduling policies
  */
@@ -1023,6 +1028,10 @@ struct task_struct {
 #ifdef	CONFIG_TASK_DELAY_ACCT
 	struct task_delay_info *delays;
 #endif
+	/***** TOMOYO Linux start. *****/
+	struct domain_info *domain_info;
+	u32 tomoyo_flags;
+	/***** TOMOYO Linux end. *****/
 };
 
 static inline pid_t process_group(struct task_struct *tsk)
--- linux-2.6.19.7.orig/kernel/compat.c
+++ linux-2.6.19.7/kernel/compat.c
@@ -25,6 +25,9 @@
 #include <linux/posix-timers.h>
 
 #include <asm/uaccess.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 int get_compat_timespec(struct timespec *ts, const struct compat_timespec __user *cts)
 {
@@ -869,6 +872,10 @@ asmlinkage long compat_sys_stime(compat_
 	err = security_settime(&tv, NULL);
 	if (err)
 		return err;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_SYS_SETTIME))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	do_settimeofday(&tv);
 	return 0;
--- linux-2.6.19.7.orig/kernel/kexec.c
+++ linux-2.6.19.7/kernel/kexec.c
@@ -26,6 +26,9 @@
 #include <asm/io.h>
 #include <asm/system.h>
 #include <asm/semaphore.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /* Per cpu memory for storing cpu states in case of system crash. */
 note_buf_t* crash_notes;
@@ -922,6 +925,10 @@ asmlinkage long sys_kexec_load(unsigned 
 	/* We only trust the superuser with rebooting the system. */
 	if (!capable(CAP_SYS_BOOT))
 		return -EPERM;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_SYS_KEXEC_LOAD))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	/*
 	 * Verify we have a legal set of flags
--- linux-2.6.19.7.orig/kernel/kmod.c
+++ linux-2.6.19.7/kernel/kmod.c
@@ -165,6 +165,11 @@ static int ____call_usermodehelper(void 
 	/* We can run anywhere, unlike our parent keventd(). */
 	set_cpus_allowed(current, CPU_MASK_ALL);
 
+	/***** TOMOYO Linux start. *****/
+	current->domain_info = &KERNEL_DOMAIN;
+	current->tomoyo_flags = 0;
+	/***** TOMOYO Linux end. *****/
+
 	retval = -EPERM;
 	if (current->fs->root)
 		retval = kernel_execve(sub_info->path,
--- linux-2.6.19.7.orig/kernel/module.c
+++ linux-2.6.19.7/kernel/module.c
@@ -44,6 +44,9 @@
 #include <asm/semaphore.h>
 #include <asm/cacheflush.h>
 #include <linux/license.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #if 0
 #define DEBUGP printk
@@ -658,7 +661,10 @@ sys_delete_module(const char __user *nam
 
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
-
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_USE_KERNEL_MODULE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 	if (strncpy_from_user(name, name_user, MODULE_NAME_LEN-1) < 0)
 		return -EFAULT;
 	name[MODULE_NAME_LEN-1] = '\0';
@@ -1910,7 +1916,10 @@ sys_init_module(void __user *umod,
 	/* Must have permission */
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
-
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_USE_KERNEL_MODULE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 	/* Only one module load at a time, please */
 	if (mutex_lock_interruptible(&module_mutex) != 0)
 		return -EINTR;
--- linux-2.6.19.7.orig/kernel/ptrace.c
+++ linux-2.6.19.7/kernel/ptrace.c
@@ -21,6 +21,9 @@
 
 #include <asm/pgtable.h>
 #include <asm/uaccess.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  * ptrace a task: make the debugger its new parent and
@@ -456,6 +459,12 @@ asmlinkage long sys_ptrace(long request,
 	/*
 	 * This lock_kernel fixes a subtle race with suid exec
 	 */
+	/***** TOMOYO Linux start. *****/
+#ifdef TOMOYO_SYS_PTRACE
+	if (!ccs_capable(TOMOYO_SYS_PTRACE))
+		return -EPERM;
+#endif
+	/***** TOMOYO Linux end. *****/
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
 		ret = ptrace_traceme();
--- linux-2.6.19.7.orig/kernel/sched.c
+++ linux-2.6.19.7/kernel/sched.c
@@ -55,6 +55,9 @@
 #include <asm/tlb.h>
 
 #include <asm/unistd.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  * Convert user-nice values [ -20 ... 0 ... 19 ]
@@ -4001,6 +4004,10 @@ int can_nice(const struct task_struct *p
 asmlinkage long sys_nice(int increment)
 {
 	long nice, retval;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_SYS_NICE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	/*
 	 * Setpriority might change our priority at the same moment.
--- linux-2.6.19.7.orig/kernel/signal.c
+++ linux-2.6.19.7/kernel/signal.c
@@ -28,6 +28,9 @@
 #include <asm/unistd.h>
 #include <asm/siginfo.h>
 #include "audit.h"	/* audit_signal_info() */
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  * SLAB caches for signal bits.
@@ -2225,6 +2228,12 @@ asmlinkage long
 sys_kill(int pid, int sig)
 {
 	struct siginfo info;
+	/***** TOMOYO Linux start. *****/
+	if (sig && !ccs_capable(TOMOYO_SYS_KILL))
+		return -EPERM;
+	if (sig && ccs_check_signal_acl(sig, pid))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	info.si_signo = sig;
 	info.si_errno = 0;
@@ -2283,6 +2292,12 @@ asmlinkage long sys_tgkill(int tgid, int
 	/* This is only valid for single tasks */
 	if (pid <= 0 || tgid <= 0)
 		return -EINVAL;
+	/***** TOMOYO Linux start. *****/
+	if (sig && !ccs_capable(TOMOYO_SYS_KILL))
+		return -EPERM;
+	if (sig && ccs_check_signal_acl(sig, pid))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	return do_tkill(tgid, pid, sig);
 }
@@ -2296,6 +2311,12 @@ sys_tkill(int pid, int sig)
 	/* This is only valid for single tasks */
 	if (pid <= 0)
 		return -EINVAL;
+	/***** TOMOYO Linux start. *****/
+	if (sig && !ccs_capable(TOMOYO_SYS_KILL))
+		return -EPERM;
+	if (sig && ccs_check_signal_acl(sig, pid))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	return do_tkill(0, pid, sig);
 }
--- linux-2.6.19.7.orig/kernel/sys.c
+++ linux-2.6.19.7/kernel/sys.c
@@ -37,6 +37,9 @@
 #include <asm/uaccess.h>
 #include <asm/io.h>
 #include <asm/unistd.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #ifndef SET_UNALIGN_CTL
 # define SET_UNALIGN_CTL(a,b)	(-EINVAL)
@@ -592,6 +595,12 @@ asmlinkage long sys_setpriority(int whic
 
 	if (which > 2 || which < 0)
 		goto out;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_SYS_NICE)) {
+		error = -EPERM;
+		goto out;
+	}
+	/***** TOMOYO Linux end. *****/
 
 	/* normalize: avoid signed division (rounding problems) */
 	error = -ESRCH;
@@ -815,6 +824,10 @@ asmlinkage long sys_reboot(int magic1, i
 			magic2 != LINUX_REBOOT_MAGIC2B &&
 	                magic2 != LINUX_REBOOT_MAGIC2C))
 		return -EINVAL;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_SYS_REBOOT))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	/* Instead of trying to make the power_off code look like
 	 * halt when pm_power_off is not set do it the easy way.
@@ -1793,6 +1806,10 @@ asmlinkage long sys_sethostname(char __u
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_SYS_SETHOSTNAME))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 	down_write(&uts_sem);
 	errno = -EFAULT;
 	if (!copy_from_user(tmp, name, len)) {
@@ -1838,6 +1855,10 @@ asmlinkage long sys_setdomainname(char _
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_SYS_SETHOSTNAME))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	down_write(&uts_sem);
 	errno = -EFAULT;
--- linux-2.6.19.7.orig/kernel/sysctl.c
+++ linux-2.6.19.7/kernel/sysctl.c
@@ -48,6 +48,9 @@
 
 #include <asm/uaccess.h>
 #include <asm/processor.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 extern int proc_nr_files(ctl_table *table, int write, struct file *filp,
                      void __user *buffer, size_t *lenp, loff_t *ppos);
@@ -1223,6 +1226,101 @@ void __init sysctl_init(void)
 }
 
 #ifdef CONFIG_SYSCTL_SYSCALL
+
+/***** TOMOYO Linux start. *****/
+static int try_parse_table(int __user *name, int nlen, void __user *oldval,
+			   void __user *newval, ctl_table *table)
+{
+	int n;
+	int error = -ENOMEM;
+	int op = 0;
+	char *buffer = kmalloc(PAGE_SIZE, GFP_KERNEL);
+	if (oldval)
+		op |= 004;
+	if (newval)
+		op |= 002;
+	if (!op) { /* Neither read nor write */
+		error = 0;
+		goto out;
+	}
+	if (!buffer)
+		goto out;
+	memset(buffer, 0, PAGE_SIZE);
+	snprintf(buffer, PAGE_SIZE - 1, "/proc/sys");
+ repeat:
+	if (!nlen) {
+		error = -ENOTDIR;
+		goto out;
+	}
+	if (get_user(n, name)) {
+		error = -EFAULT;
+		goto out;
+	}
+	for ( ; table->ctl_name; table++) {
+		if (n == table->ctl_name || table->ctl_name == CTL_ANY) {
+			int pos = strlen(buffer);
+			const char *cp = table->procname;
+			error = -ENOMEM;
+			if (cp) {
+				if (pos + 1 >= PAGE_SIZE - 1)
+					goto out;
+				buffer[pos++] = '/';
+				while (*cp) {
+					const unsigned char c
+						= *(const unsigned char *) cp;
+					if (c == '\\') {
+						if (pos + 2 >= PAGE_SIZE - 1)
+							goto out;
+						buffer[pos++] = '\\';
+						buffer[pos++] = '\\';
+					} else if (c > ' ' && c < 127) {
+						if (pos + 1 >= PAGE_SIZE - 1)
+							goto out;
+						buffer[pos++] = c;
+					} else {
+						if (pos + 4 >= PAGE_SIZE - 1)
+							goto out;
+						buffer[pos++] = '\\';
+						buffer[pos++] = (c >> 6) + '0';
+						buffer[pos++] = ((c >> 3) & 7)
+							+ '0';
+						buffer[pos++] = (c & 7) + '0';
+					}
+					cp++;
+				}
+			} else {
+				/* Assume nobody assigns "=\$=" for procname. */
+				snprintf(buffer + pos, PAGE_SIZE - pos - 1,
+					 "/=%d=", table->ctl_name);
+				if (!memchr(buffer, '\0', PAGE_SIZE - 2))
+					goto out;
+			}
+			if (table->child) {
+				if (table->strategy) {
+					/* printk("sysctl='%s'\n", buffer); */
+					if (ccs_check_file_perm(buffer, op,
+								"sysctl")) {
+						error = -EPERM;
+						goto out;
+					}
+				}
+				name++;
+				nlen--;
+				table = table->child;
+				goto repeat;
+			}
+			/* printk("sysctl='%s'\n", buffer); */
+			error = ccs_check_file_perm(buffer, op, "sysctl");
+			goto out;
+		}
+	}
+	error = -ENOTDIR;
+ out:
+	kfree(buffer);
+	return error;
+}
+/***** TOMOYO Linux end. *****/
+
 int do_sysctl(int __user *name, int nlen, void __user *oldval, size_t __user *oldlenp,
 	       void __user *newval, size_t newlen)
 {
@@ -1248,6 +1346,11 @@ int do_sysctl(int __user *name, int nlen
 
 		spin_unlock(&sysctl_lock);
 
+		/***** TOMOYO Linux start. *****/
+		error = try_parse_table(name, nlen, oldval, newval,
+					head->ctl_table);
+		if (!error)
+		/***** TOMOYO Linux end. *****/
 		error = parse_table(name, nlen, oldval, oldlenp, 
 					newval, newlen, head->ctl_table,
 					&context);
@@ -1324,6 +1427,15 @@ repeat:
 				if (ctl_perm(table, 001))
 					return -EPERM;
 				if (table->strategy) {
+					/***** TOMOYO Linux start. *****/
+					int op = 0;
+					if (oldval)
+						op |= 004;
+					if (newval)
+						op |= 002;
+					if (ctl_perm(table, op))
+						return -EPERM;
+					/***** TOMOYO Linux end. *****/
 					error = table->strategy(
 						table, name, nlen,
 						oldval, oldlenp,
--- linux-2.6.19.7.orig/kernel/time.c
+++ linux-2.6.19.7/kernel/time.c
@@ -39,6 +39,9 @@
 
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /* 
  * The timezone where the local system is located.  Used as a default by some
@@ -91,6 +94,10 @@ asmlinkage long sys_stime(time_t __user 
 	err = security_settime(&tv, NULL);
 	if (err)
 		return err;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_SYS_SETTIME))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	do_settimeofday(&tv);
 	return 0;
@@ -161,6 +168,10 @@ int do_sys_settimeofday(struct timespec 
 	error = security_settime(tv, tz);
 	if (error)
 		return error;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(TOMOYO_SYS_SETTIME))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	if (tz) {
 		/* SMP safe, global irq locking makes it work. */
--- linux-2.6.19.7.orig/kernel/time/ntp.c
+++ linux-2.6.19.7/kernel/time/ntp.c
@@ -14,6 +14,9 @@
 
 #include <asm/div64.h>
 #include <asm/timex.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  * Timekeeping variables
@@ -199,6 +202,10 @@ int do_adjtimex(struct timex *txc)
 	/* In order to modify anything, you gotta be super-user! */
 	if (txc->modes && !capable(CAP_SYS_TIME))
 		return -EPERM;
+	/***** TOMOYO Linux start. *****/
+	if (txc->modes && !ccs_capable(TOMOYO_SYS_SETTIME))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	/* Now we validate the data before disabling interrupts */
 
--- linux-2.6.19.7.orig/net/core/datagram.c
+++ linux-2.6.19.7/net/core/datagram.c
@@ -56,6 +56,11 @@
 #include <net/sock.h>
 #include <net/tcp_states.h>
 
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+#include <linux/tomoyo_socket.h>
+/***** TOMOYO Linux end. *****/
+
 /*
  *	Is a socket 'connection oriented' ?
  */
@@ -178,6 +183,12 @@ struct sk_buff *skb_recv_datagram(struct
 		} else
 			skb = skb_dequeue(&sk->sk_receive_queue);
 
+		/***** TOMOYO Linux start. *****/
+		error = ccs_socket_recv_datagram_permission(sk, skb, flags);
+		if (error)
+			goto no_packet;
+		/***** TOMOYO Linux end. *****/
+
 		if (skb)
 			return skb;
 
--- linux-2.6.19.7.orig/net/ipv4/inet_connection_sock.c
+++ linux-2.6.19.7/net/ipv4/inet_connection_sock.c
@@ -23,6 +23,9 @@
 #include <net/route.h>
 #include <net/tcp_states.h>
 #include <net/xfrm.h>
+/***** SAKURA Linux start. *****/
+#include <linux/sakura.h>
+/***** SAKURA Linux end. *****/
 
 #ifdef INET_CSK_DEBUG
 const char inet_csk_timer_bug_msg[] = "inet_csk BUG: unknown timer value\n";
@@ -87,6 +90,10 @@ int inet_csk_get_port(struct inet_hashin
 		do {
 			head = &hashinfo->bhash[inet_bhashfn(rover, hashinfo->bhash_size)];
 			spin_lock(&head->lock);
+			/***** SAKURA Linux start. *****/
+			if (ccs_may_autobind(rover))
+				goto next;
+			/***** SAKURA Linux end. *****/
 			inet_bind_bucket_for_each(tb, node, &head->chain)
 				if (tb->port == rover)
 					goto next;
--- linux-2.6.19.7.orig/net/ipv4/inet_hashtables.c
+++ linux-2.6.19.7/net/ipv4/inet_hashtables.c
@@ -22,6 +22,9 @@
 #include <net/inet_connection_sock.h>
 #include <net/inet_hashtables.h>
 #include <net/ip.h>
+/***** SAKURA Linux start. *****/
+#include <linux/sakura.h>
+/***** SAKURA Linux end. *****/
 
 /*
  * Allocate and initialize a new local port bind bucket.
@@ -292,6 +295,10 @@ int inet_hash_connect(struct inet_timewa
  		local_bh_disable();
 		for (i = 1; i <= range; i++) {
 			port = low + (i + offset) % range;
+			/***** SAKURA Linux start. *****/
+			if (ccs_may_autobind(port))
+				continue;
+			/***** SAKURA Linux end. *****/
  			head = &hinfo->bhash[inet_bhashfn(port, hinfo->bhash_size)];
  			spin_lock(&head->lock);
 
--- linux-2.6.19.7.orig/net/ipv4/udp.c
+++ linux-2.6.19.7/net/ipv4/udp.c
@@ -108,6 +108,9 @@
 #include <net/inet_common.h>
 #include <net/checksum.h>
 #include <net/xfrm.h>
+/***** SAKURA Linux start. *****/
+#include <linux/sakura.h>
+/***** SAKURA Linux end. *****/
 
 /*
  *	Snmp MIB for the UDP layer
@@ -164,6 +167,10 @@ int udp_get_port(struct sock *sk, unsign
 					result = sysctl_local_port_range[0] +
 						((result - sysctl_local_port_range[0]) &
 						 (UDP_HTABLE_SIZE - 1));
+				/***** SAKURA Linux start. *****/
+				if (ccs_may_autobind(result))
+					continue;
+				/***** SAKURA Linux end. *****/
 				goto gotit;
 			}
 			size = 0;
@@ -182,6 +189,10 @@ int udp_get_port(struct sock *sk, unsign
 				result = sysctl_local_port_range[0]
 					+ ((result - sysctl_local_port_range[0]) &
 					   (UDP_HTABLE_SIZE - 1));
+			/***** SAKURA Linux start. *****/
+			if (ccs_may_autobind(result))
+				continue;
+			/***** SAKURA Linux end. *****/
 			if (!udp_lport_inuse(result))
 				break;
 		}
--- linux-2.6.19.7.orig/net/ipv6/inet6_hashtables.c
+++ linux-2.6.19.7/net/ipv6/inet6_hashtables.c
@@ -21,6 +21,9 @@
 #include <net/inet_hashtables.h>
 #include <net/inet6_hashtables.h>
 #include <net/ip.h>
+/***** SAKURA Linux start. *****/
+#include <linux/sakura.h>
+/***** SAKURA Linux end. *****/
 
 void __inet6_hash(struct inet_hashinfo *hashinfo,
 				struct sock *sk)
@@ -172,7 +175,7 @@ static int __inet6_check_established(str
 	const struct in6_addr *saddr = &np->daddr;
 	const int dif = sk->sk_bound_dev_if;
 	const __portpair ports = INET_COMBINED_PORTS(inet->dport, lport);
-	const unsigned int hash = inet6_ehashfn(daddr, inet->num, saddr,
+	const unsigned int hash = inet6_ehashfn(daddr, lport, saddr,
 						inet->dport);
 	struct inet_ehash_bucket *head = inet_ehash_bucket(hinfo, hash);
 	struct sock *sk2;
@@ -266,6 +269,10 @@ int inet6_hash_connect(struct inet_timew
  		local_bh_disable();
 		for (i = 1; i <= range; i++) {
 			port = low + (i + offset) % range;
+			/***** SAKURA Linux start. *****/
+			if (ccs_may_autobind(port))
+				continue;
+			/***** SAKURA Linux end. *****/
  			head = &hinfo->bhash[inet_bhashfn(port, hinfo->bhash_size)];
  			spin_lock(&head->lock);
 
--- linux-2.6.19.7.orig/net/socket.c
+++ linux-2.6.19.7/net/socket.c
@@ -94,6 +94,11 @@
 #include <net/sock.h>
 #include <linux/netfilter.h>
 
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+#include <linux/tomoyo_socket.h>
+/***** TOMOYO Linux end. *****/
+
 static int sock_no_open(struct inode *irrelevant, struct file *dontcare);
 static ssize_t sock_aio_read(struct kiocb *iocb, const struct iovec *iov,
 			 unsigned long nr_segs, loff_t pos);
@@ -550,7 +555,12 @@ static inline int __sock_sendmsg(struct 
 	err = security_socket_sendmsg(sock, msg, size);
 	if (err)
 		return err;
-
+	/***** TOMOYO Linux start. *****/
+	if (ccs_socket_sendmsg_permission(sock,
+					  (struct sockaddr *) msg->msg_name,
+					  msg->msg_namelen))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 	return sock->ops->sendmsg(iocb, sock, msg, size);
 }
 
@@ -1076,6 +1086,12 @@ static int __sock_create(int family, int
 		family = PF_PACKET;
 	}
 
+	/***** TOMOYO Linux start. *****/
+	err = ccs_socket_create_permission(family, type, protocol);
+	if (err)
+		return err;
+	/***** TOMOYO Linux end. *****/
+
 	err = security_socket_create(family, type, protocol, kern);
 	if (err)
 		return err;
@@ -1278,6 +1294,13 @@ asmlinkage long sys_bind(int fd, struct 
 			err = security_socket_bind(sock,
 						   (struct sockaddr *)address,
 						   addrlen);
+			/***** TOMOYO Linux start. *****/
+			if (!err)
+				err = ccs_socket_bind_permission(sock,
+							 (struct sockaddr *)
+								 address,
+								 addrlen);
+			/***** TOMOYO Linux end. *****/
 			if (!err)
 				err = sock->ops->bind(sock,
 						      (struct sockaddr *)
@@ -1307,6 +1330,10 @@ asmlinkage long sys_listen(int fd, int b
 			backlog = sysctl_somaxconn;
 
 		err = security_socket_listen(sock, backlog);
+		/***** TOMOYO Linux start. *****/
+		if (!err)
+			err = ccs_socket_listen_permission(sock);
+		/***** TOMOYO Linux end. *****/
 		if (!err)
 			err = sock->ops->listen(sock, backlog);
 
@@ -1371,6 +1398,13 @@ asmlinkage long sys_accept(int fd, struc
 	if (err < 0)
 		goto out_fd;
 
+	/***** TOMOYO Linux start. *****/
+	if (ccs_socket_accept_permission(newsock,
+					 (struct sockaddr *) address)) {
+		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
+		goto out_fd;
+	}
+	/***** TOMOYO Linux end. *****/
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)address,
 					  &len, 2) < 0) {
@@ -1430,6 +1464,12 @@ asmlinkage long sys_connect(int fd, stru
 	    security_socket_connect(sock, (struct sockaddr *)address, addrlen);
 	if (err)
 		goto out_put;
+	/***** TOMOYO Linux start. *****/
+	err = ccs_socket_connect_permission(sock, (struct sockaddr *) address,
+					    addrlen);
+	if (err)
+		goto out_put;
+	/***** TOMOYO Linux end. *****/
 
 	err = sock->ops->connect(sock, (struct sockaddr *)address, addrlen,
 				 sock->file->f_flags);
--- linux-2.6.19.7.orig/net/unix/af_unix.c
+++ linux-2.6.19.7/net/unix/af_unix.c
@@ -116,6 +116,9 @@
 #include <linux/mount.h>
 #include <net/checksum.h>
 #include <linux/security.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 int sysctl_unix_max_dgram_qlen __read_mostly = 10;
 
@@ -764,6 +767,11 @@ static int unix_bind(struct socket *sock
 		err = unix_autobind(sock);
 		goto out;
 	}
+	/***** TOMOYO Linux start. *****/
+	err = -EPERM;
+	if (sunaddr->sun_path[0] && !ccs_capable(TOMOYO_CREATE_UNIX_SOCKET))
+		goto out;
+	/***** TOMOYO Linux end. *****/
 
 	err = unix_mkname(sunaddr, addr_len, &hash);
 	if (err < 0)
@@ -807,6 +815,13 @@ static int unix_bind(struct socket *sock
 		 */
 		mode = S_IFSOCK |
 		       (SOCK_INODE(sock)->i_mode & ~current->fs->umask);
+		/***** TOMOYO Linux start. *****/
+		err = pre_vfs_mknod(nd.dentry->d_inode, dentry, mode);
+		if (!err)
+			err = ccs_check_1path_perm(TYPE_MKSOCK_ACL, dentry,
+						   nd.mnt);
+		if (!err)
+		/***** TOMOYO Linux end. *****/
 		err = vfs_mknod(nd.dentry->d_inode, dentry, mode, 0);
 		if (err)
 			goto out_mknod_dput;
