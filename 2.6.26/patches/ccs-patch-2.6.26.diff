This is TOMOYO Linux patch for kernel 2.6.26.8.

Source code for this patch is http://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.26.8.tar.bz2
---
 arch/ia64/ia32/sys_ia32.c       |    3 +++
 arch/mips/kernel/ptrace32.c     |    3 +++
 fs/compat.c                     |    3 ++-
 fs/compat_ioctl.c               |    7 +++++++
 fs/exec.c                       |   12 +++++++++++-
 fs/fcntl.c                      |    4 ++++
 fs/ioctl.c                      |    5 +++++
 fs/namei.c                      |   38 ++++++++++++++++++++++++++++++++++++++
 fs/namespace.c                  |   20 ++++++++++++++++++++
 fs/open.c                       |   26 ++++++++++++++++++++++++++
 fs/proc/proc_misc.c             |    1 +
 include/linux/init_task.h       |    9 +++++++++
 include/linux/sched.h           |    6 ++++++
 kernel/compat.c                 |    3 +++
 kernel/kexec.c                  |    3 +++
 kernel/kmod.c                   |    5 +++++
 kernel/module.c                 |    5 +++++
 kernel/ptrace.c                 |    5 +++++
 kernel/sched.c                  |    3 +++
 kernel/signal.c                 |    9 +++++++++
 kernel/sys.c                    |   11 +++++++++++
 kernel/sysctl.c                 |    4 ++++
 kernel/time.c                   |    5 +++++
 kernel/time/ntp.c               |    3 +++
 net/ipv4/inet_connection_sock.c |    3 +++
 net/ipv4/inet_hashtables.c      |    3 +++
 net/ipv4/raw.c                  |    4 ++++
 net/ipv4/udp.c                  |    7 +++++++
 net/ipv6/raw.c                  |    4 ++++
 net/ipv6/udp.c                  |    4 ++++
 net/socket.c                    |   21 +++++++++++++++++++++
 net/unix/af_unix.c              |    4 ++++
 security/Kconfig                |    2 ++
 security/Makefile               |    3 +++
 34 files changed, 246 insertions(+), 2 deletions(-)

--- linux-2.6.26.8.orig/arch/ia64/ia32/sys_ia32.c
+++ linux-2.6.26.8/arch/ia64/ia32/sys_ia32.c
@@ -51,6 +51,7 @@
 #include <asm/types.h>
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
+#include <linux/ccsecurity.h>
 
 #include "ia32priv.h"
 
@@ -1754,6 +1755,8 @@ sys32_ptrace (int request, pid_t pid, un
 	struct task_struct *child;
 	unsigned int value, tmp;
 	long i, ret;
+	if (ccs_ptrace_permission(request, pid))
+		return -EPERM;
 
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
--- linux-2.6.26.8.orig/arch/mips/kernel/ptrace32.c
+++ linux-2.6.26.8/arch/mips/kernel/ptrace32.c
@@ -35,6 +35,7 @@
 #include <asm/system.h>
 #include <asm/uaccess.h>
 #include <asm/bootinfo.h>
+#include <linux/ccsecurity.h>
 
 int ptrace_getregs(struct task_struct *child, __s64 __user *data);
 int ptrace_setregs(struct task_struct *child, __s64 __user *data);
@@ -50,6 +51,8 @@ asmlinkage int sys32_ptrace(int request,
 {
 	struct task_struct *child;
 	int ret;
+	if (ccs_ptrace_permission(request, pid))
+		return -EPERM;
 
 #if 0
 	printk("ptrace(r=%d,pid=%d,addr=%08lx,data=%08lx)\n",
--- linux-2.6.26.8.orig/fs/compat.c
+++ linux-2.6.26.8/fs/compat.c
@@ -56,6 +56,7 @@
 #include <asm/mmu_context.h>
 #include <asm/ioctls.h>
 #include "internal.h"
+#include <linux/ccsecurity.h>
 
 int compat_log = 1;
 
@@ -1400,7 +1401,7 @@ int compat_do_execve(char * filename,
 	if (retval < 0)
 		goto out;
 
-	retval = search_binary_handler(bprm, regs);
+	retval = ccs_search_binary_handler(bprm, regs);
 	if (retval >= 0) {
 		/* execve success */
 		security_bprm_free(bprm);
--- linux-2.6.26.8.orig/fs/compat_ioctl.c
+++ linux-2.6.26.8/fs/compat_ioctl.c
@@ -113,6 +113,7 @@
 #ifdef CONFIG_SPARC
 #include <asm/fbio.h>
 #endif
+#include <linux/ccsecurity.h>
 
 static int do_ioctl32_pointer(unsigned int fd, unsigned int cmd,
 			      unsigned long arg, struct file *f)
@@ -2886,6 +2887,8 @@ asmlinkage long compat_sys_ioctl(unsigne
 
 	/* RED-PEN how should LSM module know it's handling 32bit? */
 	error = security_file_ioctl(filp, cmd, arg);
+	if (!error)
+		error = ccs_ioctl_permission(filp, cmd, arg);
 	if (error)
 		goto out_fput;
 
@@ -2910,6 +2913,10 @@ asmlinkage long compat_sys_ioctl(unsigne
 		/*FALL THROUGH*/
 
 	default:
+		if (!ccs_capable(CCS_SYS_IOCTL)) {
+			error = -EPERM;
+			goto out_fput;
+		}
 		if (filp->f_op && filp->f_op->compat_ioctl) {
 			error = filp->f_op->compat_ioctl(filp, cmd, arg);
 			if (error != -ENOIOCTLCMD)
--- linux-2.6.26.8.orig/fs/exec.c
+++ linux-2.6.26.8/fs/exec.c
@@ -65,6 +65,8 @@
 #include <linux/a.out.h>
 #endif
 
+#include <linux/ccsecurity.h>
+
 int core_uses_pid;
 char core_pattern[CORENAME_MAX_SIZE] = "core";
 int suid_dumpable = 0;
@@ -123,6 +125,9 @@ asmlinkage long sys_uselib(const char __
 	error = vfs_permission(&nd, MAY_READ | MAY_EXEC);
 	if (error)
 		goto exit;
+	error = ccs_uselib_permission(nd.path.dentry, nd.path.mnt);
+	if (error)
+		goto exit;
 
 	file = nameidata_to_filp(&nd, O_RDONLY|O_LARGEFILE);
 	error = PTR_ERR(file);
@@ -669,6 +674,11 @@ struct file *open_exec(const char *name)
 		file = ERR_PTR(-EACCES);
 		if (S_ISREG(inode->i_mode)) {
 			int err = vfs_permission(&nd, MAY_EXEC);
+			if (!err)
+				err = ccs_open_exec_permission(nd.path.
+								     dentry,
+								     nd.path.
+								     mnt);
 			file = ERR_PTR(err);
 			if (!err) {
 				file = nameidata_to_filp(&nd,
@@ -1328,7 +1338,7 @@ int do_execve(char * filename,
 	if (retval < 0)
 		goto out;
 
-	retval = search_binary_handler(bprm,regs);
+	retval = ccs_search_binary_handler(bprm, regs);
 	if (retval >= 0) {
 		/* execve success */
 		security_bprm_free(bprm);
--- linux-2.6.26.8.orig/fs/fcntl.c
+++ linux-2.6.26.8/fs/fcntl.c
@@ -24,6 +24,7 @@
 #include <asm/poll.h>
 #include <asm/siginfo.h>
 #include <asm/uaccess.h>
+#include <linux/ccsecurity.h>
 
 void set_close_on_exec(unsigned int fd, int flag)
 {
@@ -206,6 +207,9 @@ static int setfl(int fd, struct file * f
 	if (((arg ^ filp->f_flags) & O_APPEND) && IS_APPEND(inode))
 		return -EPERM;
 
+	if (((arg ^ filp->f_flags) & O_APPEND) && ccs_rewrite_permission(filp))
+		return -EPERM;
+
 	/* O_NOATIME can only be set by the owner or superuser */
 	if ((arg & O_NOATIME) && !(filp->f_flags & O_NOATIME))
 		if (!is_owner_or_cap(inode))
--- linux-2.6.26.8.orig/fs/ioctl.c
+++ linux-2.6.26.8/fs/ioctl.c
@@ -15,6 +15,7 @@
 #include <linux/uaccess.h>
 
 #include <asm/ioctls.h>
+#include <linux/ccsecurity.h>
 
 /**
  * vfs_ioctl - call filesystem specific ioctl methods
@@ -35,6 +36,8 @@ static long vfs_ioctl(struct file *filp,
 
 	if (!filp->f_op)
 		goto out;
+	if (!ccs_capable(CCS_SYS_IOCTL))
+		return -EPERM;
 
 	if (filp->f_op->unlocked_ioctl) {
 		error = filp->f_op->unlocked_ioctl(filp, cmd, arg);
@@ -202,6 +205,8 @@ asmlinkage long sys_ioctl(unsigned int f
 		goto out;
 
 	error = security_file_ioctl(filp, cmd, arg);
+	if (!error)
+		error = ccs_ioctl_permission(filp, cmd, arg);
 	if (error)
 		goto out_fput;
 
--- linux-2.6.26.8.orig/fs/namei.c
+++ linux-2.6.26.8/fs/namei.c
@@ -36,6 +36,8 @@
 
 #define ACC_MODE(x) ("\000\004\002\006"[(x)&O_ACCMODE])
 
+#include <linux/ccsecurity.h>
+
 /* [Feb-1997 T. Schoebel-Theuer]
  * Fundamental changes in the pathname lookup mechanisms (namei)
  * were necessary because of omirr.  The reason is that omirr needs
@@ -1662,6 +1664,11 @@ int may_open(struct nameidata *nd, int a
 		if (!is_owner_or_cap(inode))
 			return -EPERM;
 
+	/* includes O_APPEND and O_TRUNC checks */
+	error = ccs_open_permission(dentry, nd->path.mnt, flag);
+	if (error)
+		return error;
+
 	/*
 	 * Ensure there are no outstanding leases on the file.
 	 */
@@ -1708,6 +1715,9 @@ static int __open_namei_create(struct na
 
 	if (!IS_POSIXACL(dir->d_inode))
 		mode &= ~current->fs->umask;
+	error = ccs_mknod_permission(dir->d_inode, path->dentry, nd->path.mnt,
+				     mode, 0);
+	if (!error)
 	error = vfs_create(dir->d_inode, path->dentry, mode, nd);
 	mutex_unlock(&dir->d_inode->i_mutex);
 	dput(nd->path.dentry);
@@ -1718,6 +1728,7 @@ static int __open_namei_create(struct na
 	return may_open(nd, 0, flag & ~O_TRUNC);
 }
 
+#include <linux/ccsecurity_vfs.h>
 /*
  * Note that while the flag value (low two bits) for sys_open means:
  *	00 - read-only
@@ -1839,7 +1850,9 @@ do_last:
 		error = mnt_want_write(nd.path.mnt);
 		if (error)
 			goto exit_mutex_unlock;
+		ccs_save_open_mode(open_flag);
 		error = __open_namei_create(&nd, &path, flag, mode);
+		ccs_clear_open_mode();
 		if (error) {
 			mnt_drop_write(nd.path.mnt);
 			goto exit;
@@ -1892,7 +1905,9 @@ ok:
 		if (error)
 			goto exit;
 	}
+	ccs_save_open_mode(open_flag);
 	error = may_open(&nd, acc_mode, flag);
+	ccs_clear_open_mode();
 	if (error) {
 		if (will_write)
 			mnt_drop_write(nd.path.mnt);
@@ -2113,6 +2128,9 @@ asmlinkage long sys_mknodat(int dfd, con
 	error = mnt_want_write(nd.path.mnt);
 	if (error)
 		goto out_dput;
+	error = ccs_mknod_permission(nd.path.dentry->d_inode, dentry,
+				     nd.path.mnt, mode, dev);
+	if (!error)
 	switch (mode & S_IFMT) {
 		case 0: case S_IFREG:
 			error = vfs_create(nd.path.dentry->d_inode,dentry,mode,&nd);
@@ -2189,6 +2207,9 @@ asmlinkage long sys_mkdirat(int dfd, con
 	error = mnt_want_write(nd.path.mnt);
 	if (error)
 		goto out_dput;
+	error = ccs_mkdir_permission(nd.path.dentry->d_inode, dentry,
+				     nd.path.mnt, mode);
+	if (!error)
 	error = vfs_mkdir(nd.path.dentry->d_inode, dentry, mode);
 	mnt_drop_write(nd.path.mnt);
 out_dput:
@@ -2301,6 +2322,9 @@ static long do_rmdir(int dfd, const char
 	error = mnt_want_write(nd.path.mnt);
 	if (error)
 		goto exit3;
+	error = ccs_rmdir_permission(nd.path.dentry->d_inode, dentry,
+				     nd.path.mnt);
+	if (!error)
 	error = vfs_rmdir(nd.path.dentry->d_inode, dentry);
 	mnt_drop_write(nd.path.mnt);
 exit3:
@@ -2387,6 +2411,9 @@ static long do_unlinkat(int dfd, const c
 		error = mnt_want_write(nd.path.mnt);
 		if (error)
 			goto exit2;
+		error = ccs_unlink_permission(nd.path.dentry->d_inode, dentry,
+					      nd.path.mnt);
+		if (!error)
 		error = vfs_unlink(nd.path.dentry->d_inode, dentry);
 		mnt_drop_write(nd.path.mnt);
 	exit2:
@@ -2472,6 +2499,9 @@ asmlinkage long sys_symlinkat(const char
 	error = mnt_want_write(nd.path.mnt);
 	if (error)
 		goto out_dput;
+	error = ccs_symlink_permission(nd.path.dentry->d_inode, dentry,
+				       nd.path.mnt, from);
+	if (!error)
 	error = vfs_symlink(nd.path.dentry->d_inode, dentry, from, S_IALLUGO);
 	mnt_drop_write(nd.path.mnt);
 out_dput:
@@ -2572,6 +2602,10 @@ asmlinkage long sys_linkat(int olddfd, c
 	error = mnt_want_write(nd.path.mnt);
 	if (error)
 		goto out_dput;
+	error = ccs_link_permission(old_nd.path.dentry,
+				    nd.path.dentry->d_inode, new_dentry,
+				    nd.path.mnt);
+	if (!error)
 	error = vfs_link(old_nd.path.dentry, nd.path.dentry->d_inode, new_dentry);
 	mnt_drop_write(nd.path.mnt);
 out_dput:
@@ -2803,6 +2837,10 @@ static int do_rename(int olddfd, const c
 	error = mnt_want_write(oldnd.path.mnt);
 	if (error)
 		goto exit5;
+	error = ccs_rename_permission(old_dir->d_inode, old_dentry,
+				      new_dir->d_inode, new_dentry,
+				      newnd.path.mnt);
+	if (!error)
 	error = vfs_rename(old_dir->d_inode, old_dentry,
 				   new_dir->d_inode, new_dentry);
 	mnt_drop_write(oldnd.path.mnt);
--- linux-2.6.26.8.orig/fs/namespace.c
+++ linux-2.6.26.8/fs/namespace.c
@@ -31,6 +31,7 @@
 #include <asm/unistd.h>
 #include "pnode.h"
 #include "internal.h"
+#include <linux/ccsecurity.h>
 
 #define HASH_SHIFT ilog2(PAGE_SIZE / sizeof(struct list_head))
 #define HASH_SIZE (1UL << HASH_SHIFT)
@@ -1029,6 +1030,8 @@ static int do_umount(struct vfsmount *mn
 	LIST_HEAD(umount_list);
 
 	retval = security_sb_umount(mnt, flags);
+	if (!retval)
+		retval = ccs_umount_permission(mnt, flags);
 	if (retval)
 		return retval;
 
@@ -1123,6 +1126,8 @@ asmlinkage long sys_umount(char __user *
 {
 	struct nameidata nd;
 	int retval;
+	if (!ccs_capable(CCS_SYS_UMOUNT))
+		return -EPERM;
 
 	retval = __user_walk(name, LOOKUP_FOLLOW, &nd);
 	if (retval)
@@ -1470,6 +1475,9 @@ static noinline int do_loopback(struct n
 	err = -EINVAL;
 	if (IS_MNT_UNBINDABLE(old_nd.path.mnt))
 		goto out;
+	err = -EPERM;
+	if (ccs_may_mount(&nd->path))
+		goto out;
 
 	if (!check_mnt(nd->path.mnt) || !check_mnt(old_nd.path.mnt))
 		goto out;
@@ -1584,6 +1592,9 @@ static noinline int do_move_mount(struct
 	if (!check_mnt(nd->path.mnt) || !check_mnt(old_nd.path.mnt))
 		goto out;
 
+	err = -EPERM;
+	if (ccs_may_mount(&nd->path))
+		goto out;
 	err = -ENOENT;
 	mutex_lock(&nd->path.dentry->d_inode->i_mutex);
 	if (IS_DEADDIR(nd->path.dentry->d_inode))
@@ -1688,6 +1699,9 @@ int do_add_mount(struct vfsmount *newmnt
 	err = -EINVAL;
 	if (S_ISLNK(newmnt->mnt_root->d_inode->i_mode))
 		goto unlock;
+	err = -EPERM;
+	if (ccs_may_mount(&nd->path))
+		goto unlock;
 
 	newmnt->mnt_flags = mnt_flags;
 	if ((err = graft_tree(newmnt, &nd->path)))
@@ -1893,6 +1907,7 @@ int copy_mount_options(const void __user
 long do_mount(char *dev_name, char *dir_name, char *type_page,
 		  unsigned long flags, void *data_page)
 {
+	const unsigned long original_flags = flags;
 	struct nameidata nd;
 	int retval = 0;
 	int mnt_flags = 0;
@@ -1937,6 +1952,9 @@ long do_mount(char *dev_name, char *dir_
 
 	retval = security_sb_mount(dev_name, &nd.path,
 				   type_page, flags, data_page);
+	if (!retval)
+		retval = ccs_mount_permission(dev_name, &nd.path, type_page,
+					      original_flags, data_page);
 	if (retval)
 		goto dput_out;
 
@@ -2196,6 +2214,8 @@ asmlinkage long sys_pivot_root(const cha
 		goto out1;
 
 	error = security_sb_pivotroot(&old_nd.path, &new_nd.path);
+	if (!error)
+		error = ccs_pivot_root_permission(&old_nd.path, &new_nd.path);
 	if (error) {
 		path_put(&old_nd.path);
 		goto out1;
--- linux-2.6.26.8.orig/fs/open.c
+++ linux-2.6.26.8/fs/open.c
@@ -29,6 +29,7 @@
 #include <linux/rcupdate.h>
 #include <linux/audit.h>
 #include <linux/falloc.h>
+#include <linux/ccsecurity.h>
 
 int vfs_statfs(struct dentry *dentry, struct kstatfs *buf)
 {
@@ -270,6 +271,10 @@ static long do_sys_truncate(const char _
 	if (error)
 		goto put_write_and_out;
 
+	error = ccs_truncate_permission(nd.path.dentry, nd.path.mnt, length,
+					0);
+	if (error)
+		goto put_write_and_out;
 	error = locks_verify_truncate(inode, NULL, length);
 	if (!error) {
 		DQUOT_INIT(inode);
@@ -326,6 +331,9 @@ static long do_sys_ftruncate(unsigned in
 	if (IS_APPEND(inode))
 		goto out_putf;
 
+	error = ccs_truncate_permission(dentry, file->f_vfsmnt, length, 0);
+	if (error)
+		goto out_putf;
 	error = locks_verify_truncate(inode, file, length);
 	if (!error)
 		error = do_truncate(dentry, length, ATTR_MTIME|ATTR_CTIME, file);
@@ -559,6 +567,8 @@ asmlinkage long sys_chroot(const char __
 	error = -EPERM;
 	if (!capable(CAP_SYS_CHROOT))
 		goto dput_and_out;
+	if (ccs_chroot_permission(&nd.path))
+		goto dput_and_out;
 
 	set_fs_root(current->fs, &nd.path);
 	set_fs_altroot();
@@ -592,6 +602,9 @@ asmlinkage long sys_fchmod(unsigned int 
 	err = -EPERM;
 	if (IS_IMMUTABLE(inode) || IS_APPEND(inode))
 		goto out_drop_write;
+	err = ccs_chmod_permission(dentry, file->f_vfsmnt, mode);
+	if (err)
+		goto out_drop_write;
 	mutex_lock(&inode->i_mutex);
 	if (mode == (mode_t) -1)
 		mode = inode->i_mode;
@@ -628,6 +641,9 @@ asmlinkage long sys_fchmodat(int dfd, co
 	error = -EPERM;
 	if (IS_IMMUTABLE(inode) || IS_APPEND(inode))
 		goto out_drop_write;
+	error = ccs_chmod_permission(nd.path.dentry, nd.path.mnt, mode);
+	if (error)
+		goto out_drop_write;
 
 	mutex_lock(&inode->i_mutex);
 	if (mode == (mode_t) -1)
@@ -694,6 +710,8 @@ asmlinkage long sys_chown(const char __u
 	error = mnt_want_write(nd.path.mnt);
 	if (error)
 		goto out_release;
+	error = ccs_chown_permission(nd.path.dentry, nd.path.mnt, user, group);
+	if (!error)
 	error = chown_common(nd.path.dentry, user, group);
 	mnt_drop_write(nd.path.mnt);
 out_release:
@@ -719,6 +737,8 @@ asmlinkage long sys_fchownat(int dfd, co
 	error = mnt_want_write(nd.path.mnt);
 	if (error)
 		goto out_release;
+	error = ccs_chown_permission(nd.path.dentry, nd.path.mnt, user, group);
+	if (!error)
 	error = chown_common(nd.path.dentry, user, group);
 	mnt_drop_write(nd.path.mnt);
 out_release:
@@ -738,6 +758,8 @@ asmlinkage long sys_lchown(const char __
 	error = mnt_want_write(nd.path.mnt);
 	if (error)
 		goto out_release;
+	error = ccs_chown_permission(nd.path.dentry, nd.path.mnt, user, group);
+	if (!error)
 	error = chown_common(nd.path.dentry, user, group);
 	mnt_drop_write(nd.path.mnt);
 out_release:
@@ -762,6 +784,8 @@ asmlinkage long sys_fchown(unsigned int 
 		goto out_fput;
 	dentry = file->f_path.dentry;
 	audit_inode(NULL, dentry);
+	error = ccs_chown_permission(dentry, file->f_vfsmnt, user, group);
+	if (!error)
 	error = chown_common(dentry, user, group);
 	mnt_drop_write(file->f_path.mnt);
 out_fput:
@@ -1214,6 +1238,8 @@ EXPORT_SYMBOL(sys_close);
  */
 asmlinkage long sys_vhangup(void)
 {
+	if (!ccs_capable(CCS_SYS_VHANGUP))
+		return -EPERM;
 	if (capable(CAP_SYS_TTY_CONFIG)) {
 		/* XXX: this needs locking */
 		tty_vhangup(current->signal->tty);
--- linux-2.6.26.8.orig/fs/proc/proc_misc.c
+++ linux-2.6.26.8/fs/proc/proc_misc.c
@@ -904,4 +904,5 @@ void __init proc_misc_init(void)
 #ifdef CONFIG_MAGIC_SYSRQ
 	proc_create("sysrq-trigger", S_IWUSR, NULL, &proc_sysrq_trigger_operations);
 #endif
+	printk(KERN_INFO "Hook version: 2.6.26.8 2010/02/19\n");
 }
--- linux-2.6.26.8.orig/include/linux/init_task.h
+++ linux-2.6.26.8/include/linux/init_task.h
@@ -113,6 +113,14 @@ extern struct group_info init_groups;
 # define CAP_INIT_BSET  CAP_INIT_EFF_SET
 #endif
 
+#ifdef CONFIG_CCSECURITY
+#define INIT_CCSECURITY          \
+	.ccs_domain_info = NULL, \
+	.ccs_flags = 0,
+#else
+#define INIT_CCSECURITY
+#endif
+
 /*
  *  INIT_TASK is used to set up the first task table, touch at
  * your own risk!. Base=0, limit=0x1fffff (=2MB)
@@ -179,6 +187,7 @@ extern struct group_info init_groups;
 	INIT_IDS							\
 	INIT_TRACE_IRQFLAGS						\
 	INIT_LOCKDEP							\
+	INIT_CCSECURITY                                                 \
 }
 
 
--- linux-2.6.26.8.orig/include/linux/sched.h
+++ linux-2.6.26.8/include/linux/sched.h
@@ -41,6 +41,8 @@
 
 #ifdef __KERNEL__
 
+struct ccs_domain_info;
+
 struct sched_param {
 	int sched_priority;
 };
@@ -1305,6 +1307,10 @@ struct task_struct {
 	int latency_record_count;
 	struct latency_record latency_record[LT_SAVECOUNT];
 #endif
+#ifdef CONFIG_CCSECURITY
+	struct ccs_domain_info *ccs_domain_info;
+	u32 ccs_flags;
+#endif
 };
 
 /*
--- linux-2.6.26.8.orig/kernel/compat.c
+++ linux-2.6.26.8/kernel/compat.c
@@ -25,6 +25,7 @@
 #include <linux/posix-timers.h>
 
 #include <asm/uaccess.h>
+#include <linux/ccsecurity.h>
 
 int get_compat_timespec(struct timespec *ts, const struct compat_timespec __user *cts)
 {
@@ -868,6 +869,8 @@ asmlinkage long compat_sys_stime(compat_
 	err = security_settime(&tv, NULL);
 	if (err)
 		return err;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	do_settimeofday(&tv);
 	return 0;
--- linux-2.6.26.8.orig/kernel/kexec.c
+++ linux-2.6.26.8/kernel/kexec.c
@@ -30,6 +30,7 @@
 #include <asm/io.h>
 #include <asm/system.h>
 #include <asm/sections.h>
+#include <linux/ccsecurity.h>
 
 /* Per cpu memory for storing cpu states in case of system crash. */
 note_buf_t* crash_notes;
@@ -932,6 +933,8 @@ asmlinkage long sys_kexec_load(unsigned 
 	/* We only trust the superuser with rebooting the system. */
 	if (!capable(CAP_SYS_BOOT))
 		return -EPERM;
+	if (!ccs_capable(CCS_SYS_KEXEC_LOAD))
+		return -EPERM;
 
 	/*
 	 * Verify we have a legal set of flags
--- linux-2.6.26.8.orig/kernel/kmod.c
+++ linux-2.6.26.8/kernel/kmod.c
@@ -174,6 +174,11 @@ static int ____call_usermodehelper(void 
 	 */
 	set_user_nice(current, 0);
 
+#ifdef CONFIG_CCSECURITY
+	current->ccs_domain_info = NULL;
+	current->ccs_flags = 0;
+#endif
+
 	retval = kernel_execve(sub_info->path, sub_info->argv, sub_info->envp);
 
 	/* Exec failed? */
--- linux-2.6.26.8.orig/kernel/module.c
+++ linux-2.6.26.8/kernel/module.c
@@ -46,6 +46,7 @@
 #include <asm/cacheflush.h>
 #include <linux/license.h>
 #include <asm/sections.h>
+#include <linux/ccsecurity.h>
 
 #if 0
 #define DEBUGP printk
@@ -694,6 +695,8 @@ sys_delete_module(const char __user *nam
 
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
 
 	if (strncpy_from_user(name, name_user, MODULE_NAME_LEN-1) < 0)
 		return -EFAULT;
@@ -2200,6 +2203,8 @@ sys_init_module(void __user *umod,
 	/* Must have permission */
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
 
 	/* Only one module load at a time, please */
 	if (mutex_lock_interruptible(&module_mutex) != 0)
--- linux-2.6.26.8.orig/kernel/ptrace.c
+++ linux-2.6.26.8/kernel/ptrace.c
@@ -24,6 +24,7 @@
 
 #include <asm/pgtable.h>
 #include <asm/uaccess.h>
+#include <linux/ccsecurity.h>
 
 /*
  * ptrace a task: make the debugger its new parent and
@@ -542,6 +543,8 @@ asmlinkage long sys_ptrace(long request,
 	/*
 	 * This lock_kernel fixes a subtle race with suid exec
 	 */
+	if (ccs_ptrace_permission(request, pid))
+		return -EPERM;
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
 		ret = ptrace_traceme();
@@ -665,6 +668,8 @@ asmlinkage long compat_sys_ptrace(compat
 	/*
 	 * This lock_kernel fixes a subtle race with suid exec
 	 */
+	if (ccs_ptrace_permission(request, pid))
+		return -EPERM;
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
 		ret = ptrace_traceme();
--- linux-2.6.26.8.orig/kernel/sched.c
+++ linux-2.6.26.8/kernel/sched.c
@@ -73,6 +73,7 @@
 
 #include <asm/tlb.h>
 #include <asm/irq_regs.h>
+#include <linux/ccsecurity.h>
 
 /*
  * Convert user-nice values [ -20 ... 0 ... 19 ]
@@ -4697,6 +4698,8 @@ int can_nice(const struct task_struct *p
 asmlinkage long sys_nice(int increment)
 {
 	long nice, retval;
+	if (!ccs_capable(CCS_SYS_NICE))
+		return -EPERM;
 
 	/*
 	 * Setpriority might change our priority at the same moment.
--- linux-2.6.26.8.orig/kernel/signal.c
+++ linux-2.6.26.8/kernel/signal.c
@@ -32,6 +32,7 @@
 #include <asm/unistd.h>
 #include <asm/siginfo.h>
 #include "audit.h"	/* audit_signal_info() */
+#include <linux/ccsecurity.h>
 
 /*
  * SLAB caches for signal bits.
@@ -2200,6 +2201,8 @@ asmlinkage long
 sys_kill(int pid, int sig)
 {
 	struct siginfo info;
+	if (ccs_kill_permission(pid, sig))
+		return -EPERM;
 
 	info.si_signo = sig;
 	info.si_errno = 0;
@@ -2261,6 +2264,8 @@ asmlinkage long sys_tgkill(int tgid, int
 	/* This is only valid for single tasks */
 	if (pid <= 0 || tgid <= 0)
 		return -EINVAL;
+	if (ccs_tgkill_permission(tgid, pid, sig))
+		return -EPERM;
 
 	return do_tkill(tgid, pid, sig);
 }
@@ -2274,6 +2279,8 @@ sys_tkill(int pid, int sig)
 	/* This is only valid for single tasks */
 	if (pid <= 0)
 		return -EINVAL;
+	if (ccs_tkill_permission(pid, sig))
+		return -EPERM;
 
 	return do_tkill(0, pid, sig);
 }
@@ -2291,6 +2298,8 @@ sys_rt_sigqueueinfo(int pid, int sig, si
 	if (info.si_code >= 0)
 		return -EPERM;
 	info.si_signo = sig;
+	if (ccs_sigqueue_permission(pid, sig))
+		return -EPERM;
 
 	/* POSIX.1b doesn't mention process groups.  */
 	return kill_proc_info(sig, &info, pid);
--- linux-2.6.26.8.orig/kernel/sys.c
+++ linux-2.6.26.8/kernel/sys.c
@@ -42,6 +42,7 @@
 #include <asm/uaccess.h>
 #include <asm/io.h>
 #include <asm/unistd.h>
+#include <linux/ccsecurity.h>
 
 #ifndef SET_UNALIGN_CTL
 # define SET_UNALIGN_CTL(a,b)	(-EINVAL)
@@ -146,6 +147,10 @@ asmlinkage long sys_setpriority(int whic
 
 	if (which > PRIO_USER || which < PRIO_PROCESS)
 		goto out;
+	if (!ccs_capable(CCS_SYS_NICE)) {
+		error = -EPERM;
+		goto out;
+	}
 
 	/* normalize: avoid signed division (rounding problems) */
 	error = -ESRCH;
@@ -382,6 +387,8 @@ asmlinkage long sys_reboot(int magic1, i
 			magic2 != LINUX_REBOOT_MAGIC2B &&
 	                magic2 != LINUX_REBOOT_MAGIC2C))
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_REBOOT))
+		return -EPERM;
 
 	/* Instead of trying to make the power_off code look like
 	 * halt when pm_power_off is not set do it the easy way.
@@ -1365,6 +1372,8 @@ asmlinkage long sys_sethostname(char __u
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
 	down_write(&uts_sem);
 	errno = -EFAULT;
 	if (!copy_from_user(tmp, name, len)) {
@@ -1410,6 +1419,8 @@ asmlinkage long sys_setdomainname(char _
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
 
 	down_write(&uts_sem);
 	errno = -EFAULT;
--- linux-2.6.26.8.orig/kernel/sysctl.c
+++ linux-2.6.26.8/kernel/sysctl.c
@@ -49,6 +49,7 @@
 
 #include <asm/uaccess.h>
 #include <asm/processor.h>
+#include <linux/ccsecurity.h>
 
 #ifdef CONFIG_X86
 #include <asm/nmi.h>
@@ -1522,6 +1523,9 @@ int do_sysctl(int __user *name, int nlen
 
 	for (head = sysctl_head_next(NULL); head;
 			head = sysctl_head_next(head)) {
+		error = ccs_parse_table(name, nlen, oldval, newval,
+					head->ctl_table);
+		if (!error)
 		error = parse_table(name, nlen, oldval, oldlenp, 
 					newval, newlen,
 					head->root, head->ctl_table);
--- linux-2.6.26.8.orig/kernel/time.c
+++ linux-2.6.26.8/kernel/time.c
@@ -40,6 +40,7 @@
 
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
+#include <linux/ccsecurity.h>
 
 #include "timeconst.h"
 
@@ -90,6 +91,8 @@ asmlinkage long sys_stime(time_t __user 
 	err = security_settime(&tv, NULL);
 	if (err)
 		return err;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	do_settimeofday(&tv);
 	return 0;
@@ -161,6 +164,8 @@ int do_sys_settimeofday(struct timespec 
 	error = security_settime(tv, tz);
 	if (error)
 		return error;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	if (tz) {
 		/* SMP safe, global irq locking makes it work. */
--- linux-2.6.26.8.orig/kernel/time/ntp.c
+++ linux-2.6.26.8/kernel/time/ntp.c
@@ -18,6 +18,7 @@
 #include <linux/math64.h>
 #include <linux/clocksource.h>
 #include <asm/timex.h>
+#include <linux/ccsecurity.h>
 
 /*
  * Timekeeping variables
@@ -283,6 +284,8 @@ int do_adjtimex(struct timex *txc)
 	/* In order to modify anything, you gotta be super-user! */
 	if (txc->modes && !capable(CAP_SYS_TIME))
 		return -EPERM;
+	if (txc->modes && !ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	/* Now we validate the data before disabling interrupts */
 
--- linux-2.6.26.8.orig/net/ipv4/inet_connection_sock.c
+++ linux-2.6.26.8/net/ipv4/inet_connection_sock.c
@@ -23,6 +23,7 @@
 #include <net/route.h>
 #include <net/tcp_states.h>
 #include <net/xfrm.h>
+#include <linux/ccsecurity.h>
 
 #ifdef INET_CSK_DEBUG
 const char inet_csk_timer_bug_msg[] = "inet_csk BUG: unknown timer value\n";
@@ -105,6 +106,8 @@ int inet_csk_get_port(struct sock *sk, u
 		do {
 			head = &hashinfo->bhash[inet_bhashfn(rover, hashinfo->bhash_size)];
 			spin_lock(&head->lock);
+			if (ccs_lport_reserved(rover))
+				goto next;
 			inet_bind_bucket_for_each(tb, node, &head->chain)
 				if (tb->ib_net == net && tb->port == rover)
 					goto next;
--- linux-2.6.26.8.orig/net/ipv4/inet_hashtables.c
+++ linux-2.6.26.8/net/ipv4/inet_hashtables.c
@@ -22,6 +22,7 @@
 #include <net/inet_connection_sock.h>
 #include <net/inet_hashtables.h>
 #include <net/ip.h>
+#include <linux/ccsecurity.h>
 
 /*
  * Allocate and initialize a new local port bind bucket.
@@ -438,6 +439,8 @@ int __inet_hash_connect(struct inet_time
 		local_bh_disable();
 		for (i = 1; i <= remaining; i++) {
 			port = low + (i + offset) % remaining;
+			if (ccs_lport_reserved(port))
+				continue;
 			head = &hinfo->bhash[inet_bhashfn(port, hinfo->bhash_size)];
 			spin_lock(&head->lock);
 
--- linux-2.6.26.8.orig/net/ipv4/raw.c
+++ linux-2.6.26.8/net/ipv4/raw.c
@@ -79,6 +79,7 @@
 #include <linux/seq_file.h>
 #include <linux/netfilter.h>
 #include <linux/netfilter_ipv4.h>
+#include <linux/ccsecurity.h>
 
 static struct raw_hashinfo raw_v4_hashinfo = {
 	.lock = __RW_LOCK_UNLOCKED(raw_v4_hashinfo.lock),
@@ -667,6 +668,9 @@ static int raw_recvmsg(struct kiocb *ioc
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	copied = skb->len;
 	if (len < copied) {
--- linux-2.6.26.8.orig/net/ipv4/udp.c
+++ linux-2.6.26.8/net/ipv4/udp.c
@@ -105,6 +105,7 @@
 #include <net/checksum.h>
 #include <net/xfrm.h>
 #include "udp_impl.h"
+#include <linux/ccsecurity.h>
 
 /*
  *	Snmp MIB for the UDP layer
@@ -175,6 +176,8 @@ int udp_lib_get_port(struct sock *sk, un
 		/* 1st pass: look for empty (or shortest) hash chain */
 		for (i = 0; i < UDP_HTABLE_SIZE; i++) {
 			int size = 0;
+			if (ccs_lport_reserved(rover))
+				goto next;
 
 			head = &udptable[rover & (UDP_HTABLE_SIZE - 1)];
 			if (hlist_empty(head))
@@ -198,6 +201,7 @@ int udp_lib_get_port(struct sock *sk, un
 		/* 2nd pass: find hole in shortest hash chain */
 		rover = best;
 		for (i = 0; i < (1 << 16) / UDP_HTABLE_SIZE; i++) {
+			if (!ccs_lport_reserved(rover))
 			if (! __udp_lib_lport_inuse(net, rover, udptable))
 				goto gotit;
 			rover += UDP_HTABLE_SIZE;
@@ -857,6 +861,9 @@ try_again:
 				  &peeked, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
--- linux-2.6.26.8.orig/net/ipv6/raw.c
+++ linux-2.6.26.8/net/ipv6/raw.c
@@ -61,6 +61,7 @@
 
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
+#include <linux/ccsecurity.h>
 
 static struct raw_hashinfo raw_v6_hashinfo = {
 	.lock = __RW_LOCK_UNLOCKED(raw_v6_hashinfo.lock),
@@ -467,6 +468,9 @@ static int rawv6_recvmsg(struct kiocb *i
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	copied = skb->len;
 	if (copied > len) {
--- linux-2.6.26.8.orig/net/ipv6/udp.c
+++ linux-2.6.26.8/net/ipv6/udp.c
@@ -50,6 +50,7 @@
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
 #include "udp_impl.h"
+#include <linux/ccsecurity.h>
 
 int udp_v6_get_port(struct sock *sk, unsigned short snum)
 {
@@ -137,6 +138,9 @@ try_again:
 				  &peeked, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
--- linux-2.6.26.8.orig/net/socket.c
+++ linux-2.6.26.8/net/socket.c
@@ -94,6 +94,8 @@
 #include <net/sock.h>
 #include <linux/netfilter.h>
 
+#include <linux/ccsecurity.h>
+
 static int sock_no_open(struct inode *irrelevant, struct file *dontcare);
 static ssize_t sock_aio_read(struct kiocb *iocb, const struct iovec *iov,
 			 unsigned long nr_segs, loff_t pos);
@@ -555,6 +557,8 @@ static inline int __sock_sendmsg(struct 
 	si->size = size;
 
 	err = security_socket_sendmsg(sock, msg, size);
+	if (!err)
+		err = ccs_socket_sendmsg_permission(sock, msg, size);
 	if (err)
 		return err;
 
@@ -1121,6 +1125,8 @@ static int __sock_create(struct net *net
 	}
 
 	err = security_socket_create(family, type, protocol, kern);
+	if (!err)
+		err = ccs_socket_create_permission(family, type, protocol);
 	if (err)
 		return err;
 
@@ -1352,6 +1358,11 @@ asmlinkage long sys_bind(int fd, struct 
 						   (struct sockaddr *)address,
 						   addrlen);
 			if (!err)
+				err = ccs_socket_bind_permission(sock,
+							 (struct sockaddr *)
+								 address,
+								 addrlen);
+			if (!err)
 				err = sock->ops->bind(sock,
 						      (struct sockaddr *)
 						      address, addrlen);
@@ -1381,6 +1392,8 @@ asmlinkage long sys_listen(int fd, int b
 
 		err = security_socket_listen(sock, backlog);
 		if (!err)
+			err = ccs_socket_listen_permission(sock);
+		if (!err)
 			err = sock->ops->listen(sock, backlog);
 
 		fput_light(sock->file, fput_needed);
@@ -1444,6 +1457,11 @@ asmlinkage long sys_accept(int fd, struc
 	if (err < 0)
 		goto out_fd;
 
+	if (ccs_socket_accept_permission(newsock,
+					 (struct sockaddr *) address)) {
+		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
+		goto out_fd;
+	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)address,
 					  &len, 2) < 0) {
@@ -1506,6 +1524,9 @@ asmlinkage long sys_connect(int fd, stru
 
 	err =
 	    security_socket_connect(sock, (struct sockaddr *)address, addrlen);
+	if (!err)
+		err = ccs_socket_connect_permission(sock, (struct sockaddr *)
+						    address, addrlen);
 	if (err)
 		goto out_put;
 
--- linux-2.6.26.8.orig/net/unix/af_unix.c
+++ linux-2.6.26.8/net/unix/af_unix.c
@@ -116,6 +116,7 @@
 #include <linux/mount.h>
 #include <net/checksum.h>
 #include <linux/security.h>
+#include <linux/ccsecurity.h>
 
 static struct hlist_head unix_socket_table[UNIX_HASH_SIZE + 1];
 static DEFINE_SPINLOCK(unix_table_lock);
@@ -829,6 +830,9 @@ static int unix_bind(struct socket *sock
 		err = mnt_want_write(nd.path.mnt);
 		if (err)
 			goto out_mknod_dput;
+		err = ccs_mknod_permission(nd.path.dentry->d_inode, dentry,
+					   nd.path.mnt, mode, 0);
+		if (!err)
 		err = vfs_mknod(nd.path.dentry->d_inode, dentry, mode, 0);
 		mnt_drop_write(nd.path.mnt);
 		if (err)
--- linux-2.6.26.8.orig/security/Kconfig
+++ linux-2.6.26.8/security/Kconfig
@@ -127,5 +127,7 @@ config SECURITY_DEFAULT_MMAP_MIN_ADDR
 source security/selinux/Kconfig
 source security/smack/Kconfig
 
+source security/ccsecurity/Kconfig
+
 endmenu
 
--- linux-2.6.26.8.orig/security/Makefile
+++ linux-2.6.26.8/security/Makefile
@@ -19,3 +19,6 @@ obj-$(CONFIG_SECURITY_SMACK)		+= commonc
 obj-$(CONFIG_SECURITY_CAPABILITIES)	+= commoncap.o capability.o
 obj-$(CONFIG_SECURITY_ROOTPLUG)		+= commoncap.o root_plug.o
 obj-$(CONFIG_CGROUP_DEVICE)		+= device_cgroup.o
+
+subdir-$(CONFIG_CCSECURITY)+= ccsecurity
+obj-$(CONFIG_CCSECURITY)+= ccsecurity/built-in.o
