diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/MAINTAINERS linux-2.6.23.14-rsbac-1.3.7/MAINTAINERS
--- trunk/MAINTAINERS	2008-02-13 16:27:00.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/MAINTAINERS	2008-02-13 13:27:47.000000000 +0100
@@ -3164,6 +3164,13 @@ S:	Maintained
 RISCOM8 DRIVER
 S:	Orphan
 
+RSBAC
+P:	Amon Ott
+M:	ao@rsbac.org
+L:	rsbac@rsbac.org
+W:	http://www.rsbac.org
+S:	Maintained
+
 RTL818X WIRELESS DRIVER
 P:	Michael Wu
 M:	flamingice@sourmilk.net
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/Makefile linux-2.6.23.14-rsbac-1.3.7/Makefile
--- trunk/Makefile	2008-02-13 16:31:20.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/Makefile	2008-02-13 13:37:28.000000000 +0100
@@ -533,6 +533,13 @@ export KBUILD_IMAGE ?= vmlinux
 export	INSTALL_PATH ?= /boot
 
 #
+
+# Add RSBAC version
+ifeq ($(CONFIG_RSBAC),y)
+EXTRAVERSION:=$(EXTRAVERSION)-rsbac
+core-y		+= rsbac/
+endif
+
 # INSTALL_MOD_PATH specifies a prefix to MODLIB for module directory
 # relocations required by build roots.  This is not defined in the
 # makefile but the argument can be passed to make if needed.
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/alpha/Kconfig linux-2.6.23.14-rsbac-1.3.7/arch/alpha/Kconfig
--- trunk/arch/alpha/Kconfig	2008-02-13 16:29:12.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/alpha/Kconfig	2008-02-13 13:32:06.000000000 +0100
@@ -648,6 +648,8 @@ source "fs/Kconfig.binfmt"
 
 endmenu
 
+source "rsbac/Kconfig"
+
 source "net/Kconfig"
 
 source "drivers/Kconfig"
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/alpha/kernel/asm-offsets.c linux-2.6.23.14-rsbac-1.3.7/arch/alpha/kernel/asm-offsets.c
--- trunk/arch/alpha/kernel/asm-offsets.c	2008-02-13 16:29:12.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/alpha/kernel/asm-offsets.c	2008-02-13 13:32:06.000000000 +0100
@@ -36,6 +36,9 @@ void foo(void)
 	DEFINE(PT_PTRACED, PT_PTRACED);
 	DEFINE(CLONE_VM, CLONE_VM);
 	DEFINE(CLONE_UNTRACED, CLONE_UNTRACED);
+#ifdef CONFIG_RSBAC
+	DEFINE(CLONE_KTHREAD, CLONE_KTHREAD);
+#endif
 	DEFINE(SIGCHLD, SIGCHLD);
 	BLANK();
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/alpha/kernel/entry.S linux-2.6.23.14-rsbac-1.3.7/arch/alpha/kernel/entry.S
--- trunk/arch/alpha/kernel/entry.S	2008-02-13 16:29:14.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/alpha/kernel/entry.S	2008-02-13 13:32:11.000000000 +0100
@@ -643,7 +643,11 @@ kernel_thread:
 	stq	$2, 152($sp)		/* HAE */
 
 	/* Shuffle FLAGS to the front; add CLONE_VM.  */
+#ifdef CONFIG_RSBAC
+	ldi$1, CLONE_VM|CLONE_UNTRACED | CLONE_KTHREAD;
+#else
 	ldi	$1, CLONE_VM|CLONE_UNTRACED
+#endif
 	or	$18, $1, $16
 	bsr	$26, sys_clone
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/alpha/kernel/ptrace.c linux-2.6.23.14-rsbac-1.3.7/arch/alpha/kernel/ptrace.c
--- trunk/arch/alpha/kernel/ptrace.c	2008-02-13 16:29:14.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/alpha/kernel/ptrace.c	2008-02-13 13:32:11.000000000 +0100
@@ -23,6 +23,8 @@
 
 #include "proto.h"
 
+#include <rsbac/hooks.h>
+
 #define DEBUG	DBG_MEM
 #undef DEBUG
 
@@ -269,6 +271,11 @@ do_sys_ptrace(long request, long pid, lo
 	size_t copied;
 	long ret;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	lock_kernel();
 	DBG(DBG_MEM, ("request=%ld pid=%ld addr=0x%lx data=0x%lx\n",
 		      request, pid, addr, data));
@@ -277,6 +284,22 @@ do_sys_ptrace(long request, long pid, lo
 		goto out_notsk;
 	}
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = pid;
+	rsbac_attribute_value.trace_request = request;
+	if (!rsbac_adf_request(R_TRACE,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_trace_request,
+				rsbac_attribute_value))
+	{
+		ret = -EPERM;
+		goto out_notsk;
+	}
+#endif
+
 	child = ptrace_get_task_struct(pid);
 	if (IS_ERR(child)) {
 		ret = PTR_ERR(child);
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/arm/Kconfig linux-2.6.23.14-rsbac-1.3.7/arch/arm/Kconfig
--- trunk/arch/arm/Kconfig	2008-02-13 16:27:33.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/arm/Kconfig	2008-02-13 13:28:22.000000000 +0100
@@ -976,6 +976,8 @@ source "kernel/power/Kconfig"
 
 endmenu
 
+source "rsbac/Kconfig"
+
 source "net/Kconfig"
 
 menu "Device Drivers"
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/arm/kernel/calls.S linux-2.6.23.14-rsbac-1.3.7/arch/arm/kernel/calls.S
--- trunk/arch/arm/kernel/calls.S	2008-02-13 16:27:35.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/arm/kernel/calls.S	2008-02-13 13:28:25.000000000 +0100
@@ -232,7 +232,11 @@
 /* 220 */	CALL(sys_madvise)
 		CALL(ABI(sys_fcntl64, sys_oabi_fcntl64))
 		CALL(sys_ni_syscall) /* TUX */
+#ifdef CONFIG_RSBAC
+		CALL(sys_rsbac)
+#else
 		CALL(sys_ni_syscall)
+#endif
 		CALL(sys_gettid)
 /* 225 */	CALL(ABI(sys_readahead, sys_oabi_readahead))
 		CALL(sys_setxattr)
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/arm/kernel/process.c linux-2.6.23.14-rsbac-1.3.7/arch/arm/kernel/process.c
--- trunk/arch/arm/kernel/process.c	2008-02-13 16:27:34.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/arm/kernel/process.c	2008-02-13 13:28:23.000000000 +0100
@@ -37,6 +37,10 @@
 #include <asm/uaccess.h>
 #include <asm/mach/time.h>
 
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 static const char *processor_modes[] = {
   "USER_26", "FIQ_26" , "IRQ_26" , "SVC_26" , "UK4_26" , "UK5_26" , "UK6_26" , "UK7_26" ,
   "UK8_26" , "UK9_26" , "UK10_26", "UK11_26", "UK12_26", "UK13_26", "UK14_26", "UK15_26",
@@ -419,6 +423,10 @@ pid_t kernel_thread(int (*fn)(void *), v
 {
 	struct pt_regs regs;
 
+#ifdef CONFIG_RSBAC
+	int rsbac_retval;
+#endif
+
 	memset(&regs, 0, sizeof(regs));
 
 	regs.ARM_r1 = (unsigned long)arg;
@@ -427,7 +435,14 @@ pid_t kernel_thread(int (*fn)(void *), v
 	regs.ARM_pc = (unsigned long)kernel_thread_helper;
 	regs.ARM_cpsr = SVC_MODE;
 
+#ifdef CONFIG_RSBAC
+	rsbac_retval = do_fork(flags | CLONE_VM | CLONE_UNTRACED | CLONE_KTHREAD, 0, &regs, 0, NULL, NULL);
+	if(rsbac_retval > 0)
+		rsbac_kthread_notify(rsbac_retval);
+	return rsbac_retval;
+#else
 	return do_fork(flags|CLONE_VM|CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);
+#endif
 }
 EXPORT_SYMBOL(kernel_thread);
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/cris/Kconfig linux-2.6.23.14-rsbac-1.3.7/arch/cris/Kconfig
--- trunk/arch/cris/Kconfig	2008-02-13 16:29:52.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/cris/Kconfig	2008-02-13 13:34:06.000000000 +0100
@@ -145,6 +145,8 @@ source arch/cris/arch-v10/Kconfig
 
 endmenu
 
+source "rsbac/Kconfig"
+
 source "net/Kconfig"
 
 # bring in ETRAX built-in drivers
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/cris/arch-v10/kernel/entry.S linux-2.6.23.14-rsbac-1.3.7/arch/cris/arch-v10/kernel/entry.S
--- trunk/arch/cris/arch-v10/kernel/entry.S	2008-02-13 16:29:53.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/cris/arch-v10/kernel/entry.S	2008-02-13 13:34:10.000000000 +0100
@@ -1069,7 +1069,11 @@ sys_call_table:	
 	.long sys_getdents64	/* 220 */
 	.long sys_fcntl64
 	.long sys_ni_syscall	/* reserved for TUX */
-	.long sys_ni_syscall
+#ifdef CONFIG_RSBAC
+	.long sys_rsbac 	/*	reserved for sys_security */
+#else
+ 	.long sys_ni_syscall 	/*	reserved for sys_security */
+#endif
 	.long sys_gettid
 	.long sys_readahead	/* 225 */
 	.long sys_setxattr
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/cris/arch-v10/kernel/process.c linux-2.6.23.14-rsbac-1.3.7/arch/cris/arch-v10/kernel/process.c
--- trunk/arch/cris/arch-v10/kernel/process.c	2008-02-13 16:29:52.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/cris/arch-v10/kernel/process.c	2008-02-13 13:34:09.000000000 +0100
@@ -18,6 +18,11 @@
 #include <asm/arch/svinto.h>
 #include <linux/init.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 #ifdef CONFIG_ETRAX_GPIO
 void etrax_gpio_wake_up_check(void); /* drivers/gpio.c */
 #endif
@@ -94,6 +99,11 @@ int kernel_thread(int (*fn)(void *), voi
 {
 	struct pt_regs regs;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        int rsbac_retval;
+        #endif
+
 	memset(&regs, 0, sizeof(regs));
 
         /* Don't use r10 since that is set to 0 in copy_thread */
@@ -103,7 +113,14 @@ int kernel_thread(int (*fn)(void *), voi
 	regs.dccr = 1 << I_DCCR_BITNR;
 
 	/* Ok, create the new process.. */
+        #ifdef CONFIG_RSBAC
+	rsbac_retval = do_fork(flags | CLONE_VM | CLONE_UNTRACED | CLONE_KTHREAD, 0, &regs, 0, NULL, NULL);
+	if(rsbac_retval > 0)
+	  rsbac_kthread_notify(rsbac_retval);
+	return rsbac_retval;
+        #else
         return do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);
+        #endif
 }
 
 /* setup the child's kernel stack with a pt_regs and switch_stack on it.
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/cris/arch-v32/kernel/process.c linux-2.6.23.14-rsbac-1.3.7/arch/cris/arch-v32/kernel/process.c
--- trunk/arch/cris/arch-v32/kernel/process.c	2008-02-13 16:29:55.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/cris/arch-v32/kernel/process.c	2008-02-13 13:34:22.000000000 +0100
@@ -120,7 +120,11 @@ kernel_thread(int (*fn)(void *), void * 
 	regs.ccs = 1 << (I_CCS_BITNR + CCS_SHIFT);
 
 	/* Create the new process. */
-        return do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);
+#ifdef CONFIG_RSBAC
+        return do_fork(flags | CLONE_VM | CLONE_UNTRACED | CLONE_KTHREAD, 0, &regs, 0, NULL, NULL);
+#else
+	return do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);
+#endif
 }
 
 /*
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/frv/kernel/kernel_thread.S linux-2.6.23.14-rsbac-1.3.7/arch/frv/kernel/kernel_thread.S
--- trunk/arch/frv/kernel/kernel_thread.S	2008-02-13 16:29:32.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/frv/kernel/kernel_thread.S	2008-02-13 13:32:57.000000000 +0100
@@ -13,6 +13,10 @@
 #include <asm/unistd.h>
 
 #define CLONE_VM	0x00000100	/* set if VM shared between processes */
+#ifdef CONFIG_RSBAC
+#define CLONE_KTHREAD   0x10000000      /* kernel thread */
+#define CLONE_KT        (CLONE_VM | CLONE_KTHREAD) /* kernel thread flags */
+#endif
 #define	KERN_ERR	"<3>"
 
 	.section .rodata
@@ -37,7 +41,11 @@ kernel_thread:
 
 	# start by forking the current process, but with shared VM
 	setlos.p	#__NR_clone,gr7		; syscall number
+#ifdef CONFIG_RSBAC
+	ori 		gr10,#CLONE_KT,gr8 	; first syscall arg[clone_flags]
+#else
 	ori		gr10,#CLONE_VM,gr8	; first syscall arg	[clone_flags]
+#endif
 	sethi.p		#0xe4e4,gr9		; second syscall arg	[newsp]
 	setlo		#0xe4e4,gr9
 	setlos.p	#0,gr10			; third syscall arg	[parent_tidptr]
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/h8300/kernel/process.c linux-2.6.23.14-rsbac-1.3.7/arch/h8300/kernel/process.c
--- trunk/arch/h8300/kernel/process.c	2008-02-13 16:30:04.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/h8300/kernel/process.c	2008-02-13 13:34:40.000000000 +0100
@@ -45,6 +45,10 @@
 #include <asm/setup.h>
 #include <asm/pgtable.h>
 
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 void (*pm_power_off)(void) = NULL;
 EXPORT_SYMBOL(pm_power_off);
 
@@ -135,7 +139,11 @@ int kernel_thread(int (*fn)(void *), voi
 
 	fs = get_fs();
 	set_fs (KERNEL_DS);
+#ifdef CONFIG_RSBAC
+	clone_arg = flags | CLONE_VM | CLONE_KTHREAD;
+#else
 	clone_arg = flags | CLONE_VM;
+#endif
 	__asm__("mov.l sp,er3\n\t"
 		"sub.l er2,er2\n\t"
 		"mov.l %2,er1\n\t"
@@ -154,6 +162,12 @@ int kernel_thread(int (*fn)(void *), voi
 		:"i"(__NR_clone),"g"(clone_arg),"g"(fn),"g"(arg),"i"(__NR_exit)
 		:"er0","er1","er2","er3");
 	set_fs (fs);
+
+        #ifdef CONFIG_RSBAC
+	if(retval > 0)
+	  rsbac_kthread_notify(retval);
+        #endif
+
 	return retval;
 }
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/i386/Kconfig linux-2.6.23.14-rsbac-1.3.7/arch/i386/Kconfig
--- trunk/arch/i386/Kconfig	2008-02-13 16:29:24.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/i386/Kconfig	2008-02-13 13:32:33.000000000 +0100
@@ -928,6 +928,8 @@ config COMPAT_VDSO
 
 endmenu
 
+source "rsbac/Kconfig"
+
 config ARCH_ENABLE_MEMORY_HOTPLUG
 	def_bool y
 	depends on HIGHMEM
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/i386/kernel/ioport.c linux-2.6.23.14-rsbac-1.3.7/arch/i386/kernel/ioport.c
--- trunk/arch/i386/kernel/ioport.c	2008-02-13 16:29:22.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/i386/kernel/ioport.c	2008-02-13 13:32:29.000000000 +0100
@@ -11,12 +11,15 @@
 #include <linux/errno.h>
 #include <linux/types.h>
 #include <linux/ioport.h>
+#include <linux/security.h>
 #include <linux/smp.h>
 #include <linux/stddef.h>
 #include <linux/slab.h>
 #include <linux/thread_info.h>
 #include <linux/syscalls.h>
 
+#include <rsbac/hooks.h>
+
 /* Set EXTENT bits starting at BASE in BITMAP to value TURN_ON. */
 static void set_bitmap(unsigned long *bitmap, unsigned int base, unsigned int extent, int new_value)
 {
@@ -62,11 +65,33 @@ asmlinkage long sys_ioperm(unsigned long
 	struct tss_struct * tss;
 	unsigned long *bitmap;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+ 
 	if ((from + num <= from) || (from + num > IO_BITMAP_BITS))
 		return -EINVAL;
 	if (turn_on && !capable(CAP_SYS_RAWIO))
 		return -EPERM;
 
+         /* RSBAC */
+         #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.scd = ST_ioports;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_PERMISSIONS_DATA,
+                               current->pid,
+                               T_SCD,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	/*
 	 * If it's the first ioperm() call in this thread's lifetime, set the
 	 * IO bitmap up. ioperm() is much less timing critical than clone(),
@@ -139,12 +164,34 @@ asmlinkage long sys_iopl(unsigned long u
 	unsigned int old = (regs->eflags >> 12) & 3;
 	struct thread_struct *t = &current->thread;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (level > 3)
 		return -EINVAL;
 	/* Trying to gain more privileges? */
 	if (level > old) {
 		if (!capable(CAP_SYS_RAWIO))
 			return -EPERM;
+
+	        /* RSBAC */
+	        #ifdef CONFIG_RSBAC
+	        rsbac_pr_debug(aef, "calling ADF\n");
+	        rsbac_target_id.scd = ST_ioports;
+	        rsbac_attribute_value.dummy = 0;
+	        if (!rsbac_adf_request(R_MODIFY_PERMISSIONS_DATA,
+	                               current->pid,
+	                               T_SCD,
+	                               rsbac_target_id,
+	                               A_none,
+	                               rsbac_attribute_value))
+	          {
+	            return -EPERM;
+	          }
+	        #endif
 	}
 	t->iopl = level << 12;
 	regs->eflags = (regs->eflags & ~X86_EFLAGS_IOPL) | t->iopl;
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/i386/kernel/process.c linux-2.6.23.14-rsbac-1.3.7/arch/i386/kernel/process.c
--- trunk/arch/i386/kernel/process.c	2008-02-13 16:29:20.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/i386/kernel/process.c	2008-02-13 13:32:24.000000000 +0100
@@ -58,6 +58,11 @@
 #include <asm/tlbflush.h>
 #include <asm/cpu.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 asmlinkage void ret_from_fork(void) __asm__("ret_from_fork");
 
 static int hlt_counter;
@@ -353,6 +358,10 @@ int kernel_thread(int (*fn)(void *), voi
 {
 	struct pt_regs regs;
 
+        #ifdef CONFIG_RSBAC
+        long rsbac_retval;
+        #endif
+
 	memset(&regs, 0, sizeof(regs));
 
 	regs.ebx = (unsigned long) fn;
@@ -367,7 +376,14 @@ int kernel_thread(int (*fn)(void *), voi
 	regs.eflags = X86_EFLAGS_IF | X86_EFLAGS_SF | X86_EFLAGS_PF | 0x2;
 
 	/* Ok, create the new process.. */
+        #ifdef CONFIG_RSBAC
+	rsbac_retval = do_fork(flags | CLONE_VM | CLONE_UNTRACED | CLONE_KTHREAD, 0, &regs, 0, NULL, NULL);
+	if(rsbac_retval > 0)
+	  rsbac_kthread_notify(rsbac_retval);
+	return rsbac_retval;
+        #else
 	return do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);
+        #endif
 }
 EXPORT_SYMBOL(kernel_thread);
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/i386/kernel/syscall_table.S linux-2.6.23.14-rsbac-1.3.7/arch/i386/kernel/syscall_table.S
--- trunk/arch/i386/kernel/syscall_table.S	2008-02-13 16:29:23.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/i386/kernel/syscall_table.S	2008-02-13 13:32:30.000000000 +0100
@@ -222,7 +222,11 @@ ENTRY(sys_call_table)
 	.long sys_getdents64	/* 220 */
 	.long sys_fcntl64
 	.long sys_ni_syscall	/* reserved for TUX */
-	.long sys_ni_syscall
+#ifdef CONFIG_RSBAC
+	.long sys_rsbac		/* Reserved for security */
+#else
+	.long sys_ni_syscall	/* Reserved for security */
+#endif
 	.long sys_gettid
 	.long sys_readahead	/* 225 */
 	.long sys_setxattr
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/ia64/Kconfig linux-2.6.23.14-rsbac-1.3.7/arch/ia64/Kconfig
--- trunk/arch/ia64/Kconfig	2008-02-13 16:30:17.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/ia64/Kconfig	2008-02-13 13:35:08.000000000 +0100
@@ -547,6 +547,8 @@ config MSPEC
 	  operations support (formerly known as fetchop), say Y here,
 	  otherwise say N.
 
+source "rsbac/Kconfig"
+
 source "fs/Kconfig"
 
 source "lib/Kconfig"
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/ia64/kernel/asm-offsets.c linux-2.6.23.14-rsbac-1.3.7/arch/ia64/kernel/asm-offsets.c
--- trunk/arch/ia64/kernel/asm-offsets.c	2008-02-13 16:30:15.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/ia64/kernel/asm-offsets.c	2008-02-13 13:35:02.000000000 +0100
@@ -194,6 +194,9 @@ void foo(void)
     /* for assembly files which can't include sched.h: */
 	DEFINE(IA64_CLONE_VFORK, CLONE_VFORK);
 	DEFINE(IA64_CLONE_VM, CLONE_VM);
+#ifdef CONFIG_RSBAC
+	DEFINE(IA64_CLONE_KTHREAD, CLONE_KTHREAD);
+#endif
 
 	BLANK();
 	DEFINE(IA64_CPUINFO_NSEC_PER_CYC_OFFSET,
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/ia64/kernel/entry.S linux-2.6.23.14-rsbac-1.3.7/arch/ia64/kernel/entry.S
--- trunk/arch/ia64/kernel/entry.S	2008-02-13 16:30:17.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/ia64/kernel/entry.S	2008-02-13 13:35:07.000000000 +0100
@@ -1588,5 +1588,8 @@ sys_call_table:
 	data8 sys_signalfd
 	data8 sys_timerfd
 	data8 sys_eventfd
+#ifdef CONFIG_RSBAC
+	data8 sys_rsbac				// 1310
+#endif
 
 	.org sys_call_table + 8*NR_syscalls	// guard against failures to increase NR_syscalls
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/ia64/kernel/process.c linux-2.6.23.14-rsbac-1.3.7/arch/ia64/kernel/process.c
--- trunk/arch/ia64/kernel/process.c	2008-02-13 16:30:14.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/ia64/kernel/process.c	2008-02-13 13:35:01.000000000 +0100
@@ -48,6 +48,11 @@
 # include <asm/perfmon.h>
 #endif
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 #include "sigframe.h"
 
 void (*ia64_mark_idle)(int);
@@ -691,6 +696,11 @@ kernel_thread (int (*fn)(void *), void *
 		struct pt_regs pt;
 	} regs;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        int rsbac_retval;
+        #endif
+
 	memset(&regs, 0, sizeof(regs));
 	regs.pt.cr_iip = helper_fptr[0];	/* set entry point (IP) */
 	regs.pt.r1 = helper_fptr[1];		/* set GP */
@@ -702,7 +712,14 @@ kernel_thread (int (*fn)(void *), void *
 	regs.sw.ar_fpsr = regs.pt.ar_fpsr = ia64_getreg(_IA64_REG_AR_FPSR);
 	regs.sw.ar_bspstore = (unsigned long) current + IA64_RBS_OFFSET;
 	regs.sw.pr = (1 << PRED_KERNEL_STACK);
+        #ifdef CONFIG_RSBAC
+	rsbac_retval = do_fork(flags | CLONE_VM | CLONE_UNTRACED | CLONE_KTHREAD, 0, &regs.pt, 0, NULL, NULL);
+	if(rsbac_retval > 0)
+	  rsbac_kthread_notify(rsbac_retval);
+	return rsbac_retval;
+        #else
 	return do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs.pt, 0, NULL, NULL);
+	#endif
 }
 EXPORT_SYMBOL(kernel_thread);
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/ia64/kernel/ptrace.c linux-2.6.23.14-rsbac-1.3.7/arch/ia64/kernel/ptrace.c
--- trunk/arch/ia64/kernel/ptrace.c	2008-02-13 16:30:16.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/ia64/kernel/ptrace.c	2008-02-13 13:35:07.000000000 +0100
@@ -31,6 +31,8 @@
 
 #include "entry.h"
 
+#include <rsbac/hooks.h>
+
 /*
  * Bits in the PSR that we allow ptrace() to change:
  *	be, up, ac, mfl, mfh (the user mask; five bits total)
@@ -1423,6 +1425,11 @@ sys_ptrace (long request, pid_t pid, uns
 	struct switch_stack *sw;
 	long ret;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	lock_kernel();
 	ret = -EPERM;
 	if (request == PTRACE_TRACEME) {
@@ -1451,6 +1458,22 @@ sys_ptrace (long request, pid_t pid, uns
 	if (pid == 1)		/* no messing around with init! */
 		goto out_tsk;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = pid;
+	rsbac_attribute_value.trace_request = request;
+	if (!rsbac_adf_request(R_TRACE,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_trace_request,
+				rsbac_attribute_value))
+	{
+		ret = -EPERM;
+		goto out_tsk;
+	}
+#endif
+
 	if (request == PTRACE_ATTACH) {
 		ret = ptrace_attach(child);
 		goto out_tsk;
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/m32r/kernel/process.c linux-2.6.23.14-rsbac-1.3.7/arch/m32r/kernel/process.c
--- trunk/arch/m32r/kernel/process.c	2008-02-13 16:28:54.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/m32r/kernel/process.c	2008-02-13 13:31:18.000000000 +0100
@@ -211,7 +211,11 @@ int kernel_thread(int (*fn)(void *), voi
 	regs.psw = M32R_PSW_BIE;
 
 	/* Ok, create the new process. */
+#ifdef CONFIG_RSBAC
+	return do_fork(flags | CLONE_VM | CLONE_UNTRACED | CLONE_KTHREAD, 0, &regs, 0, NULL,
+#else
 	return do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs, 0, NULL,
+#endif
 		NULL);
 }
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/m32r/kernel/ptrace.c linux-2.6.23.14-rsbac-1.3.7/arch/m32r/kernel/ptrace.c
--- trunk/arch/m32r/kernel/ptrace.c	2008-02-13 16:28:54.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/m32r/kernel/ptrace.c	2008-02-13 13:31:18.000000000 +0100
@@ -34,6 +34,8 @@
 #include <asm/processor.h>
 #include <asm/mmu_context.h>
 
+#include <rsbac/hooks.h>
+
 /*
  * This routine will get a word off of the process kernel stack.
  */
@@ -733,8 +735,28 @@ asmlinkage long sys_ptrace(long request,
 	struct task_struct *child;
 	int ret;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
+#ifdef CONFIG_RSBAC
+		rsbac_pr_debug(aef, "calling ADF\n");
+		rsbac_target_id.process = current->pid;
+		rsbac_attribute_value.trace_request = request;
+		if (!rsbac_adf_request(R_TRACE,
+					current->pid,
+					T_PROCESS,
+					rsbac_target_id,
+					A_trace_request,
+					rsbac_attribute_value))
+		{
+			ret = -EPERM;
+			goto out;
+		}
+#endif
 		ret = ptrace_traceme();
 		goto out;
 	}
@@ -745,6 +767,22 @@ asmlinkage long sys_ptrace(long request,
 		goto out;
 	}
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = pid;
+	rsbac_attribute_value.trace_request = request;
+	if (!rsbac_adf_request(R_TRACE,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_trace_request,
+				rsbac_attribute_value))
+	{
+		ret = -EPERM;
+		goto out_tsk;
+	}
+#endif
+
 	if (request == PTRACE_ATTACH) {
 		ret = ptrace_attach(child);
 		if (ret == 0)
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/m68k/Kconfig linux-2.6.23.14-rsbac-1.3.7/arch/m68k/Kconfig
--- trunk/arch/m68k/Kconfig	2008-02-13 16:29:03.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/m68k/Kconfig	2008-02-13 13:31:42.000000000 +0100
@@ -468,6 +468,8 @@ source "drivers/zorro/Kconfig"
 
 endmenu
 
+source "rsbac/Kconfig"
+
 source "net/Kconfig"
 
 source "drivers/Kconfig"
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/m68k/kernel/entry.S linux-2.6.23.14-rsbac-1.3.7/arch/m68k/kernel/entry.S
--- trunk/arch/m68k/kernel/entry.S	2008-02-13 16:29:02.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/m68k/kernel/entry.S	2008-02-13 13:31:41.000000000 +0100
@@ -746,3 +746,10 @@ sys_call_table:
 	.long sys_eventfd
 	.long sys_fallocate		/* 320 */
 
+#ifdef CONFIG_RSBAC
+	/* we use 300, until sys_security gets defined here */
+	.rept 299-281
+		.long sys_ni_syscall
+	.endr
+	.long sys_rsbac
+#endif
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/m68k/kernel/process.c linux-2.6.23.14-rsbac-1.3.7/arch/m68k/kernel/process.c
--- trunk/arch/m68k/kernel/process.c	2008-02-13 16:29:02.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/m68k/kernel/process.c	2008-02-13 13:31:40.000000000 +0100
@@ -35,6 +35,11 @@
 #include <asm/setup.h>
 #include <asm/pgtable.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 /*
  * Initial task/thread structure. Make this a per-architecture thing,
  * because different architectures tend to have different
@@ -160,7 +165,11 @@ int kernel_thread(int (*fn)(void *), voi
 
 	{
 	register long retval __asm__ ("d0");
+#ifdef CONFIG_RSBAC
+	register long clone_arg __asm__ ("d1") = flags | CLONE_VM | CLONE_UNTRACED | CLONE_KTHREAD;
+#else
 	register long clone_arg __asm__ ("d1") = flags | CLONE_VM | CLONE_UNTRACED;
+#endif
 
 	retval = __NR_clone;
 	__asm__ __volatile__
@@ -186,6 +195,12 @@ int kernel_thread(int (*fn)(void *), voi
 	}
 
 	set_fs (fs);
+
+        #ifdef CONFIG_RSBAC
+	if(pid > 0)
+	  rsbac_kthread_notify(pid);
+        #endif
+
 	return pid;
 }
 EXPORT_SYMBOL(kernel_thread);
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/m68knommu/kernel/process.c linux-2.6.23.14-rsbac-1.3.7/arch/m68knommu/kernel/process.c
--- trunk/arch/m68knommu/kernel/process.c	2008-02-13 16:29:59.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/m68knommu/kernel/process.c	2008-02-13 13:34:30.000000000 +0100
@@ -37,6 +37,11 @@
 #include <asm/setup.h>
 #include <asm/pgtable.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 asmlinkage void ret_from_fork(void);
 
 /*
@@ -123,7 +128,11 @@ void show_regs(struct pt_regs * regs)
 int kernel_thread(int (*fn)(void *), void * arg, unsigned long flags)
 {
 	int retval;
+#ifdef CONFIG_RSBAC
+	long clone_arg = flags | CLONE_VM | CLONE_KTHREAD;
+#else
 	long clone_arg = flags | CLONE_VM;
+#endif
 	mm_segment_t fs;
 
 	fs = get_fs();
@@ -151,6 +160,12 @@ int kernel_thread(int (*fn)(void *), voi
 		: "cc", "%d0", "%d1", "%d2");
 
 	set_fs(fs);
+
+        #ifdef CONFIG_RSBAC
+	if(retval > 0)
+	  rsbac_kthread_notify(retval);
+        #endif
+
 	return retval;
 }
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/mips/Kconfig linux-2.6.23.14-rsbac-1.3.7/arch/mips/Kconfig
--- trunk/arch/mips/Kconfig	2008-02-13 16:30:25.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/mips/Kconfig	2008-02-13 13:35:25.000000000 +0100
@@ -1904,6 +1904,8 @@ config BINFMT_ELF32
 
 endmenu
 
+source "rsbac/Kconfig"
+
 menu "Power management options"
 
 source "kernel/power/Kconfig"
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/mips/kernel/process.c linux-2.6.23.14-rsbac-1.3.7/arch/mips/kernel/process.c
--- trunk/arch/mips/kernel/process.c	2008-02-13 16:30:26.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/mips/kernel/process.c	2008-02-13 13:35:26.000000000 +0100
@@ -43,6 +43,11 @@
 #include <asm/inst.h>
 #include <asm/stacktrace.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 /*
  * The idle thread. There's no useful work to be done, so just try to conserve
  * power and have a low exit latency (ie sit in a loop waiting for somebody to
@@ -223,6 +228,7 @@ static void __noreturn kernel_thread_hel
 long kernel_thread(int (*fn)(void *), void *arg, unsigned long flags)
 {
 	struct pt_regs regs;
+	int retval;
 
 	memset(&regs, 0, sizeof(regs));
 
@@ -238,7 +244,14 @@ long kernel_thread(int (*fn)(void *), vo
 #endif
 
 	/* Ok, create the new process.. */
-	return do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);
+#ifdef CONFIG_RSBAC
+	retval = do_fork(flags | CLONE_VM | CLONE_UNTRACED | CLONE_KTHREAD, 0, &regs, 0, NULL, NULL);
+	if(retval > 0)
+	  rsbac_kthread_notify(retval);
+#else
+	retval = do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);
+#endif
+        return retval;
 }
 
 /*
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/mips/kernel/scall32-o32.S linux-2.6.23.14-rsbac-1.3.7/arch/mips/kernel/scall32-o32.S
--- trunk/arch/mips/kernel/scall32-o32.S	2008-02-13 16:30:28.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/mips/kernel/scall32-o32.S	2008-02-13 13:35:30.000000000 +0100
@@ -552,7 +552,11 @@ einval:	li	v0, -EINVAL
 	sys	sys_madvise		3
 	sys	sys_getdents64		3
 	sys	sys_fcntl64		3	/* 4220 */
+#ifdef CONFIG_RSBAC
+	sys	sys_rsbac		2	/* Security */
+#else
 	sys	sys_ni_syscall		0
+#endif
 	sys	sys_gettid		0
 	sys	sys_readahead		5
 	sys	sys_setxattr		5
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/mips/kernel/scall64-64.S linux-2.6.23.14-rsbac-1.3.7/arch/mips/kernel/scall64-64.S
--- trunk/arch/mips/kernel/scall64-64.S	2008-02-13 16:30:26.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/mips/kernel/scall64-64.S	2008-02-13 13:35:26.000000000 +0100
@@ -375,7 +375,11 @@ sys_call_table:
 	PTR	sys_ni_syscall			/* res. for getpmsg */
 	PTR	sys_ni_syscall			/* 5175  for putpmsg */
 	PTR	sys_ni_syscall			/* res. for afs_syscall */
+#ifdef CONFIG_RSBAC
+	PTR	sys_rsbac			/* Security */
+#else
 	PTR	sys_ni_syscall			/* res. for security */
+#endif
 	PTR	sys_gettid
 	PTR	sys_readahead
 	PTR	sys_setxattr			/* 5180 */
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/mips/kernel/scall64-o32.S linux-2.6.23.14-rsbac-1.3.7/arch/mips/kernel/scall64-o32.S
--- trunk/arch/mips/kernel/scall64-o32.S	2008-02-13 16:30:26.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/mips/kernel/scall64-o32.S	2008-02-13 13:35:27.000000000 +0100
@@ -426,7 +426,11 @@ sys_call_table:
 	PTR	sys_madvise
 	PTR	sys_getdents64
 	PTR	compat_sys_fcntl64		/* 4220 */
+#ifdef CONFIG_RSBAC
+	PTR	sys_rsbac			/* Security */
+#else
 	PTR	sys_ni_syscall
+#endif
 	PTR	sys_gettid
 	PTR	sys32_readahead
 	PTR	sys_setxattr
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/parisc/Kconfig linux-2.6.23.14-rsbac-1.3.7/arch/parisc/Kconfig
--- trunk/arch/parisc/Kconfig	2008-02-13 16:28:10.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/parisc/Kconfig	2008-02-13 13:29:38.000000000 +0100
@@ -252,6 +252,8 @@ config NR_CPUS
 endmenu
 
 
+source "rsbac/Kconfig"
+
 source "drivers/parisc/Kconfig"
 
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/parisc/kernel/process.c linux-2.6.23.14-rsbac-1.3.7/arch/parisc/kernel/process.c
--- trunk/arch/parisc/kernel/process.c	2008-02-13 16:28:10.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/parisc/kernel/process.c	2008-02-13 13:29:39.000000000 +0100
@@ -55,6 +55,10 @@
 #include <asm/uaccess.h>
 #include <asm/unwind.h>
 
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 /*
  * The idle thread. There's no useful work to be
  * done, so just try to conserve power and have a
@@ -168,13 +172,25 @@ EXPORT_SYMBOL(pm_power_off);
 extern pid_t __kernel_thread(int (*fn)(void *), void *arg, unsigned long flags);
 pid_t kernel_thread(int (*fn)(void *), void *arg, unsigned long flags)
 {
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        pid_t rsbac_retval;
+        #endif
 
 	/*
 	 * FIXME: Once we are sure we don't need any debug here,
 	 *	  kernel_thread can become a #define.
 	 */
 
+	/* Ok, create the new process.. */
+        #ifdef CONFIG_RSBAC
+	rsbac_retval = __kernel_thread(fn, arg, flags | CLONE_KTHREAD);
+	if(rsbac_retval > 0)
+	  rsbac_kthread_notify(rsbac_retval);
+	return rsbac_retval;
+        #else
 	return __kernel_thread(fn, arg, flags);
+	#endif
 }
 EXPORT_SYMBOL(kernel_thread);
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/parisc/kernel/syscall_table.S linux-2.6.23.14-rsbac-1.3.7/arch/parisc/kernel/syscall_table.S
--- trunk/arch/parisc/kernel/syscall_table.S	2008-02-13 16:28:11.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/parisc/kernel/syscall_table.S	2008-02-13 13:29:40.000000000 +0100
@@ -403,6 +403,9 @@
 	ENTRY_COMP(signalfd)
 	ENTRY_COMP(timerfd)
 	ENTRY_SAME(eventfd)
+#ifdef CONFIG_RSBAC
+	ENTRY_SAME(rsbac)		/* 305 */
+#endif
 
 	/* Nothing yet */
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/powerpc/Kconfig linux-2.6.23.14-rsbac-1.3.7/arch/powerpc/Kconfig
--- trunk/arch/powerpc/Kconfig	2008-02-13 16:27:01.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/powerpc/Kconfig	2008-02-13 13:27:48.000000000 +0100
@@ -622,6 +622,8 @@ config KERNEL_START
 	default "0xc000000000000000"
 endif
 
+source "rsbac/Kconfig"
+
 source "net/Kconfig"
 
 source "drivers/Kconfig"
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/powerpc/kernel/asm-offsets.c linux-2.6.23.14-rsbac-1.3.7/arch/powerpc/kernel/asm-offsets.c
--- trunk/arch/powerpc/kernel/asm-offsets.c	2008-02-13 16:27:03.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/powerpc/kernel/asm-offsets.c	2008-02-13 13:27:50.000000000 +0100
@@ -250,6 +250,9 @@ int main(void)
 
 	DEFINE(CLONE_VM, CLONE_VM);
 	DEFINE(CLONE_UNTRACED, CLONE_UNTRACED);
+#ifdef CONFIG_RSBAC
+	DEFINE(CLONE_KTHREAD, CLONE_KTHREAD);
+#endif
 
 #ifndef CONFIG_PPC64
 	DEFINE(MM_PGD, offsetof(struct mm_struct, pgd));
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/powerpc/kernel/misc_32.S linux-2.6.23.14-rsbac-1.3.7/arch/powerpc/kernel/misc_32.S
--- trunk/arch/powerpc/kernel/misc_32.S	2008-02-13 16:27:06.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/powerpc/kernel/misc_32.S	2008-02-13 13:27:51.000000000 +0100
@@ -30,6 +30,9 @@
 #include <asm/processor.h>
 #include <asm/kexec.h>
 
+#ifdef CONFIG_RSBAC
+#define CLONE_KTHREAD           0x10000000      /* clone a kernel thread */
+#endif
 	.text
 
 /*
@@ -755,7 +758,11 @@ _GLOBAL(kernel_thread)
 	mr	r30,r3		/* function */
 	mr	r31,r4		/* argument */
 	ori	r3,r5,CLONE_VM	/* flags */
+#ifdef CONFIG_RSBAC
+	oris	r3,r3,(CLONE_UNTRACED|CLONE_KTHREAD)>>16
+#else
 	oris	r3,r3,CLONE_UNTRACED>>16
+#endif
 	li	r4,0		/* new sp (unused) */
 	li	r0,__NR_clone
 	sc
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/powerpc/kernel/misc_64.S linux-2.6.23.14-rsbac-1.3.7/arch/powerpc/kernel/misc_64.S
--- trunk/arch/powerpc/kernel/misc_64.S	2008-02-13 16:27:06.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/powerpc/kernel/misc_64.S	2008-02-13 13:27:52.000000000 +0100
@@ -25,6 +25,10 @@
 #include <asm/cputable.h>
 #include <asm/thread_info.h>
 
+#ifdef CONFIG_RSBAC
+#define CLONE_KTHREAD           0x10000000      /* clone a kernel thread */
+#endif
+
 	.text
 
 _GLOBAL(get_msr)
@@ -434,7 +438,11 @@ _GLOBAL(kernel_thread)
 	mr	r29,r3
 	mr	r30,r4
 	ori	r3,r5,CLONE_VM	/* flags */
+#ifdef CONFIG_RSBAC
+	oris    r3,r3,(CLONE_UNTRACED|CLONE_KTHREAD)>>16
+#else
 	oris	r3,r3,(CLONE_UNTRACED>>16)
+#endif
 	li	r4,0		/* new sp (unused) */
 	li	r0,__NR_clone
 	sc
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/powerpc/kernel/sys_ppc32.c linux-2.6.23.14-rsbac-1.3.7/arch/powerpc/kernel/sys_ppc32.c
--- trunk/arch/powerpc/kernel/sys_ppc32.c	2008-02-13 16:27:06.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/powerpc/kernel/sys_ppc32.c	2008-02-13 13:27:52.000000000 +0100
@@ -62,6 +62,9 @@ struct old_linux_dirent32 {
 
 struct readdir_callback32 {
 	struct old_linux_dirent32 __user * dirent;
+#ifdef CONFIG_RSBAC_FSOBJ_HIDE
+	struct file * file;
+#endif
 	int count;
 };
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/ppc/Kconfig linux-2.6.23.14-rsbac-1.3.7/arch/ppc/Kconfig
--- trunk/arch/ppc/Kconfig	2008-02-13 16:28:30.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/ppc/Kconfig	2008-02-13 13:30:22.000000000 +0100
@@ -1421,6 +1421,8 @@ config PIN_TLB
 	depends on ADVANCED_OPTIONS && 8xx
 endmenu
 
+source "rsbac/Kconfig"
+
 source "net/Kconfig"
 
 source "drivers/Kconfig"
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/ppc/kernel/asm-offsets.c linux-2.6.23.14-rsbac-1.3.7/arch/ppc/kernel/asm-offsets.c
--- trunk/arch/ppc/kernel/asm-offsets.c	2008-02-13 16:28:29.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/ppc/kernel/asm-offsets.c	2008-02-13 13:30:20.000000000 +0100
@@ -120,6 +120,9 @@ main(void)
 	DEFINE(TRAP, STACK_FRAME_OVERHEAD+offsetof(struct pt_regs, trap));
 	DEFINE(CLONE_VM, CLONE_VM);
 	DEFINE(CLONE_UNTRACED, CLONE_UNTRACED);
+#ifdef CONFIG_RSBAC
+	DEFINE(CLONE_KTHREAD, CLONE_KTHREAD);
+#endif
 	DEFINE(MM_PGD, offsetof(struct mm_struct, pgd));
 
 	/* About the CPU features table */
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/ppc/kernel/misc.S linux-2.6.23.14-rsbac-1.3.7/arch/ppc/kernel/misc.S
--- trunk/arch/ppc/kernel/misc.S	2008-02-13 16:28:29.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/ppc/kernel/misc.S	2008-02-13 13:30:19.000000000 +0100
@@ -858,7 +858,11 @@ _GLOBAL(kernel_thread)
 	mr	r30,r3		/* function */
 	mr	r31,r4		/* argument */
 	ori	r3,r5,CLONE_VM	/* flags */
+#ifdef CONFIG_RSBAC
+	oris	r3,r3,(CLONE_UNTRACED|CLONE_KTHREAD)>>16
+#else
 	oris	r3,r3,CLONE_UNTRACED>>16
+#endif
 	li	r4,0		/* new sp (unused) */
 	li	r0,__NR_clone
 	sc
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/s390/Kconfig linux-2.6.23.14-rsbac-1.3.7/arch/s390/Kconfig
--- trunk/arch/s390/Kconfig	2008-02-13 16:29:40.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/s390/Kconfig	2008-02-13 13:33:23.000000000 +0100
@@ -517,6 +517,8 @@ config ZFCPDUMP
 
 endmenu
 
+source "rsbac/Kconfig"
+
 source "net/Kconfig"
 
 config PCMCIA
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/s390/kernel/process.c linux-2.6.23.14-rsbac-1.3.7/arch/s390/kernel/process.c
--- trunk/arch/s390/kernel/process.c	2008-02-13 16:29:41.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/s390/kernel/process.c	2008-02-13 13:33:26.000000000 +0100
@@ -45,6 +45,11 @@
 #include <asm/irq.h>
 #include <asm/timer.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 asmlinkage void ret_from_fork(void) asm ("ret_from_fork");
 
 /*
@@ -189,6 +194,11 @@ int kernel_thread(int (*fn)(void *), voi
 {
 	struct pt_regs regs;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        int rsbac_retval;
+        #endif
+
 	memset(&regs, 0, sizeof(regs));
 	regs.psw.mask = psw_kernel_bits | PSW_MASK_IO | PSW_MASK_EXT;
 	regs.psw.addr = (unsigned long) kernel_thread_starter | PSW_ADDR_AMODE;
@@ -198,8 +208,15 @@ int kernel_thread(int (*fn)(void *), voi
 	regs.orig_gpr2 = -1;
 
 	/* Ok, create the new process.. */
+        #ifdef CONFIG_RSBAC
+	rsbac_retval = do_fork(flags | CLONE_VM | CLONE_UNTRACED | CLONE_KTHREAD, 0, &regs, 0, NULL, NULL);
+	if(rsbac_retval > 0)
+	  rsbac_kthread_notify(rsbac_retval);
+	return rsbac_retval;
+        #else
 	return do_fork(flags | CLONE_VM | CLONE_UNTRACED,
 		       0, &regs, 0, NULL, NULL);
+	#endif
 }
 
 /*
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/s390/kernel/ptrace.c linux-2.6.23.14-rsbac-1.3.7/arch/s390/kernel/ptrace.c
--- trunk/arch/s390/kernel/ptrace.c	2008-02-13 16:29:42.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/s390/kernel/ptrace.c	2008-02-13 13:33:29.000000000 +0100
@@ -46,6 +46,8 @@
 #include "compat_ptrace.h"
 #endif
 
+#include <rsbac/hooks.h>
+
 static void
 FixPerRegisters(struct task_struct *task)
 {
@@ -706,6 +708,11 @@ sys_ptrace(long request, long pid, long 
 	struct task_struct *child;
 	int ret;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
 		 ret = ptrace_traceme();
@@ -718,6 +725,23 @@ sys_ptrace(long request, long pid, long 
 		goto out;
 	}
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = pid;
+	rsbac_attribute_value.trace_request = request;
+	if (!rsbac_adf_request(R_TRACE,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_trace_request,
+				rsbac_attribute_value))
+	{
+		ret = -EPERM;
+		put_task_struct(child);
+		goto out;
+	}
+#endif
+
 	ret = do_ptrace(child, request, addr, data);
 	put_task_struct(child);
 out:
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/sh/Kconfig linux-2.6.23.14-rsbac-1.3.7/arch/sh/Kconfig
--- trunk/arch/sh/Kconfig	2008-02-13 16:31:04.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/sh/Kconfig	2008-02-13 13:36:50.000000000 +0100
@@ -729,6 +729,8 @@ source "net/Kconfig"
 
 source "drivers/Kconfig"
 
+source "rsbac/Kconfig"
+
 source "fs/Kconfig"
 
 source "arch/sh/oprofile/Kconfig"
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/sh/kernel/process.c linux-2.6.23.14-rsbac-1.3.7/arch/sh/kernel/process.c
--- trunk/arch/sh/kernel/process.c	2008-02-13 16:31:07.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/sh/kernel/process.c	2008-02-13 13:36:56.000000000 +0100
@@ -25,6 +25,10 @@
 #include <asm/system.h>
 #include <asm/ubc.h>
 
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 static int hlt_counter;
 int ubc_usercnt = 0;
 
@@ -173,6 +177,11 @@ int kernel_thread(int (*fn)(void *), voi
 {
 	struct pt_regs regs;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        int rsbac_retval;
+        #endif
+
 	memset(&regs, 0, sizeof(regs));
 	regs.regs[4] = (unsigned long)arg;
 	regs.regs[5] = (unsigned long)fn;
@@ -181,8 +190,16 @@ int kernel_thread(int (*fn)(void *), voi
 	regs.sr = (1 << 30);
 
 	/* Ok, create the new process.. */
+#ifdef CONFIG_RSBAC
+	rsbac_retval = do_fork(flags | CLONE_VM | CLONE_UNTRACED | CLONE_KTHREAD,
+			0, &regs, 0, NULL, NULL);
+	if(rsbac_retval > 0)
+		rsbac_kthread_notify(rsbac_retval);
+	return rsbac_retval;
+#else
 	return do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0,
-		       &regs, 0, NULL, NULL);
+			&regs, 0, NULL, NULL);
+#endif
 }
 
 /*
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/sh/kernel/syscalls.S linux-2.6.23.14-rsbac-1.3.7/arch/sh/kernel/syscalls.S
--- trunk/arch/sh/kernel/syscalls.S	2008-02-13 16:31:07.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/sh/kernel/syscalls.S	2008-02-13 13:36:56.000000000 +0100
@@ -257,7 +257,11 @@ ENTRY(sys_call_table)
 	.long sys_getdents64	/* 220 */
 	.long sys_fcntl64
 	.long sys_ni_syscall	/* reserved for TUX */
+#ifdef CONFIG_RSBAC
+	.long sys_rsbac
+#else
 	.long sys_ni_syscall	/* Reserved for Security */
+#endif
 	.long sys_gettid
 	.long sys_readahead	/* 225 */
 	.long sys_setxattr
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/sh64/kernel/process.c linux-2.6.23.14-rsbac-1.3.7/arch/sh64/kernel/process.c
--- trunk/arch/sh64/kernel/process.c	2008-02-13 16:28:59.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/sh64/kernel/process.c	2008-02-13 13:31:31.000000000 +0100
@@ -401,7 +401,11 @@ int kernel_thread(int (*fn)(void *), voi
 	regs.pc = (unsigned long)kernel_thread_helper;
 	regs.sr = (1 << 30);
 
+#ifdef CONFIG_RSBAC
+	return do_fork(flags | CLONE_VM | CLONE_UNTRACED | KERNEL_THREAD, 0,
+#else
 	return do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0,
+#endif
 		       &regs, 0, NULL, NULL);
 }
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/sparc/Kconfig linux-2.6.23.14-rsbac-1.3.7/arch/sparc/Kconfig
--- trunk/arch/sparc/Kconfig	2008-02-13 16:30:53.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/sparc/Kconfig	2008-02-13 13:36:26.000000000 +0100
@@ -262,6 +262,8 @@ source "mm/Kconfig"
 
 endmenu
 
+source "rsbac/Kconfig"
+
 source "net/Kconfig"
 
 source "drivers/Kconfig"
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/sparc/kernel/process.c linux-2.6.23.14-rsbac-1.3.7/arch/sparc/kernel/process.c
--- trunk/arch/sparc/kernel/process.c	2008-02-13 16:30:54.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/sparc/kernel/process.c	2008-02-13 13:36:27.000000000 +0100
@@ -42,6 +42,11 @@
 #include <asm/prom.h>
 #include <asm/unistd.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 /* 
  * Power management idle function 
  * Set in pm platform drivers (apc.c and pmc.c)
@@ -707,9 +712,19 @@ pid_t kernel_thread(int (*fn)(void *), v
 			     /* Notreached by child. */
 			     "1: mov %%o0, %0\n\t" :
 			     "=r" (retval) :
+#ifdef CONFIG_RSBAC
+			     "i" (__NR_clone), "r" (flags | CLONE_VM | CLONE_UNTRACED | CLONE_KTHREAD),
+#else
 			     "i" (__NR_clone), "r" (flags | CLONE_VM | CLONE_UNTRACED),
+#endif
 			     "i" (__NR_exit),  "r" (fn), "r" (arg) :
 			     "g1", "g2", "g3", "o0", "o1", "memory", "cc");
+
+        #ifdef CONFIG_RSBAC
+	if(retval > 0)
+	  rsbac_kthread_notify(retval);
+        #endif
+
 	return retval;
 }
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/sparc/kernel/ptrace.c linux-2.6.23.14-rsbac-1.3.7/arch/sparc/kernel/ptrace.c
--- trunk/arch/sparc/kernel/ptrace.c	2008-02-13 16:30:55.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/sparc/kernel/ptrace.c	2008-02-13 13:36:31.000000000 +0100
@@ -24,6 +24,8 @@
 #include <asm/system.h>
 #include <asm/uaccess.h>
 
+#include <rsbac/hooks.h>
+
 #define MAGIC_CONSTANT 0x80000000
 
 
@@ -268,6 +270,11 @@ asmlinkage void do_ptrace(struct pt_regs
 	struct task_struct *child;
 	int ret;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	lock_kernel();
 #ifdef DEBUG_PTRACE
 	{
@@ -303,6 +310,23 @@ asmlinkage void do_ptrace(struct pt_regs
 		goto out;
 	}
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = pid;
+	rsbac_attribute_value.trace_request = request;
+	if (!rsbac_adf_request(R_TRACE,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_trace_request,
+				rsbac_attribute_value))
+	{
+		pt_error_return(regs, EPERM);
+		ret = -EPERM;
+		goto out_tsk;
+	}
+#endif
+
 	if ((current->personality == PER_SUNOS && request == PTRACE_SUNATTACH)
 	    || (current->personality != PER_SUNOS && request == PTRACE_ATTACH)) {
 		if (ptrace_attach(child)) {
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/sparc/kernel/systbls.S linux-2.6.23.14-rsbac-1.3.7/arch/sparc/kernel/systbls.S
--- trunk/arch/sparc/kernel/systbls.S	2008-02-13 16:30:55.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/sparc/kernel/systbls.S	2008-02-13 13:36:31.000000000 +0100
@@ -48,7 +48,13 @@ sys_call_table:
 /*145*/	.long sys_setrlimit, sys_pivot_root, sys_prctl, sys_pciconfig_read, sys_pciconfig_write
 /*150*/	.long sys_nis_syscall, sys_inotify_init, sys_inotify_add_watch, sys_poll, sys_getdents64
 /*155*/	.long sys_fcntl64, sys_inotify_rm_watch, sys_statfs, sys_fstatfs, sys_oldumount
+
+#ifdef CONFIG_RSBAC /* we use 164, which seems to be unused */
+/*160*/	.long sys_sched_setaffinity, sys_sched_getaffinity, sys_getdomainname, sys_setdomainname, sys_rsbac
+#else
 /*160*/	.long sys_sched_setaffinity, sys_sched_getaffinity, sys_getdomainname, sys_setdomainname, sys_nis_syscall
+#endif
+
 /*165*/	.long sys_quotactl, sys_set_tid_address, sys_mount, sys_ustat, sys_setxattr
 /*170*/	.long sys_lsetxattr, sys_fsetxattr, sys_getxattr, sys_lgetxattr, sys_getdents
 /*175*/	.long sys_setsid, sys_fchdir, sys_fgetxattr, sys_listxattr, sys_llistxattr
@@ -143,7 +149,11 @@ sunos_sys_table:
 	.long sunos_getdirentries, sys_statfs, sys_fstatfs
 	.long sys_oldumount, sunos_nosys, sunos_nosys
 	.long sys_getdomainname, sys_setdomainname
+#ifdef CONFIG_RSBAC
+	.long sys_rsbac, sys_quotactl, sunos_nosys
+#else
 	.long sunos_nosys, sys_quotactl, sunos_nosys
+#endif
 	.long sunos_mount, sys_ustat, sunos_semsys
 	.long sunos_msgsys, sunos_shmsys, sunos_audit
 	.long sunos_nosys, sunos_getdents, sys_setsid
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/sparc64/Kconfig linux-2.6.23.14-rsbac-1.3.7/arch/sparc64/Kconfig
--- trunk/arch/sparc64/Kconfig	2008-02-13 16:28:46.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/sparc64/Kconfig	2008-02-13 13:31:04.000000000 +0100
@@ -450,6 +450,8 @@ config CMDLINE
 
 	  NOTE: This option WILL override the PROM bootargs setting!
 
+source "rsbac/Kconfig"
+
 source "net/Kconfig"
 
 source "drivers/Kconfig"
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/sparc64/kernel/process.c linux-2.6.23.14-rsbac-1.3.7/arch/sparc64/kernel/process.c
--- trunk/arch/sparc64/kernel/process.c	2008-02-13 16:28:47.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/sparc64/kernel/process.c	2008-02-13 13:31:05.000000000 +0100
@@ -49,6 +49,11 @@
 #include <asm/hypervisor.h>
 #include <asm/sstate.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 /* #define VERBOSE_SHOWREGS */
 
 static void sparc64_yield(int cpu)
@@ -719,9 +724,19 @@ pid_t kernel_thread(int (*fn)(void *), v
 			     /* Notreached by child. */
 			     "1:" :
 			     "=r" (retval) :
+#ifdef CONFIG_RSBAC
+			     "i" (__NR_clone), "r" (flags | CLONE_VM | CLONE_UNTRACED | CLONE_KTHREAD),
+#else
 			     "i" (__NR_clone), "r" (flags | CLONE_VM | CLONE_UNTRACED),
+#endif
 			     "i" (__NR_exit),  "r" (fn), "r" (arg) :
 			     "g1", "g2", "g3", "o0", "o1", "memory", "cc");
+
+        #ifdef CONFIG_RSBAC
+	if(retval > 0)
+	  rsbac_kthread_notify(retval);
+        #endif
+
 	return retval;
 }
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/sparc64/kernel/ptrace.c linux-2.6.23.14-rsbac-1.3.7/arch/sparc64/kernel/ptrace.c
--- trunk/arch/sparc64/kernel/ptrace.c	2008-02-13 16:28:49.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/sparc64/kernel/ptrace.c	2008-02-13 13:31:09.000000000 +0100
@@ -33,6 +33,8 @@
 #include <asm/page.h>
 #include <asm/cpudata.h>
 
+#include <rsbac/hooks.h>
+
 /* Returning from ptrace is a bit tricky because the syscall return
  * low level code assumes any value returned which is negative and
  * is a valid errno will mean setting the condition codes to indicate
@@ -177,6 +179,11 @@ asmlinkage void do_ptrace(struct pt_regs
 	struct task_struct *child;
 	int ret;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (test_thread_flag(TIF_32BIT)) {
 		addr &= 0xffffffffUL;
 		data &= 0xffffffffUL;
@@ -216,6 +223,22 @@ asmlinkage void do_ptrace(struct pt_regs
 		goto out;
 	}
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = pid;
+	rsbac_attribute_value.trace_request = request;
+	if (!rsbac_adf_request(R_TRACE,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_trace_request,
+				rsbac_attribute_value))
+	{
+		pt_error_return(regs, EPERM);
+		goto out_tsk;
+	}
+#endif
+
 	if ((current->personality == PER_SUNOS && request == PTRACE_SUNATTACH)
 	    || (current->personality != PER_SUNOS && request == PTRACE_ATTACH)) {
 		if (ptrace_attach(child)) {
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/sparc64/kernel/systbls.S linux-2.6.23.14-rsbac-1.3.7/arch/sparc64/kernel/systbls.S
--- trunk/arch/sparc64/kernel/systbls.S	2008-02-13 16:28:48.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/sparc64/kernel/systbls.S	2008-02-13 13:31:06.000000000 +0100
@@ -62,7 +62,11 @@ sys_call_table32:
 	.word sys32_readahead, sys32_socketcall, sys32_syslog, sys32_lookup_dcookie, sys32_fadvise64
 /*210*/	.word sys32_fadvise64_64, sys32_tgkill, sys32_waitpid, sys_swapoff, compat_sys_sysinfo
 	.word compat_sys_ipc, sys32_sigreturn, sys_clone, sys32_ioprio_get, compat_sys_adjtimex
+#ifdef CONFIG_RSBAC
+/*220*/	.word sys32_sigprocmask, sys_rsbac, sys32_delete_module, sys_ni_syscall, sys32_getpgid
+#else
 /*220*/	.word sys32_sigprocmask, sys_ni_syscall, sys32_delete_module, sys_ni_syscall, sys32_getpgid
+#endif
 	.word sys32_bdflush, sys32_sysfs, sys_nis_syscall, sys32_setfsuid16, sys32_setfsgid16
 /*230*/	.word sys32_select, compat_sys_time, sys32_splice, compat_sys_stime, compat_sys_statfs64
 	.word compat_sys_fstatfs64, sys_llseek, sys_mlock, sys_munlock, sys32_mlockall
@@ -134,7 +138,11 @@ sys_call_table:
 	.word sys_readahead, sys_socketcall, sys_syslog, sys_lookup_dcookie, sys_fadvise64
 /*210*/	.word sys_fadvise64_64, sys_tgkill, sys_waitpid, sys_swapoff, sys_sysinfo
 	.word sys_ipc, sys_nis_syscall, sys_clone, sys_ioprio_get, sys_adjtimex
+#ifdef CONFIG_RSBAC
+/*220*/	.word sys_nis_syscall, sys_rsbac, sys_delete_module, sys_ni_syscall, sys_getpgid
+#else
 /*220*/	.word sys_nis_syscall, sys_ni_syscall, sys_delete_module, sys_ni_syscall, sys_getpgid
+#endif
 	.word sys_bdflush, sys_sysfs, sys_nis_syscall, sys_setfsuid, sys_setfsgid
 /*230*/	.word sys_select, sys_nis_syscall, sys_splice, sys_stime, sys_statfs64
 	.word sys_fstatfs64, sys_llseek, sys_mlock, sys_munlock, sys_mlockall
@@ -233,7 +241,11 @@ sunos_sys_table:
 	.word sunos_nosys, sunos_nosys, sunos_nosys
 	.word sunos_nosys, sunos_nosys, sunos_nosys
 	.word sunos_nosys, sunos_nosys, sunos_nosys
+#ifdef CONFIG_RSBAC
+	.word sys_rsbac, sunos_nosys, sunos_nosys
+#else
 	.word sunos_nosys, sunos_nosys, sunos_nosys
+#endif
 	.word sunos_nosys, sunos_nosys, sunos_nosys
 	.word sunos_nosys, sunos_nosys, sunos_nosys
 	.word sunos_nosys, sunos_nosys, sunos_nosys
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/um/Kconfig linux-2.6.23.14-rsbac-1.3.7/arch/um/Kconfig
--- trunk/arch/um/Kconfig	2008-02-13 16:28:14.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/um/Kconfig	2008-02-13 13:29:50.000000000 +0100
@@ -300,6 +300,8 @@ endmenu
 
 source "init/Kconfig"
 
+source "rsbac/Kconfig"
+
 source "drivers/block/Kconfig"
 
 source "arch/um/Kconfig.char"
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/um/kernel/process.c linux-2.6.23.14-rsbac-1.3.7/arch/um/kernel/process.c
--- trunk/arch/um/kernel/process.c	2008-02-13 16:28:15.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/um/kernel/process.c	2008-02-13 13:29:51.000000000 +0100
@@ -94,7 +94,11 @@ int kernel_thread(int (*fn)(void *), voi
 
 	current->thread.request.u.thread.proc = fn;
 	current->thread.request.u.thread.arg = arg;
+#ifdef CONFIG_RSBAC
+	pid = do_fork(CLONE_VM | CLONE_UNTRACED | CLONE_KTHREAD | flags, 0,
+#else
 	pid = do_fork(CLONE_VM | CLONE_UNTRACED | flags, 0,
+#endif
 		      &current->thread.regs, 0, NULL, NULL);
 	return pid;
 }
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/v850/Kconfig linux-2.6.23.14-rsbac-1.3.7/arch/v850/Kconfig
--- trunk/arch/v850/Kconfig	2008-02-13 16:30:08.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/v850/Kconfig	2008-02-13 13:34:47.000000000 +0100
@@ -276,6 +276,10 @@ source "net/Kconfig"
 
 #############################################################################
 
+source "rsbac/Kconfig"
+
+#############################################################################
+
 source "drivers/base/Kconfig"
 
 source drivers/mtd/Kconfig
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/v850/kernel/entry.S linux-2.6.23.14-rsbac-1.3.7/arch/v850/kernel/entry.S
--- trunk/arch/v850/kernel/entry.S	2008-02-13 16:30:09.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/v850/kernel/entry.S	2008-02-13 13:34:50.000000000 +0100
@@ -1117,5 +1117,12 @@ C_DATA(sys_call_table):
 	.long CSYM(sys_pivot_root)	// 200
 	.long CSYM(sys_gettid)
 	.long CSYM(sys_tkill)
+#ifdef CONFIG_RSBAC
+	/* we use 230, until sys_security gets defined here */
+	.rept 229-202
+		.long CSYM(sys_ni_syscall)
+	.endr
+	.long CSYM(sys_rsbac)
+#endif
 sys_call_table_end:
 C_END(sys_call_table)
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/v850/kernel/process.c linux-2.6.23.14-rsbac-1.3.7/arch/v850/kernel/process.c
--- trunk/arch/v850/kernel/process.c	2008-02-13 16:30:08.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/v850/kernel/process.c	2008-02-13 13:34:48.000000000 +0100
@@ -28,6 +28,10 @@
 #include <asm/system.h>
 #include <asm/pgtable.h>
 
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 void (*pm_power_off)(void) = NULL;
 EXPORT_SYMBOL(pm_power_off);
 
@@ -82,7 +86,11 @@ int kernel_thread (int (*fn)(void *), vo
 	/* Clone this thread.  Note that we don't pass the clone syscall's
 	   second argument -- it's ignored for calls from kernel mode (the
 	   child's SP is always set to the top of the kernel stack).  */
+#ifdef CONFIG_RSBAC
+	arg0 = flags | CLONE_VM | CLONE_KTHREAD;
+#else
 	arg0 = flags | CLONE_VM;
+#endif
 	syscall = __NR_clone;
 	asm volatile ("trap " SYSCALL_SHORT_TRAP
 		      : "=r" (ret), "=r" (syscall)
@@ -102,6 +110,11 @@ int kernel_thread (int (*fn)(void *), vo
 	/* In parent.  */
 	set_fs (fs);
 
+        #ifdef CONFIG_RSBAC
+	if(ret > 0)
+	  rsbac_kthread_notify(ret);
+        #endif
+
 	return ret;
 }
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/x86_64/Kconfig linux-2.6.23.14-rsbac-1.3.7/arch/x86_64/Kconfig
--- trunk/arch/x86_64/Kconfig	2008-02-13 16:29:45.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/x86_64/Kconfig	2008-02-13 13:33:40.000000000 +0100
@@ -734,6 +734,7 @@ source "drivers/pci/hotplug/Kconfig"
 
 endmenu
 
+source "rsbac/Kconfig"
 
 menu "Executable file formats / Emulations"
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/x86_64/ia32/ia32entry.S linux-2.6.23.14-rsbac-1.3.7/arch/x86_64/ia32/ia32entry.S
--- trunk/arch/x86_64/ia32/ia32entry.S	2008-02-13 16:29:51.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/x86_64/ia32/ia32entry.S	2008-02-13 13:34:03.000000000 +0100
@@ -631,7 +631,11 @@ ia32_sys_call_table:
 	.quad compat_sys_getdents64	/* 220 getdents64 */
 	.quad compat_sys_fcntl64	
 	.quad quiet_ni_syscall		/* tux */
+#ifdef CONFIG_RSBAC
+	.quad sys_rsbac		/* security */
+#else
 	.quad quiet_ni_syscall    	/* security */
+#endif
 	.quad sys_gettid	
 	.quad sys32_readahead	/* 225 */
 	.quad sys_setxattr
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/x86_64/kernel/ioport.c linux-2.6.23.14-rsbac-1.3.7/arch/x86_64/kernel/ioport.c
--- trunk/arch/x86_64/kernel/ioport.c	2008-02-13 16:29:47.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/x86_64/kernel/ioport.c	2008-02-13 13:33:49.000000000 +0100
@@ -11,12 +11,15 @@
 #include <linux/errno.h>
 #include <linux/types.h>
 #include <linux/ioport.h>
+#include <linux/security.h>
 #include <linux/smp.h>
 #include <linux/stddef.h>
 #include <linux/slab.h>
 #include <linux/thread_info.h>
 #include <linux/syscalls.h>
 
+#include <rsbac/hooks.h>
+
 /* Set EXTENT bits starting at BASE in BITMAP to value TURN_ON. */
 static void set_bitmap(unsigned long *bitmap, unsigned int base, unsigned int extent, int new_value)
 {
@@ -39,11 +42,33 @@ asmlinkage long sys_ioperm(unsigned long
 	struct tss_struct * tss;
 	unsigned long *bitmap;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if ((from + num <= from) || (from + num > IO_BITMAP_BITS))
 		return -EINVAL;
 	if (turn_on && !capable(CAP_SYS_RAWIO))
 		return -EPERM;
 
+         /* RSBAC */
+         #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.scd = ST_ioports;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_PERMISSIONS_DATA,
+                               current->pid,
+                               T_SCD,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	/*
 	 * If it's the first ioperm() call in this thread's lifetime, set the
 	 * IO bitmap up. ioperm() is much less timing critical than clone(),
@@ -107,12 +132,34 @@ asmlinkage long sys_iopl(unsigned int le
 {
 	unsigned int old = (regs->eflags >> 12) & 3;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (level > 3)
 		return -EINVAL;
 	/* Trying to gain more privileges? */
 	if (level > old) {
 		if (!capable(CAP_SYS_RAWIO))
 			return -EPERM;
+
+	        /* RSBAC */
+	        #ifdef CONFIG_RSBAC
+	        rsbac_pr_debug(aef, "calling ADF\n");
+	        rsbac_target_id.scd = ST_ioports;
+	        rsbac_attribute_value.dummy = 0;
+	        if (!rsbac_adf_request(R_MODIFY_PERMISSIONS_DATA,
+	                               current->pid,
+	                               T_SCD,
+	                               rsbac_target_id,
+	                               A_none,
+	                               rsbac_attribute_value))
+	          {
+	            return -EPERM;
+	          }
+	        #endif
 	}
 	regs->eflags = (regs->eflags &~ X86_EFLAGS_IOPL) | (level << 12);
 	return 0;
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/x86_64/kernel/process.c linux-2.6.23.14-rsbac-1.3.7/arch/x86_64/kernel/process.c
--- trunk/arch/x86_64/kernel/process.c	2008-02-13 16:29:45.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/x86_64/kernel/process.c	2008-02-13 13:33:42.000000000 +0100
@@ -55,7 +55,11 @@
 
 asmlinkage extern void ret_from_fork(void);
 
+#ifdef CONFIG_RSBAC
+unsigned long kernel_thread_flags = CLONE_VM | CLONE_UNTRACED | CLONE_KTHREAD;
+#else
 unsigned long kernel_thread_flags = CLONE_VM | CLONE_UNTRACED;
+#endif
 
 unsigned long boot_option_idle_override = 0;
 EXPORT_SYMBOL(boot_option_idle_override);
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/arch/xtensa/kernel/entry.S linux-2.6.23.14-rsbac-1.3.7/arch/xtensa/kernel/entry.S
--- trunk/arch/xtensa/kernel/entry.S	2008-02-13 16:30:11.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/arch/xtensa/kernel/entry.S	2008-02-13 13:34:53.000000000 +0100
@@ -2044,7 +2044,11 @@ ENTRY(kernel_thread)
 	mov	a5, a2			# preserve fn over syscall
 	mov	a7, a3			# preserve args over syscall
 
+#ifdef CONFIG_RSBAC
+	movi	a3, _CLONE_VM | _CLONE_UNTRACED | _CLONE_KTHREAD)
+#else
 	movi	a3, _CLONE_VM | _CLONE_UNTRACED
+#endif
 	movi	a2, __NR_clone
 	or	a6, a4, a3		# arg0: flags
 	mov	a3, a1			# arg1: sp
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/block/ioctl.c linux-2.6.23.14-rsbac-1.3.7/block/ioctl.c
--- trunk/block/ioctl.c	2008-02-13 16:25:04.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/block/ioctl.c	2008-02-13 13:24:03.000000000 +0100
@@ -8,6 +8,13 @@
 #include <linux/blktrace_api.h>
 #include <asm/uaccess.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#include <linux/hdreg.h>
+#endif
+
+
 static int blkpg_ioctl(struct block_device *bdev, struct blkpg_ioctl_arg __user *arg)
 {
 	struct block_device *bdevp;
@@ -141,6 +148,73 @@ static int blkdev_locked_ioctl(struct fi
 	struct backing_dev_info *bdi;
 	int ret, n;
 
+	/* RSBAC */
+#ifdef CONFIG_RSBAC
+	enum  rsbac_adf_request_t     rsbac_request;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+	/* RSBAC */
+#ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+		rsbac_printk(KERN_DEBUG "blkdev_ioctl(): calling ADF\n");
+#endif
+	/* values taken from include/linux/fs.h and hdreg.h */
+	switch (cmd) {
+		case BLKGETSIZE:   /* Return device size */
+		case BLKGETSIZE64:
+		case BLKROGET:
+		case BLKRAGET:
+		case BLKFRAGET:
+		case BLKSECTGET:
+		case BLKSSZGET:
+		case BLKBSZGET:
+		case HDIO_GETGEO:
+		case HDIO_OBSOLETE_IDENTITY:
+		case HDIO_GET_UNMASKINTR:
+		case HDIO_GET_IDENTITY:
+		case HDIO_GET_NICE:
+		case HDIO_GET_BUSSTATE:
+		case HDIO_GET_QDMA:
+		case HDIO_GET_MULTCOUNT:
+		case HDIO_GET_KEEPSETTINGS:
+		case HDIO_GET_32BIT:
+		case HDIO_GET_NOWERR:
+		case HDIO_GET_DMA:
+		case HDIO_GET_WCACHE:
+		case HDIO_GET_ACOUSTIC:
+		case HDIO_GET_ADDRESS:
+			rsbac_request = R_GET_STATUS_DATA;
+			break;
+
+		default:
+			rsbac_request = R_MODIFY_SYSTEM_DATA;
+	}
+	rsbac_target_id.dev.type = D_block;
+	if(file && file->f_dentry && file->f_dentry->d_inode)
+	{
+		rsbac_target_id.dev.major = RSBAC_MAJOR(file->f_dentry->d_inode->i_rdev);
+		rsbac_target_id.dev.minor = RSBAC_MINOR(file->f_dentry->d_inode->i_rdev);
+	}
+	else
+	{
+		return -EINVAL;
+	}
+
+	rsbac_attribute_value.ioctl_cmd = cmd;
+	if (!rsbac_adf_request(rsbac_request,
+				current->pid,
+				T_DEV,
+				rsbac_target_id,
+				A_ioctl_cmd,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
 	switch (cmd) {
 	case BLKRAGET:
 	case BLKFRAGET:
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/drivers/block/loop.c linux-2.6.23.14-rsbac-1.3.7/drivers/block/loop.c
--- trunk/drivers/block/loop.c	2008-02-13 16:33:09.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/drivers/block/loop.c	2008-02-13 13:40:18.000000000 +0100
@@ -79,6 +79,8 @@
 
 #include <asm/uaccess.h>
 
+#include <rsbac/hooks.h>
+
 static LIST_HEAD(loop_devices);
 static DEFINE_MUTEX(loop_devices_mutex);
 
@@ -737,6 +739,13 @@ static int loop_set_fd(struct loop_devic
 	int		error;
 	loff_t		size;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	/* This is safe, since we have a reference from open(). */
 	__module_get(THIS_MODULE);
 
@@ -803,6 +812,51 @@ static int loop_set_fd(struct loop_devic
 	if (!(lo_file->f_mode & FMODE_WRITE))
 		lo_flags |= LO_FLAGS_READ_ONLY;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "[loop_set_fd()]: calling ADF for FILE/DEV\n");
+        if(S_ISREG(inode->i_mode))
+          {
+            rsbac_target = T_FILE;
+            rsbac_target_id.dir.device = lo_file->f_dentry->d_sb->s_dev;
+            rsbac_target_id.dir.inode  = inode->i_ino;
+            rsbac_target_id.dir.dentry_p = file->f_dentry;
+          }
+        else
+          { /* must be block */
+            rsbac_target = T_DEV;
+            rsbac_target_id.dev.type = D_block;
+            rsbac_target_id.dev.major = RSBAC_MAJOR(inode->i_rdev);
+            rsbac_target_id.dev.minor = RSBAC_MINOR(inode->i_rdev);
+          }
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MOUNT,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            error = -EPERM;
+            goto out_putf;
+          }
+        rsbac_pr_debug(aef, "[loop_set_fd()]: calling ADF for DEV\n");
+        rsbac_target_id.dev.type = D_block;
+        rsbac_target_id.dev.major = RSBAC_MAJOR(bdev->bd_dev);
+        rsbac_target_id.dev.minor = RSBAC_MINOR(bdev->bd_dev);
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MOUNT,
+                               current->pid,
+                               T_DEV,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            error = -EPERM;
+            goto out_putf;
+          }
+        #endif
+
 	set_device_ro(bdev, (lo_flags & LO_FLAGS_READ_ONLY) != 0);
 
 	lo->lo_blocksize = lo_blocksize;
@@ -900,6 +954,13 @@ static int loop_clr_fd(struct loop_devic
 	struct file *filp = lo->lo_backing_file;
 	gfp_t gfp = lo->old_gfp_mask;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (lo->lo_state != Lo_bound)
 		return -ENXIO;
 
@@ -909,6 +970,49 @@ static int loop_clr_fd(struct loop_devic
 	if (filp == NULL)
 		return -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "[lo_ioctl()]: calling ADF for FILE/DEV\n");
+        if(S_ISREG(filp->f_dentry->d_inode->i_mode))
+          {
+            rsbac_target = T_FILE;
+            rsbac_target_id.dir.device = filp->f_dentry->d_sb->s_dev;
+            rsbac_target_id.dir.inode  = filp->f_dentry->d_inode->i_ino;
+            rsbac_target_id.dir.dentry_p = filp->f_dentry;
+          }
+        else
+          { /* must be block dev */
+            rsbac_target = T_DEV;
+            rsbac_target_id.dev.type = D_block;
+            rsbac_target_id.dev.major = RSBAC_MAJOR(filp->f_dentry->d_inode->i_rdev);
+            rsbac_target_id.dev.minor = RSBAC_MINOR(filp->f_dentry->d_inode->i_rdev);
+          }
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_UMOUNT,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        rsbac_pr_debug(aef, "[lo_ioctl()]: calling ADF for DEV\n");
+        rsbac_target_id.dev.type = D_block;
+        rsbac_target_id.dev.major = LOOP_MAJOR;
+        rsbac_target_id.dev.minor = lo->lo_number;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_UMOUNT,
+                               current->pid,
+                               T_DEV,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	spin_lock_irq(&lo->lo_lock);
 	lo->lo_state = Lo_rundown;
 	spin_unlock_irq(&lo->lo_lock);
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/drivers/char/mem.c linux-2.6.23.14-rsbac-1.3.7/drivers/char/mem.c
--- trunk/drivers/char/mem.c	2008-02-13 16:34:00.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/drivers/char/mem.c	2008-02-13 13:41:02.000000000 +0100
@@ -34,6 +34,8 @@
 # include <linux/efi.h>
 #endif
 
+#include <rsbac/hooks.h>
+
 /*
  * Architectures vary in how they handle caching for addresses
  * outside of main memory.
@@ -805,7 +807,28 @@ static loff_t memory_lseek(struct file *
 
 static int open_port(struct inode * inode, struct file * filp)
 {
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+
+	if(!capable(CAP_SYS_RAWIO))
+		return	-EPERM;
+
+	rsbac_target_id.scd = ST_kmem;
+	rsbac_attribute_value.dummy = 0;
+	rsbac_pr_debug(aef, "calling ADF\n");
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+		return -EPERM;
+	else
+		return 0;
+#else
 	return capable(CAP_SYS_RAWIO) ? 0 : -EPERM;
+#endif
 }
 
 #define zero_lseek	null_lseek
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/drivers/char/sysrq.c linux-2.6.23.14-rsbac-1.3.7/drivers/char/sysrq.c
--- trunk/drivers/char/sysrq.c	2008-02-13 16:34:20.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/drivers/char/sysrq.c	2008-02-13 13:41:15.000000000 +0100
@@ -40,6 +40,11 @@
 #include <asm/ptrace.h>
 #include <asm/irq_regs.h>
 
+#ifdef CONFIG_RSBAC
+#include <rsbac/types.h>
+#include <rsbac/debug.h>
+#endif
+
 /* Whether we react on sysrq keys or just ignore them */
 int __read_mostly __sysrq_enabled = 1;
 
@@ -180,6 +185,27 @@ static struct sysrq_key_op sysrq_mountro
 	.enable_mask	= SYSRQ_ENABLE_REMOUNT,
 };
 
+#ifdef CONFIG_RSBAC_SOFTMODE_SYSRQ
+static void sysrq_handle_rsbac_softmode(int key,
+		                        struct tty_struct *tty) {
+	if(rsbac_softmode)
+	  {
+	    rsbac_printk(KERN_WARNING "Soft mode disabled via SysRq!\n");
+	    rsbac_softmode = 0;
+	  }
+	else
+	  {
+	    rsbac_printk(KERN_WARNING "Soft mode enabled via SysRq!\n");
+	    rsbac_softmode = 1;
+	  }
+}
+static struct sysrq_key_op sysrq_rsbac_softmode_op = {
+	handler:	sysrq_handle_rsbac_softmode,
+	help_msg:	"rsbac_toggle_softmode_X",
+	action_msg:	"RSBAC toggle softmode\n",
+};
+#endif
+
 #ifdef CONFIG_LOCKDEP
 static void sysrq_handle_showlocks(int key, struct tty_struct *tty)
 {
@@ -355,7 +381,11 @@ static struct sysrq_key_op *sysrq_key_ta
 	NULL,				/* v */
 	&sysrq_showstate_blocked_op,	/* w */
 	/* x: May be registered on ppc/powerpc for xmon */
+#ifdef CONFIG_RSBAC_SOFTMODE_SYSRQ
+	&sysrq_rsbac_softmode_op,	/* x */
+#else
 	NULL,				/* x */
+#endif
 	NULL,				/* y */
 	NULL				/* z */
 };
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/drivers/char/tty_io.c linux-2.6.23.14-rsbac-1.3.7/drivers/char/tty_io.c
--- trunk/drivers/char/tty_io.c	2008-02-13 16:34:12.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/drivers/char/tty_io.c	2008-02-13 13:41:11.000000000 +0100
@@ -100,10 +100,13 @@
 
 #include <linux/kbd_kern.h>
 #include <linux/vt_kern.h>
+#include <linux/security.h>
 #include <linux/selection.h>
 
 #include <linux/kmod.h>
 
+#include <rsbac/hooks.h>
+
 #undef TTY_DEBUG_HANGUP
 
 #define TTY_PARANOIA_CHECK 1
@@ -2893,10 +2896,35 @@ static int tiocsti(struct tty_struct *tt
 	char ch, mbz = 0;
 	struct tty_ldisc *ld;
 	
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+ 
 	if ((current->signal->tty != tty) && !capable(CAP_SYS_ADMIN))
 		return -EPERM;
 	if (get_user(ch, p))
 		return -EFAULT;
+ 
+ 	/* RSBAC */
+ 	#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.dev.type = D_char;
+        rsbac_target_id.dev.major = tty->driver->major;
+        rsbac_target_id.dev.minor = tty->driver->minor_start + tty->index;
+ 	rsbac_attribute_value.dummy = 0;
+ 	if (!rsbac_adf_request(R_SEND,
+ 			       current->pid,
+ 			       T_DEV,
+ 			       rsbac_target_id,
+ 			       A_none,
+ 			       rsbac_attribute_value))
+ 	  {
+ 	    return -EPERM;
+ 	  }
+ 	#endif
+ 
 	ld = tty_ldisc_ref_wait(tty);
 	ld->receive_buf(tty, &ch, &mbz, 1);
 	tty_ldisc_deref(ld);
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/drivers/char/tty_ioctl.c linux-2.6.23.14-rsbac-1.3.7/drivers/char/tty_ioctl.c
--- trunk/drivers/char/tty_ioctl.c	2008-02-13 16:34:19.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/drivers/char/tty_ioctl.c	2008-02-13 13:41:15.000000000 +0100
@@ -26,6 +26,8 @@
 #include <asm/uaccess.h>
 #include <asm/system.h>
 
+#include <rsbac/hooks.h>
+
 #undef TTY_DEBUG_WAIT_UNTIL_SENT
 
 #undef	DEBUG
@@ -671,12 +673,58 @@ int n_tty_ioctl(struct tty_struct * tty,
 	int retval;
 	struct tty_ldisc *ld;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_adf_request_t     rsbac_request;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (tty->driver->type == TTY_DRIVER_TYPE_PTY &&
 	    tty->driver->subtype == PTY_TYPE_MASTER)
 		real_tty = tty->link;
 	else
 		real_tty = tty;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	switch (cmd) {
+#ifdef TIOCGETP
+		case TIOCGETP:
+#endif
+#ifdef TIOCGETC
+		case TIOCGETC:
+#endif
+#ifdef TIOCGLTC
+		case TIOCGLTC:
+#endif
+		case TCGETS:
+		case TCGETA:
+		case TIOCOUTQ:
+		case TIOCINQ:
+		case TIOCGLCKTRMIOS:
+		case TIOCGSOFTCAR:
+		  rsbac_request = R_GET_PERMISSIONS_DATA;
+		  break;
+		default:
+		  rsbac_request = R_MODIFY_PERMISSIONS_DATA;
+	}
+        rsbac_target_id.dev.type = D_char;
+        rsbac_target_id.dev.major = tty->driver->major;
+        rsbac_target_id.dev.minor = tty->driver->minor_start + tty->index;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(rsbac_request,
+			       current->pid,
+			       T_DEV,
+			       rsbac_target_id,
+			       A_none,
+			       rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	switch (cmd) {
 #ifdef TIOCGETP
 		case TIOCGETP:
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/drivers/ide/ide.c linux-2.6.23.14-rsbac-1.3.7/drivers/ide/ide.c
--- trunk/drivers/ide/ide.c	2008-02-13 16:35:59.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/drivers/ide/ide.c	2008-02-13 13:42:36.000000000 +0100
@@ -72,12 +72,14 @@
 #include <linux/seq_file.h>
 #include <linux/device.h>
 #include <linux/bitops.h>
+#include <linux/security.h>
 
 #include <asm/byteorder.h>
 #include <asm/irq.h>
 #include <asm/uaccess.h>
 #include <asm/io.h>
 
+#include <rsbac/hooks.h>
 
 /* default maximum number of failures */
 #define IDE_DEFAULT_MAX_FAILURES 	1
@@ -978,6 +980,60 @@ int generic_ide_ioctl(ide_drive_t *drive
 	int err = 0, (*setfunc)(ide_drive_t *, int);
 	u8 *val;
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_adf_request_t     rsbac_request;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	/* values taken from include/linux/fs.h and hdreg.h */
+	switch (cmd) {
+		case BLKGETSIZE:   /* Return device size */
+		case BLKGETSIZE64:
+		case BLKROGET:
+		case BLKRAGET:
+		case BLKFRAGET:
+		case BLKSECTGET:
+		case BLKSSZGET:
+		case BLKBSZGET:
+		case HDIO_GETGEO:
+		case HDIO_OBSOLETE_IDENTITY:
+		case HDIO_GET_UNMASKINTR:
+		case HDIO_GET_IDENTITY:
+		case HDIO_GET_NICE:
+		case HDIO_GET_BUSSTATE:
+		case HDIO_GET_QDMA:
+		case HDIO_GET_MULTCOUNT:
+		case HDIO_GET_KEEPSETTINGS:
+		case HDIO_GET_32BIT:
+		case HDIO_GET_NOWERR:
+		case HDIO_GET_DMA:
+		case HDIO_GET_WCACHE:
+		case HDIO_GET_ACOUSTIC:
+		case HDIO_GET_ADDRESS:
+			rsbac_request = R_GET_STATUS_DATA;
+			break;
+
+		default:
+			rsbac_request = R_MODIFY_SYSTEM_DATA;
+	}
+	rsbac_target_id.dev.type = D_block;
+	rsbac_target_id.dev.major = RSBAC_MAJOR(bdev->bd_dev);
+	rsbac_target_id.dev.minor = RSBAC_MINOR(bdev->bd_dev);
+	rsbac_attribute_value.ioctl_cmd = cmd;
+	if (!rsbac_adf_request(rsbac_request,
+				current->pid,
+				T_DEV,
+				rsbac_target_id,
+				A_ioctl_cmd,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
 	switch (cmd) {
 	case HDIO_GET_32BIT:	    val = &drive->io_32bit;	 goto read_val;
 	case HDIO_GET_KEEPSETTINGS: val = &drive->keep_settings; goto read_val;
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/exec.c linux-2.6.23.14-rsbac-1.3.7/fs/exec.c
--- trunk/fs/exec.c	2008-02-13 16:25:50.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/exec.c	2008-02-13 13:25:39.000000000 +0100
@@ -59,6 +59,8 @@
 #include <linux/kmod.h>
 #endif
 
+#include <rsbac/hooks.h>
+
 int core_uses_pid;
 char core_pattern[CORENAME_MAX_SIZE] = "core";
 int suid_dumpable = 0;
@@ -130,6 +132,11 @@ asmlinkage long sys_uselib(const char __
 	struct nameidata nd;
 	int error;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	error = __user_path_lookup_open(library, LOOKUP_FOLLOW, &nd, FMODE_READ|FMODE_EXEC);
 	if (error)
 		goto out;
@@ -141,10 +148,35 @@ asmlinkage long sys_uselib(const char __
 	if (!S_ISREG(nd.dentry->d_inode->i_mode))
 		goto exit;
 
+#ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+	if(rsbac_dac_part_disabled(nd.dentry))
+		error = 0;
+	else
+#endif
 	error = vfs_permission(&nd, MAY_READ | MAY_EXEC);
 	if (error)
 		goto exit;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.file.device = nd.dentry->d_inode->i_sb->s_dev;
+	rsbac_target_id.file.inode  = nd.dentry->d_inode->i_ino;
+	rsbac_target_id.file.dentry_p = nd.dentry;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MAP_EXEC,
+				current->pid,
+				T_FILE,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		rsbac_pr_debug(aef, "request not granted, my PID: %i\n",
+			       current->pid);
+		error = -EPERM;
+		goto exit;
+	}
+#endif
+
 	file = nameidata_to_filp(&nd, O_RDONLY);
 	error = PTR_ERR(file);
 	if (IS_ERR(file))
@@ -170,6 +202,30 @@ asmlinkage long sys_uselib(const char __
 		read_unlock(&binfmt_lock);
 	}
 	fput(file);
+
+        /* RSBAC: notify ADF of mapped segment */
+        #ifdef CONFIG_RSBAC
+        if(!error)
+          {
+            union rsbac_target_id_t rsbac_new_target_id;
+
+            rsbac_pr_debug(aef, "calling ADF_set_attr\n");
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(R_MAP_EXEC,
+                                   current->pid,
+                                   T_FILE,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sys_uselib(): rsbac_adf_set_attr() returned error\n");
+              }
+          }
+        #endif
+
 out:
   	return error;
 exit:
@@ -682,7 +738,14 @@ struct file *open_exec(const char *name)
 		file = ERR_PTR(-EACCES);
 		if (!(nd.mnt->mnt_flags & MNT_NOEXEC) &&
 		    S_ISREG(inode->i_mode)) {
-			int err = vfs_permission(&nd, MAY_EXEC);
+			int err;
+
+#ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+			if(rsbac_dac_part_disabled(nd.dentry))
+				err = 0;
+			else
+#endif
+			err = vfs_permission(&nd, MAY_EXEC);
 			file = ERR_PTR(err);
 			if (!err) {
 				file = nameidata_to_filp(&nd, O_RDONLY);
@@ -1344,6 +1407,13 @@ int do_execve(char * filename,
 	unsigned long env_p;
 	int retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	retval = -ENOMEM;
 	bprm = kzalloc(sizeof(*bprm), GFP_KERNEL);
 	if (!bprm)
@@ -1376,6 +1446,27 @@ int do_execve(char * filename,
 	if (retval)
 		goto out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "[sys_execve()]: calling ADF\n");
+        rsbac_target_id.file.device = bprm->file->f_dentry->d_sb->s_dev;
+        rsbac_target_id.file.inode  = bprm->file->f_dentry->d_inode->i_ino;
+        rsbac_target_id.file.dentry_p = bprm->file->f_dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_EXECUTE,
+                               current->pid,
+                               T_FILE,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            rsbac_pr_debug(aef, "[sys_execve()]: request not granted, my PID: %i\n",
+			   current->pid);
+            retval = -EPERM;
+            goto out;
+          }
+        #endif
+
 	retval = prepare_binprm(bprm);
 	if (retval < 0)
 		goto out;
@@ -1395,12 +1486,38 @@ int do_execve(char * filename,
 		goto out;
 	bprm->argv_len = env_p - bprm->p;
 
+/*#ifdef CONFIG_RSBAC_CAP
+	retval = rsbac_cap_check_envp(bprm);
+	if (retval < 0)
+		goto out;
+#endif*/
+
 	retval = search_binary_handler(bprm,regs);
 	if (retval >= 0) {
 		/* execve success */
 		free_arg_pages(bprm);
 		security_bprm_free(bprm);
 		acct_update_integrals(current);
+
+                /* RSBAC: notify ADF of changed program in this process */
+                /*        Most structures are already filled            */
+                #ifdef CONFIG_RSBAC
+                rsbac_pr_debug(aef, "[sys_execve()]: calling ADF_set_attr\n");
+                rsbac_new_target_id.dummy = 0;
+                if (rsbac_adf_set_attr(R_EXECUTE,
+                                       current->pid,
+                                       T_FILE,
+                                       rsbac_target_id,
+                                       T_NONE,
+                                       rsbac_new_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    rsbac_printk(KERN_WARNING
+                           "do_execve() [sys_execve]: rsbac_adf_set_attr() returned error\n");
+                  }
+                #endif
+
 		kfree(bprm);
 		return retval;
 	}
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/ext2/ioctl.c linux-2.6.23.14-rsbac-1.3.7/fs/ext2/ioctl.c
--- trunk/fs/ext2/ioctl.c	2008-02-13 16:26:02.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/ext2/ioctl.c	2008-02-13 13:26:00.000000000 +0100
@@ -10,12 +10,17 @@
 #include "ext2.h"
 #include <linux/capability.h>
 #include <linux/time.h>
+#include <linux/security.h>
 #include <linux/sched.h>
 #include <linux/compat.h>
 #include <linux/smp_lock.h>
 #include <asm/current.h>
 #include <asm/uaccess.h>
 
+#ifdef CONFIG_RSBAC
+#include <net/sock.h>
+#endif
+#include <rsbac/hooks.h>
 
 int ext2_ioctl (struct inode * inode, struct file * filp, unsigned int cmd,
 		unsigned long arg)
@@ -23,6 +28,78 @@ int ext2_ioctl (struct inode * inode, st
 	struct ext2_inode_info *ei = EXT2_I(inode);
 	unsigned int flags;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_adf_request_t     rsbac_request;
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF\n");
+        switch (cmd)
+          {
+            case EXT2_IOC_GETFLAGS:
+            case EXT2_IOC_GETVERSION:
+              rsbac_request = R_GET_PERMISSIONS_DATA;
+              break;
+            case EXT2_IOC_SETFLAGS:
+            case EXT2_IOC_SETVERSION:
+              rsbac_request = R_MODIFY_PERMISSIONS_DATA;
+              break;
+            default:
+              rsbac_request = R_NONE;
+	  }
+        if(S_ISSOCK(inode->i_mode))
+          {
+            if(SOCKET_I(inode)->ops
+		    && (SOCKET_I(inode)->ops->family == AF_UNIX)) {
+		rsbac_target = T_UNIXSOCK;
+		rsbac_target_id.unixsock.device = filp->f_dentry->d_sb->s_dev;
+		rsbac_target_id.unixsock.inode  = inode->i_ino;
+		rsbac_target_id.unixsock.dentry_p = filp->f_dentry;
+	    }
+#ifdef CONFIG_RSBAC_NET_OBJ
+	    else {
+		    rsbac_target = T_NETOBJ;
+		    rsbac_target_id.netobj.sock_p
+			    = SOCKET_I(inode);
+		    rsbac_target_id.netobj.local_addr = NULL;
+		    rsbac_target_id.netobj.local_len = 0;
+		    rsbac_target_id.netobj.remote_addr = NULL;
+		    rsbac_target_id.netobj.remote_len = 0;
+	    }
+#endif
+          }
+        else
+          {
+            if (S_ISDIR(inode->i_mode))
+              rsbac_target = T_DIR;
+            else if (S_ISFIFO(inode->i_mode))
+              rsbac_target = T_FIFO;
+            else if (S_ISLNK(inode->i_mode))
+              rsbac_target = T_SYMLINK;
+            else
+              rsbac_target = T_FILE;
+            rsbac_target_id.file.device = filp->f_dentry->d_sb->s_dev;
+            rsbac_target_id.file.inode  = inode->i_ino;
+            rsbac_target_id.file.dentry_p = filp->f_dentry;
+	  }
+        rsbac_attribute_value.ioctl_cmd = cmd;
+        if(   (rsbac_request != R_NONE)
+           && !rsbac_adf_request(rsbac_request,
+                                 current->pid,
+                                 rsbac_target,
+                                 rsbac_target_id,
+                                 A_ioctl_cmd,
+                                 rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	ext2_debug ("cmd = %u, arg = %lu\n", cmd, arg);
 
 	switch (cmd) {
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/ext2/namei.c linux-2.6.23.14-rsbac-1.3.7/fs/ext2/namei.c
--- trunk/fs/ext2/namei.c	2008-02-13 16:26:02.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/ext2/namei.c	2008-02-13 13:26:01.000000000 +0100
@@ -31,11 +31,14 @@
  */
 
 #include <linux/pagemap.h>
+#include <linux/security.h>
 #include "ext2.h"
 #include "xattr.h"
 #include "acl.h"
 #include "xip.h"
 
+#include <rsbac/hooks.h>
+
 static inline int ext2_add_nondir(struct dentry *dentry, struct inode *inode)
 {
 	int err = ext2_add_link(dentry, inode);
@@ -265,6 +268,13 @@ static int ext2_unlink(struct inode * di
 	if (err)
 		goto out;
 
+	/* RSBAC */
+#ifdef CONFIG_RSBAC_SECDEL
+	/* Clear content and sync */
+	if(inode->i_nlink == 1)
+		rsbac_sec_del(dentry, TRUE);
+#endif
+
 	inode->i_ctime = dir->i_ctime;
 	inode_dec_link_count(inode);
 	err = 0;
@@ -322,6 +332,13 @@ static int ext2_rename (struct inode * o
 		new_de = ext2_find_entry (new_dir, new_dentry, &new_page);
 		if (!new_de)
 			goto out_dir;
+                
+#ifdef CONFIG_RSBAC_SECDEL
+		/* Clear content and sync */
+		if(new_inode->i_nlink == 1)
+			rsbac_sec_del(new_dentry, TRUE);
+#endif
+
 		inode_inc_link_count(old_inode);
 		ext2_set_link(new_dir, new_de, new_page, old_inode);
 		new_inode->i_ctime = CURRENT_TIME_SEC;
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/ext3/ioctl.c linux-2.6.23.14-rsbac-1.3.7/fs/ext3/ioctl.c
--- trunk/fs/ext3/ioctl.c	2008-02-13 16:26:03.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/ext3/ioctl.c	2008-02-13 13:26:03.000000000 +0100
@@ -12,11 +12,17 @@
 #include <linux/capability.h>
 #include <linux/ext3_fs.h>
 #include <linux/ext3_jbd.h>
+#include <linux/security.h>
 #include <linux/time.h>
 #include <linux/compat.h>
 #include <linux/smp_lock.h>
 #include <asm/uaccess.h>
 
+#ifdef CONFIG_RSBAC
+#include <net/sock.h>
+#endif
+#include <rsbac/hooks.h>
+
 int ext3_ioctl (struct inode * inode, struct file * filp, unsigned int cmd,
 		unsigned long arg)
 {
@@ -24,6 +30,87 @@ int ext3_ioctl (struct inode * inode, st
 	unsigned int flags;
 	unsigned short rsv_window_size;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_adf_request_t     rsbac_request;
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF\n");
+        switch (cmd)
+          {
+#ifdef CONFIG_JBD_DEBUG
+            case EXT3_IOC_WAIT_FOR_READONLY:
+#endif
+            case EXT3_IOC_GETFLAGS:
+            case EXT3_IOC_GETVERSION:
+            case EXT3_IOC_GETVERSION_OLD:
+            case EXT3_IOC_GETRSVSZ:
+              rsbac_request = R_GET_PERMISSIONS_DATA;
+              break;
+            case EXT3_IOC_SETFLAGS:
+            case EXT3_IOC_SETVERSION:
+            case EXT3_IOC_SETVERSION_OLD:
+            case EXT3_IOC_SETRSVSZ:
+            case EXT3_IOC_GROUP_EXTEND:
+            case EXT3_IOC_GROUP_ADD:
+              rsbac_request = R_MODIFY_PERMISSIONS_DATA;
+              break;
+            default:
+              rsbac_request = R_NONE;
+	  }
+        if(S_ISSOCK(inode->i_mode)) {
+		  if(SOCKET_I(inode)->ops
+			&& (SOCKET_I(inode)->ops->family == AF_UNIX)) {
+			  rsbac_target = T_UNIXSOCK;
+			  rsbac_target_id.unixsock.device = filp->f_dentry->d_sb->s_dev;
+			  rsbac_target_id.unixsock.inode  = inode->i_ino;
+			  rsbac_target_id.unixsock.dentry_p = filp->f_dentry;
+
+		  }
+#ifdef CONFIG_RSBAC_NET_OBJ
+		  else {
+			  rsbac_target = T_NETOBJ;
+			  rsbac_target_id.netobj.sock_p
+				  = SOCKET_I(inode);
+			  rsbac_target_id.netobj.local_addr = NULL;
+			  rsbac_target_id.netobj.local_len = 0;
+			  rsbac_target_id.netobj.remote_addr = NULL;
+			  rsbac_target_id.netobj.remote_len = 0;
+		  }
+#endif
+          }
+        else
+          {
+            if (S_ISDIR(inode->i_mode))
+              rsbac_target = T_DIR;
+            else if (S_ISFIFO(inode->i_mode))
+              rsbac_target = T_FIFO;
+            else if (S_ISLNK(inode->i_mode))
+              rsbac_target = T_SYMLINK;
+            else
+              rsbac_target = T_FILE;
+            rsbac_target_id.file.device = filp->f_dentry->d_sb->s_dev;
+            rsbac_target_id.file.inode  = inode->i_ino;
+            rsbac_target_id.file.dentry_p = filp->f_dentry;
+	  }
+        rsbac_attribute_value.ioctl_cmd = cmd;
+        if(   (rsbac_request != R_NONE)
+           && !rsbac_adf_request(rsbac_request,
+                                 current->pid,
+                                 rsbac_target,
+                                 rsbac_target_id,
+                                 A_ioctl_cmd,
+                                 rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	ext3_debug ("cmd = %u, arg = %lu\n", cmd, arg);
 
 	switch (cmd) {
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/ext3/namei.c linux-2.6.23.14-rsbac-1.3.7/fs/ext3/namei.c
--- trunk/fs/ext3/namei.c	2008-02-13 16:26:03.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/ext3/namei.c	2008-02-13 13:26:04.000000000 +0100
@@ -31,6 +31,7 @@
 #include <linux/ext3_fs.h>
 #include <linux/ext3_jbd.h>
 #include <linux/fcntl.h>
+#include <linux/security.h>
 #include <linux/stat.h>
 #include <linux/string.h>
 #include <linux/quotaops.h>
@@ -41,6 +42,8 @@
 #include "xattr.h"
 #include "acl.h"
 
+#include <rsbac/hooks.h>
+
 /*
  * define how far ahead to read directories while searching them.
  */
@@ -2152,6 +2155,20 @@ static int ext3_unlink(struct inode * di
 
 	inode = dentry->d_inode;
 
+#ifdef CONFIG_RSBAC_SECDEL
+	/* Clear content and sync */
+	if(inode->i_nlink == 1) {
+		ext3_journal_stop(handle);
+		rsbac_sec_del(dentry, TRUE);
+		handle = ext3_journal_start(dir, EXT3_DELETE_TRANS_BLOCKS(dir->i_sb));
+		if (IS_ERR(handle))
+			return PTR_ERR(handle);
+
+		if (IS_DIRSYNC(dir))
+			handle->h_sync = 1;
+	}
+#endif
+
 	retval = -EIO;
 	if (le32_to_cpu(de->inode) != inode->i_ino)
 		goto end_unlink;
@@ -2165,6 +2182,8 @@ static int ext3_unlink(struct inode * di
 	retval = ext3_delete_entry(handle, dir, de, bh);
 	if (retval)
 		goto end_unlink;
+
+
 	dir->i_ctime = dir->i_mtime = CURRENT_TIME_SEC;
 	ext3_update_dx_flag(dir);
 	ext3_mark_inode_dirty(handle, dir);
@@ -2324,6 +2343,23 @@ static int ext3_rename (struct inode * o
 			brelse (new_bh);
 			new_bh = NULL;
 		}
+
+#ifdef CONFIG_RSBAC_SECDEL
+		/* Clear content, but do not sync */
+		else
+			if(new_inode->i_nlink == 1) {
+				ext3_journal_stop(handle);
+				rsbac_sec_del(new_dentry, FALSE);
+				handle = ext3_journal_start(old_dir, 2 *
+						EXT3_DATA_TRANS_BLOCKS(old_dir->i_sb) +
+						EXT3_INDEX_EXTRA_TRANS_BLOCKS + 2);
+				if (IS_ERR(handle))
+					return PTR_ERR(handle);
+
+				if (IS_DIRSYNC(old_dir) || IS_DIRSYNC(new_dir))
+					handle->h_sync = 1;
+			}
+#endif
 	}
 	if (S_ISDIR(old_inode->i_mode)) {
 		if (new_inode) {
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/ext4/namei.c linux-2.6.23.14-rsbac-1.3.7/fs/ext4/namei.c
--- trunk/fs/ext4/namei.c	2008-02-13 16:26:04.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/ext4/namei.c	2008-02-13 13:26:06.000000000 +0100
@@ -41,6 +41,8 @@
 #include "xattr.h"
 #include "acl.h"
 
+#include <rsbac/hooks.h>
+
 /*
  * define how far ahead to read directories while searching them.
  */
@@ -2179,6 +2181,18 @@ static int ext4_unlink(struct inode * di
 
 	inode = dentry->d_inode;
 
+	#ifdef CONFIG_RSBAC_SECDEL
+	if(inode->i_nlink == 1) {
+		ext4_journal_stop(handle);
+		rsbac_sec_del(dentry, TRUE);
+		handle = ext4_journal_start(dir, EXT4_DELETE_TRANS_BLOCKS(dir->i_sb));
+		if (IS_ERR(handle))
+			return PTR_ERR(handle);
+		if (IS_DIRSYNC(dir))
+			handle->h_sync = 1;
+	}
+	#endif
+
 	retval = -EIO;
 	if (le32_to_cpu(de->inode) != inode->i_ino)
 		goto end_unlink;
@@ -2352,6 +2366,19 @@ static int ext4_rename (struct inode * o
 			brelse (new_bh);
 			new_bh = NULL;
 		}
+		#ifdef CONFIG_RSBAC_SECDEL
+		/* Clear content, but do not sync */
+		else
+			if(new_inode->i_nlink == 1) {
+				ext4_journal_stop(handle);
+				rsbac_sec_del(new_dentry, TRUE);
+				handle = ext4_journal_start(old_dir, 2 * EXT4_DATA_TRANS_BLOCKS(old_dir->i_sb) + EXT4_INDEX_EXTRA_TRANS_BLOCKS + 2);
+				if (IS_ERR(handle))
+					return PTR_ERR(handle);
+				if (IS_DIRSYNC(old_dir) || IS_DIRSYNC(new_dir))
+					handle->h_sync = 1;
+			}
+		#endif
 	}
 	if (S_ISDIR(old_inode->i_mode)) {
 		if (new_inode) {
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/fcntl.c linux-2.6.23.14-rsbac-1.3.7/fs/fcntl.c
--- trunk/fs/fcntl.c	2008-02-13 16:25:30.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/fcntl.c	2008-02-13 13:25:01.000000000 +0100
@@ -22,6 +22,7 @@
 #include <asm/poll.h>
 #include <asm/siginfo.h>
 #include <asm/uaccess.h>
+#include <rsbac/hooks.h>
 
 void fastcall set_close_on_exec(unsigned int fd, int flag)
 {
@@ -317,6 +318,12 @@ static long do_fcntl(int fd, unsigned in
 {
 	long err = -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	switch (cmd) {
 	case F_DUPFD:
 		get_file(filp);
@@ -354,6 +361,21 @@ static long do_fcntl(int fd, unsigned in
 		force_successful_syscall_return();
 		break;
 	case F_SETOWN:
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                rsbac_pr_debug(aef, "calling ADF\n");
+                rsbac_target_id.process = arg;
+                rsbac_attribute_value.dummy = 0;
+                if(!rsbac_adf_request(R_SEND_SIGNAL,
+                                      current->pid,
+                                      T_PROCESS,
+                                      rsbac_target_id,
+                                      A_none,
+                                      rsbac_attribute_value))
+                  {
+                    return -EPERM;
+                  }
+                #endif
 		err = f_setown(filp, arg, 1);
 		break;
 	case F_GETSIG:
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/ioctl.c linux-2.6.23.14-rsbac-1.3.7/fs/ioctl.c
--- trunk/fs/ioctl.c	2008-02-13 16:25:45.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/ioctl.c	2008-02-13 13:25:31.000000000 +0100
@@ -16,14 +16,94 @@
 #include <asm/uaccess.h>
 #include <asm/ioctls.h>
 
+#ifdef CONFIG_RSBAC_IOCTL
+#include <net/sock.h>
+#endif
+#include <rsbac/hooks.h>
+
 static long do_ioctl(struct file *filp, unsigned int cmd,
 		unsigned long arg)
 {
 	int error = -ENOTTY;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_IOCTL
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!filp->f_op)
 		goto out;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_IOCTL
+	if(S_ISBLK(filp->f_dentry->d_inode->i_mode))
+	  {
+	    rsbac_target = T_DEV;
+	    rsbac_target_id.dev.type = D_block;
+	    rsbac_target_id.dev.major = RSBAC_MAJOR(filp->f_dentry->d_inode->i_rdev);
+	    rsbac_target_id.dev.minor = RSBAC_MINOR(filp->f_dentry->d_inode->i_rdev);
+	  }
+	else
+	if(S_ISCHR(filp->f_dentry->d_inode->i_mode))
+	  {
+	    rsbac_target = T_DEV;
+	    rsbac_target_id.dev.type = D_char;
+	    rsbac_target_id.dev.major = RSBAC_MAJOR(filp->f_dentry->d_inode->i_rdev);
+	    rsbac_target_id.dev.minor = RSBAC_MINOR(filp->f_dentry->d_inode->i_rdev);
+	  }
+	else
+	if(S_ISSOCK(filp->f_dentry->d_inode->i_mode))
+	  {
+            if(   SOCKET_I(filp->f_dentry->d_inode)->ops
+               && (SOCKET_I(filp->f_dentry->d_inode)->ops->family == AF_UNIX)
+              )
+              {
+		if(filp->f_dentry->d_sb->s_magic == SOCKFS_MAGIC) {
+			rsbac_target = T_IPC;
+			rsbac_target_id.ipc.type = I_anonunix;
+			rsbac_target_id.ipc.id.id_nr = filp->f_dentry->d_inode->i_ino;
+		} else {
+			rsbac_target = T_UNIXSOCK;
+			rsbac_target_id.unixsock.device = filp->f_dentry->d_sb->s_dev;
+			rsbac_target_id.unixsock.inode  = filp->f_dentry->d_inode->i_ino;
+			rsbac_target_id.unixsock.dentry_p = filp->f_dentry;
+		}
+              }
+            else {
+            #ifdef CONFIG_RSBAC_NET_OBJ
+		rsbac_target = T_NETOBJ;
+		rsbac_target_id.netobj.sock_p
+		  = SOCKET_I(filp->f_dentry->d_inode);
+		rsbac_target_id.netobj.local_addr = NULL;
+		rsbac_target_id.netobj.local_len = 0;
+		rsbac_target_id.netobj.remote_addr = NULL;
+		rsbac_target_id.netobj.remote_len = 0;
+            #else
+                rsbac_target = T_NONE;
+	    #endif
+	    }
+	  }
+	else
+	  rsbac_target = T_NONE;
+	if(rsbac_target != T_NONE)
+	  {
+	    rsbac_pr_debug(aef, "[sys_ioctl()]: calling ADF\n");
+	    rsbac_attribute_value.ioctl_cmd = cmd;
+	    if (!rsbac_adf_request(R_IOCTL,
+	                           current->pid,
+	                           rsbac_target,
+	                           rsbac_target_id,
+	                           A_ioctl_cmd,
+	                           rsbac_attribute_value))
+	      {
+	        error = -EPERM;
+	        goto out;
+	      }
+	  }
+	#endif
+
 	if (filp->f_op->unlocked_ioctl) {
 		error = filp->f_op->unlocked_ioctl(filp, cmd, arg);
 		if (error == -ENOIOCTLCMD)
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/ioprio.c linux-2.6.23.14-rsbac-1.3.7/fs/ioprio.c
--- trunk/fs/ioprio.c	2008-02-13 16:25:26.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/ioprio.c	2008-02-13 13:24:53.000000000 +0100
@@ -25,6 +25,7 @@
 #include <linux/capability.h>
 #include <linux/syscalls.h>
 #include <linux/security.h>
+#include <rsbac/hooks.h>
 
 static int set_task_ioprio(struct task_struct *task, int ioprio)
 {
@@ -63,6 +64,27 @@ asmlinkage long sys_ioprio_set(int which
 	struct pid *pgrp;
 	int ret;
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target = T_SCD;
+	rsbac_target_id.scd = ST_priority;
+	rsbac_attribute_value.priority = ioprio;
+
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				rsbac_target,
+				rsbac_target_id,
+				A_priority,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
 	switch (class) {
 		case IOPRIO_CLASS_RT:
 			if (!capable(CAP_SYS_ADMIN))
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/jfs/namei.c linux-2.6.23.14-rsbac-1.3.7/fs/jfs/namei.c
--- trunk/fs/jfs/namei.c	2008-02-13 16:25:42.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/jfs/namei.c	2008-02-13 13:25:26.000000000 +0100
@@ -31,6 +31,8 @@
 #include "jfs_acl.h"
 #include "jfs_debug.h"
 
+#include <rsbac/hooks.h>
+
 /*
  * forward references
  */
@@ -483,6 +485,12 @@ static int jfs_unlink(struct inode *dip,
 	if ((rc = get_UCSname(&dname, dentry)))
 		goto out;
 
+	/* RSBAC jfs_unlink */
+        #ifdef CONFIG_RSBAC_SECDEL
+	if(dentry->d_inode->i_nlink == 1)
+		rsbac_sec_del(dentry, TRUE);
+	#endif
+	
 	IWRITE_LOCK(ip, RDWRLOCK_NORMAL);
 
 	tid = txBegin(dip->i_sb, 0);
@@ -1127,6 +1135,10 @@ static int jfs_rename(struct inode *old_
 			goto out3;
 		}
 	} else if (new_ip) {
+		#ifdef CONFIG_RSBAC_SECDEL
+		if (new_ip->i_nlink == 1)
+			rsbac_sec_del(new_dentry, TRUE);
+		#endif
 		IWRITE_LOCK(new_ip, RDWRLOCK_NORMAL);
 		/* Init inode for quota operations. */
 		DQUOT_INIT(new_ip);
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/locks.c linux-2.6.23.14-rsbac-1.3.7/fs/locks.c
--- trunk/fs/locks.c	2008-02-13 16:25:26.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/locks.c	2008-02-13 13:24:54.000000000 +0100
@@ -129,6 +129,8 @@
 #include <asm/semaphore.h>
 #include <asm/uaccess.h>
 
+#include <rsbac/hooks.h>
+
 #define IS_POSIX(fl)	(fl->fl_flags & FL_POSIX)
 #define IS_FLOCK(fl)	(fl->fl_flags & FL_FLOCK)
 #define IS_LEASE(fl)	(fl->fl_flags & FL_LEASE)
@@ -1570,6 +1572,13 @@ asmlinkage long sys_flock(unsigned int f
 	int can_sleep, unlock;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = -EBADF;
 	filp = fget(fd);
 	if (!filp)
@@ -1582,6 +1591,34 @@ asmlinkage long sys_flock(unsigned int f
 	if (!unlock && !(cmd & LOCK_MAND) && !(filp->f_mode & 3))
 		goto out_putf;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target = T_FILE;
+        if (S_ISDIR(filp->f_dentry->d_inode->i_mode))
+          rsbac_target = T_DIR;
+        else if (S_ISFIFO(filp->f_dentry->d_inode->i_mode))
+          rsbac_target = T_FIFO;
+        else if (S_ISLNK(filp->f_dentry->d_inode->i_mode))
+          rsbac_target = T_SYMLINK;
+        else if (S_ISSOCK(filp->f_dentry->d_inode->i_mode))
+          rsbac_target = T_UNIXSOCK;
+        rsbac_target_id.file.device = filp->f_dentry->d_sb->s_dev;
+        rsbac_target_id.file.inode  = filp->f_dentry->d_inode->i_ino;
+        rsbac_target_id.file.dentry_p = filp->f_dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_LOCK,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            error = -EPERM;
+            goto out_putf;
+          }
+        #endif
+
 	error = flock_make_lock(filp, &lock, cmd);
 	if (error)
 		goto out_putf;
@@ -1667,6 +1704,13 @@ int fcntl_getlk(struct file *filp, struc
 	struct flock flock;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = -EFAULT;
 	if (copy_from_user(&flock, l, sizeof(flock)))
 		goto out;
@@ -1678,6 +1722,33 @@ int fcntl_getlk(struct file *filp, struc
 	if (error)
 		goto out;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[sys_fcntl()]: calling ADF\n");
+	rsbac_target = T_FILE;
+	if (S_ISDIR(filp->f_dentry->d_inode->i_mode))
+		rsbac_target = T_DIR;
+	else if (S_ISFIFO(filp->f_dentry->d_inode->i_mode))
+		rsbac_target = T_FIFO;
+	else if (S_ISLNK(filp->f_dentry->d_inode->i_mode))
+		rsbac_target = T_SYMLINK;
+	else if (S_ISSOCK(filp->f_dentry->d_inode->i_mode))
+		rsbac_target = T_UNIXSOCK;
+	rsbac_target_id.file.device = filp->f_dentry->d_sb->s_dev;
+	rsbac_target_id.file.inode  = filp->f_dentry->d_inode->i_ino;
+	rsbac_target_id.file.dentry_p = filp->f_dentry;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				rsbac_target,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		error = -EPERM;
+		goto out;
+	}
+#endif
+
 	error = vfs_test_lock(filp, &file_lock);
 	if (error)
 		goto out;
@@ -1748,6 +1819,13 @@ int fcntl_setlk(unsigned int fd, struct 
 	struct inode *inode;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (file_lock == NULL)
 		return -ENOLCK;
 
@@ -1778,6 +1856,34 @@ again:
 		file_lock->fl_flags |= FL_SLEEP;
 	}
 	
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "[sys_fcntl()]: calling ADF\n");
+        rsbac_target = T_FILE;
+        if (S_ISDIR(inode->i_mode))
+          rsbac_target = T_DIR;
+        else if (S_ISFIFO(inode->i_mode))
+          rsbac_target = T_FIFO;
+        else if (S_ISLNK(inode->i_mode))
+          rsbac_target = T_SYMLINK;
+        else if (S_ISSOCK(inode->i_mode))
+          rsbac_target = T_UNIXSOCK;
+        rsbac_target_id.file.device = filp->f_dentry->d_sb->s_dev;
+        rsbac_target_id.file.inode  = inode->i_ino;
+        rsbac_target_id.file.dentry_p = filp->f_dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_LOCK,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            error = -EPERM;
+            goto out;
+          }
+        #endif
+
 	error = -EBADF;
 	switch (flock.l_type) {
 	case F_RDLCK:
@@ -1836,6 +1942,13 @@ int fcntl_getlk64(struct file *filp, str
 	struct flock64 flock;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = -EFAULT;
 	if (copy_from_user(&flock, l, sizeof(flock)))
 		goto out;
@@ -1847,6 +1960,32 @@ int fcntl_getlk64(struct file *filp, str
 	if (error)
 		goto out;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[sys_fcntl()]: calling ADF\n");
+	rsbac_target = T_FILE;
+	if (S_ISDIR(filp->f_dentry->d_inode->i_mode))
+		rsbac_target = T_DIR;
+	else if (S_ISFIFO(filp->f_dentry->d_inode->i_mode))
+		rsbac_target = T_FIFO;
+	else if (S_ISLNK(filp->f_dentry->d_inode->i_mode))
+		rsbac_target = T_SYMLINK;
+	else if (S_ISSOCK(filp->f_dentry->d_inode->i_mode))
+		rsbac_target = T_UNIXSOCK;
+	rsbac_target_id.file.device = filp->f_dentry->d_sb->s_dev;
+	rsbac_target_id.file.inode  = filp->f_dentry->d_inode->i_ino;
+	rsbac_target_id.file.dentry_p = filp->f_dentry;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_GET_STATUS_DATA,
+			current->pid,
+			rsbac_target,
+			rsbac_target_id,
+			A_none,
+			rsbac_attribute_value)) {
+		error = -EPERM;
+		goto out;
+	}
+#endif
+
 	error = vfs_test_lock(filp, &file_lock);
 	if (error)
 		goto out;
@@ -1874,6 +2013,13 @@ int fcntl_setlk64(unsigned int fd, struc
 	struct inode *inode;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (file_lock == NULL)
 		return -ENOLCK;
 
@@ -1921,6 +2067,33 @@ again:
 		goto out;
 	}
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "[sys_fcntl()]: calling ADF\n");
+        rsbac_target = T_FILE;
+        if (S_ISDIR(inode->i_mode))
+          rsbac_target = T_DIR;
+        else if (S_ISFIFO(inode->i_mode))
+          rsbac_target = T_FIFO;
+        else if (S_ISLNK(inode->i_mode))
+          rsbac_target = T_SYMLINK;
+        else if (S_ISSOCK(inode->i_mode))
+          rsbac_target = T_UNIXSOCK;
+        rsbac_target_id.file.device = filp->f_dentry->d_sb->s_dev;
+        rsbac_target_id.file.inode  = inode->i_ino;
+        rsbac_target_id.file.dentry_p = filp->f_dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_LOCK,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value)) {
+		error = -EPERM;
+		goto out;
+	}
+        #endif
+
 	error = security_file_lock(filp, file_lock->fl_type);
 	if (error)
 		goto out;
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/minix/namei.c linux-2.6.23.14-rsbac-1.3.7/fs/minix/namei.c
--- trunk/fs/minix/namei.c	2008-02-13 16:25:49.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/minix/namei.c	2008-02-13 13:25:37.000000000 +0100
@@ -6,6 +6,8 @@
 
 #include "minix.h"
 
+#include <rsbac/hooks.h>
+
 static int add_nondir(struct dentry *dentry, struct inode *inode)
 {
 	int err = minix_add_link(dentry, inode);
@@ -189,6 +191,13 @@ static int minix_unlink(struct inode * d
 	if (err)
 		goto end_unlink;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_SECDEL
+	/* Clear content and sync */
+	if(inode->i_nlink == 1)
+		rsbac_sec_del(dentry, TRUE);
+	#endif
+
 	inode->i_ctime = dir->i_ctime;
 	inode_dec_link_count(inode);
 end_unlink:
@@ -245,6 +254,13 @@ static int minix_rename(struct inode * o
 		new_de = minix_find_entry(new_dentry, &new_page);
 		if (!new_de)
 			goto out_dir;
+                
+#ifdef CONFIG_RSBAC_SECDEL
+		/* Clear content and sync */
+		if(new_inode->i_nlink == 1)
+			rsbac_sec_del(new_dentry, TRUE);
+#endif
+
 		inode_inc_link_count(old_inode);
 		minix_set_link(new_de, new_page, old_inode);
 		new_inode->i_ctime = CURRENT_TIME_SEC;
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/msdos/namei.c linux-2.6.23.14-rsbac-1.3.7/fs/msdos/namei.c
--- trunk/fs/msdos/namei.c	2008-02-13 16:25:49.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/msdos/namei.c	2008-02-13 13:25:38.000000000 +0100
@@ -10,8 +10,11 @@
 #include <linux/time.h>
 #include <linux/buffer_head.h>
 #include <linux/msdos_fs.h>
+#include <linux/security.h>
 #include <linux/smp_lock.h>
 
+#include <rsbac/hooks.h>
+
 /* Characters that are undesirable in an MS-DOS file name */
 static unsigned char bad_chars[] = "*?<>|\"";
 static unsigned char bad_if_strict_pc[] = "+=,; ";
@@ -433,6 +436,13 @@ static int msdos_unlink(struct inode *di
 	clear_nlink(inode);
 	inode->i_ctime = CURRENT_TIME_SEC;
 	fat_detach(inode);
+
+	/* RSBAC */
+#ifdef CONFIG_RSBAC_SECDEL
+	/* Clear content and sync */
+	rsbac_sec_del(dentry, TRUE);
+#endif
+
 out:
 	unlock_kernel();
 	if (!err)
@@ -526,6 +536,13 @@ static int do_msdos_rename(struct inode 
 	}
 	new_dir->i_version++;
 
+	/* RSBAC */
+#ifdef CONFIG_RSBAC_SECDEL
+	/* Clear content and sync */
+	if (new_inode && (new_inode->i_nlink == 1))
+		rsbac_sec_del(new_dentry, TRUE);
+#endif
+
 	fat_detach(old_inode);
 	fat_attach(old_inode, new_i_pos);
 	if (is_hid)
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/namei.c linux-2.6.23.14-rsbac-1.3.7/fs/namei.c
--- trunk/fs/namei.c	2008-02-13 16:25:24.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/namei.c	2008-02-13 13:24:50.000000000 +0100
@@ -33,6 +33,7 @@
 #include <linux/namei.h>
 #include <asm/namei.h>
 #include <asm/uaccess.h>
+#include <rsbac/hooks.h>
 
 #define ACC_MODE(x) ("\000\004\002\006"[(x)&O_ACCMODE])
 
@@ -248,6 +249,11 @@ int permission(struct inode *inode, int 
 	}
 
 
+#ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_FULL
+	if(rsbac_dac_disable)
+	  return 0;
+#endif
+
 	/*
 	 * MAY_EXEC on regular files requires special handling: We override
 	 * filesystem execute permissions if the mode bits aren't set or
@@ -608,8 +614,20 @@ static __always_inline int __do_follow_l
 	if (!IS_ERR(cookie)) {
 		char *s = nd_get_link(nd);
 		error = 0;
-		if (s)
+		if (s) {
+#ifdef CONFIG_RSBAC_SYM_REDIR
+			char * rsbac_name;
+
+			rsbac_name = rsbac_symlink_redirect(dentry, s, PAGE_SIZE);
+			if(rsbac_name)
+			{
+				error = __vfs_follow_link(nd, rsbac_name);
+				kfree(rsbac_name);
+			}
+			else
+#endif
 			error = __vfs_follow_link(nd, s);
+                }
 		if (dentry->d_inode->i_op->put_link)
 			dentry->d_inode->i_op->put_link(dentry, nd, cookie);
 	}
@@ -629,6 +647,12 @@ static __always_inline int __do_follow_l
 static inline int do_follow_link(struct path *path, struct nameidata *nd)
 {
 	int err = -ELOOP;
+
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (current->link_count >= MAX_NESTED_LINKS)
 		goto loop;
 	if (current->total_link_count >= 40)
@@ -638,6 +662,28 @@ static inline int do_follow_link(struct 
 	err = security_inode_follow_link(path->dentry, nd);
 	if (err)
 		goto loop;
+
+#ifdef CONFIG_RSBAC
+	rsbac_target_id.dir.device = path->dentry->d_sb->s_dev;
+	rsbac_target_id.dir.inode  = path->dentry->d_inode->i_ino;
+	rsbac_target_id.dir.dentry_p = path->dentry;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_SEARCH,
+				current->pid,
+				T_SYMLINK,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+#ifdef CONFIG_RSBAC_FSOBJ_HIDE
+		err = -ENOENT;
+#else
+		err = -EPERM;
+#endif
+		goto loop;
+	}
+#endif
+
 	current->link_count++;
 	current->total_link_count++;
 	nd->depth++;
@@ -815,6 +861,11 @@ static fastcall int __link_path_walk(con
 	int err;
 	unsigned int lookup_flags = nd->flags;
 	
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	while (*name=='/')
 		name++;
 	if (!*name)
@@ -831,12 +882,38 @@ static fastcall int __link_path_walk(con
 		unsigned int c;
 
 		nd->flags |= LOOKUP_CONTINUE;
+#ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+		if(rsbac_dac_part_disabled(nd->dentry))
+			err = 0;
+		else
+#endif
 		err = exec_permission_lite(inode, nd);
 		if (err == -EAGAIN)
 			err = vfs_permission(nd, MAY_EXEC);
  		if (err)
 			break;
 
+#ifdef CONFIG_RSBAC
+		rsbac_target_id.dir.device = inode->i_sb->s_dev;
+		rsbac_target_id.dir.inode  = inode->i_ino;
+		rsbac_target_id.dir.dentry_p = nd->dentry;
+		rsbac_attribute_value.dummy = 0;
+		if (!rsbac_adf_request(R_SEARCH,
+					current->pid,
+					T_DIR,
+					rsbac_target_id,
+					A_none,
+					rsbac_attribute_value))
+		{
+#ifdef CONFIG_RSBAC_FSOBJ_HIDE
+			err = -ENOENT;
+#else
+			err = -EPERM;
+#endif
+			break;
+		}
+#endif
+
 		this.name = name;
 		c = *(const unsigned char *)name;
 
@@ -983,6 +1060,23 @@ return_reval:
 				break;
 		}
 return_base:
+
+#ifdef CONFIG_RSBAC_FSOBJ_HIDE
+		rsbac_target_id.dir.device = nd->dentry->d_inode->i_sb->s_dev;
+		rsbac_target_id.dir.inode  = nd->dentry->d_inode->i_ino;
+		rsbac_target_id.dir.dentry_p = nd->dentry;
+		rsbac_attribute_value.dummy = 0;
+		if (!rsbac_adf_request(R_SEARCH,
+					current->pid,
+					T_DIR,
+					rsbac_target_id,
+					A_none,
+					rsbac_attribute_value))
+		{
+			path_release(nd);
+			return -ENOENT;
+		}
+#endif
 		return 0;
 out_dput:
 		dput_path(&next, nd);
@@ -1279,8 +1373,37 @@ static inline struct dentry *__lookup_ha
 	struct inode *inode;
 	int err;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	inode = base->d_inode;
 
+#ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+	if(rsbac_dac_part_disabled(base))
+		err = 0;
+	else
+#endif
+
+#ifdef CONFIG_RSBAC
+	rsbac_target_id.dir.device = inode->i_sb->s_dev;
+	rsbac_target_id.dir.inode  = inode->i_ino;
+	rsbac_target_id.dir.dentry_p = base;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_SEARCH,
+				current->pid,
+				T_DIR,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		err = -EPERM;
+		dentry = ERR_PTR(err);
+		goto out;
+	}
+#endif
+
 	/*
 	 * See if the low-level filesystem might want
 	 * to use its own hash..
@@ -1369,6 +1492,82 @@ struct dentry *lookup_one_len(const char
 	return __lookup_hash(&this, base, NULL);
 }
 
+/* RSBAC
+ * I hate to put new functions into this file, but even more I hate removing
+ * all statics from all the lookup helpers in here...
+ * Still, I need some form of RSBAC bypass for internal file access.
+ * Amon Ott <ao@rsbac.org>
+ */
+#ifdef CONFIG_RSBAC
+static struct dentry * __rsbac_lookup_hash(struct qstr *name, struct dentry * base, struct nameidata *nd)
+{
+	struct dentry * dentry;
+	struct inode *inode;
+	int err;
+
+	inode = base->d_inode;
+
+	/*
+	 * See if the low-level filesystem might want
+	 * to use its own hash..
+	 */
+	if (base->d_op && base->d_op->d_hash) {
+		err = base->d_op->d_hash(base, name);
+		dentry = ERR_PTR(err);
+		if (err < 0)
+			goto out;
+	}
+
+	dentry = cached_lookup(base, name, nd);
+	if (!dentry) {
+		struct dentry *new = d_alloc(base, name);
+		dentry = ERR_PTR(-ENOMEM);
+		if (!new)
+			goto out;
+		dentry = inode->i_op->lookup(inode, new, nd);
+		if (!dentry)
+			dentry = new;
+		else
+			dput(new);
+	}
+out:
+	return dentry;
+}
+
+struct dentry * rsbac_lookup_hash(struct qstr *name, struct dentry * base)
+{
+	return __rsbac_lookup_hash(name, base, NULL);
+}
+
+/* SMP-safe */
+struct dentry * rsbac_lookup_one_len(const char * name, struct dentry * base, int len)
+{
+	unsigned long hash;
+	struct qstr this;
+	unsigned int c;
+
+	this.name = name;
+	this.len = len;
+	if (!len)
+		goto access;
+
+	hash = init_name_hash();
+	while (len--) {
+		c = *(const unsigned char *)name++;
+		if (c == '/' || c == '\0')
+			goto access;
+		hash = partial_name_hash(c, hash);
+	}
+	this.hash = end_name_hash(hash);
+
+	return rsbac_lookup_hash(&this, base);
+access:
+	return ERR_PTR(-EACCES);
+}
+
+EXPORT_SYMBOL(rsbac_lookup_one_len);
+#endif
+
 struct dentry *lookup_one_len_kern(const char *name, struct dentry *base, int len)
 {
 	int err;
@@ -1442,6 +1641,11 @@ static int may_delete(struct inode *dir,
 	BUG_ON(victim->d_parent->d_inode != dir);
 	audit_inode_child(victim->d_name.name, victim->d_inode, dir);
 
+#ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+	if(rsbac_dac_part_disabled(victim))
+		error = 0;
+	else
+#endif
 	error = permission(dir,MAY_WRITE | MAY_EXEC, NULL);
 	if (error)
 		return error;
@@ -1479,6 +1683,12 @@ static inline int may_create(struct inod
 		return -EEXIST;
 	if (IS_DEADDIR(dir))
 		return -ENOENT;
+
+#ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+	if(rsbac_dac_part_disabled(child->d_parent))
+		return 0;
+	else
+#endif
 	return permission(dir,MAY_WRITE | MAY_EXEC, nd);
 }
 
@@ -1547,6 +1757,14 @@ int vfs_create(struct inode *dir, struct
 {
 	int error = may_create(dir, dentry, nd);
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target;
+	enum  rsbac_target_t          rsbac_new_target;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (error)
 		return error;
 
@@ -1557,10 +1775,53 @@ int vfs_create(struct inode *dir, struct
 	error = security_inode_create(dir, dentry, mode);
 	if (error)
 		return error;
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[open_namei() [filp_open() [do_open() [sys_open()]]]]: calling ADF\n");
+	rsbac_target = T_DIR;
+	rsbac_target_id.dir.device = dentry->d_sb->s_dev;
+	rsbac_target_id.dir.inode  = dir->i_ino;
+	rsbac_target_id.dir.dentry_p = dentry->d_parent;
+	rsbac_attribute_value.create_data.target = T_FILE;
+	rsbac_attribute_value.create_data.dentry_p = dentry;
+	rsbac_attribute_value.create_data.mode = mode;
+	rsbac_attribute_value.create_data.device = 0;
+	if (!rsbac_adf_request(R_CREATE,
+				current->pid,
+				rsbac_target,
+				rsbac_target_id,
+				A_create_data,
+				rsbac_attribute_value))
+		return -EPERM;
+#endif
+
 	DQUOT_INIT(dir);
 	error = dir->i_op->create(dir, dentry, mode, nd);
-	if (!error)
+	if (!error) {
 		fsnotify_create(dir, dentry);
+
+		/* RSBAC: notify ADF of new file */
+#ifdef CONFIG_RSBAC
+		{
+			rsbac_new_target = T_FILE;
+			rsbac_new_target_id.file.device = dentry->d_sb->s_dev;
+			rsbac_new_target_id.file.inode  = dentry->d_inode->i_ino;
+			rsbac_new_target_id.file.dentry_p = dentry;
+			if (rsbac_adf_set_attr(R_CREATE,
+						current->pid,
+						rsbac_target,
+						rsbac_target_id,
+						rsbac_new_target,
+						rsbac_new_target_id,
+						A_create_data,
+						rsbac_attribute_value))
+			{
+				rsbac_printk(KERN_WARNING
+						"vfs_create() [open_namei() [filp_open() [do_open() [sys_open()]]]]: rsbac_adf_set_attr() returned error");
+			}
+		}
+#endif
+	}
 	return error;
 }
 
@@ -1570,6 +1831,14 @@ int may_open(struct nameidata *nd, int a
 	struct inode *inode = dentry->d_inode;
 	int error;
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_adf_request_t     rsbac_adf_req;
+	enum  rsbac_target_t          rsbac_target = T_NONE;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (!inode)
 		return -ENOENT;
 
@@ -1579,6 +1848,11 @@ int may_open(struct nameidata *nd, int a
 	if (S_ISDIR(inode->i_mode) && (acc_mode & MAY_WRITE))
 		return -EISDIR;
 
+#ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+	if(rsbac_dac_part_disabled(dentry))
+		error = 0;
+	else
+#endif
 	error = vfs_permission(nd, acc_mode);
 	if (error)
 		return error;
@@ -1612,6 +1886,75 @@ int may_open(struct nameidata *nd, int a
 		if (!is_owner_or_cap(inode))
 			return -EPERM;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[open_namei() [filp_open() [do_open() [sys_open()]]]]: calling ADF\n");
+	/* get target type and id clear */
+	if(   S_ISBLK(inode->i_mode)
+			|| S_ISCHR(inode->i_mode))
+	{
+		rsbac_target = T_DEV;
+		if(S_ISBLK(inode->i_mode))
+		{
+			rsbac_target_id.dev.type = D_block;
+		}
+		else
+		{
+			rsbac_target_id.dev.type = D_char;
+		}
+		rsbac_target_id.dev.major = RSBAC_MAJOR(inode->i_rdev);
+		rsbac_target_id.dev.minor = RSBAC_MINOR(inode->i_rdev);
+	} else /* must be file, dir or fifo */ {
+		if(S_ISDIR(inode->i_mode))
+			rsbac_target = T_DIR;
+		else if(S_ISSOCK(inode->i_mode))
+			rsbac_target = T_UNIXSOCK;
+		else if(S_ISFIFO(inode->i_mode)) {
+			if(inode->i_sb->s_magic != PIPEFS_MAGIC)
+				rsbac_target = T_FIFO;
+			else
+				rsbac_target = T_NONE;
+		} else
+			rsbac_target = T_FILE;
+
+		rsbac_target_id.file.device = inode->i_sb->s_dev;
+		rsbac_target_id.file.inode  = inode->i_ino;
+		rsbac_target_id.file.dentry_p = dentry;
+	}
+	/* determine request type */
+	rsbac_adf_req = R_NONE;
+	if (flag & O_APPEND)
+		rsbac_adf_req = R_APPEND_OPEN;
+	else
+		if ((flag & FMODE_WRITE) && (flag & FMODE_READ))
+			rsbac_adf_req = R_READ_WRITE_OPEN;
+		else
+			if (flag & FMODE_WRITE)
+				rsbac_adf_req = R_WRITE_OPEN;
+			else
+				if (flag & FMODE_READ)
+				{
+					if(rsbac_target == T_DIR)
+						rsbac_adf_req = R_READ;
+					else
+						rsbac_adf_req = R_READ_OPEN;
+				}
+	if (   (rsbac_adf_req != R_NONE)
+			&& (rsbac_target != T_NONE)
+	   )
+	{
+		rsbac_attribute_value.open_flag = flag;
+		if (!rsbac_adf_request(rsbac_adf_req,
+					current->pid,
+					rsbac_target,
+					rsbac_target_id,
+					A_open_flag,
+					rsbac_attribute_value))
+		{
+			return -EPERM;
+		}
+	}
+#endif /* CONFIG_RSBAC */
+
 	/*
 	 * Ensure there are no outstanding leases on the file.
 	 */
@@ -1640,6 +1983,27 @@ int may_open(struct nameidata *nd, int a
 		if (flag & FMODE_WRITE)
 			DQUOT_INIT(inode);
 
+#ifdef CONFIG_RSBAC
+	if (   (rsbac_adf_req != R_NONE)
+			&& (rsbac_target != T_NONE)
+	   )
+	{
+		rsbac_new_target_id.dummy = 0;
+		if (rsbac_adf_set_attr(rsbac_adf_req,
+					current->pid,
+					rsbac_target,
+					rsbac_target_id,
+					T_NONE,
+					rsbac_new_target_id,
+					A_open_flag,
+					rsbac_attribute_value))
+		{
+			rsbac_printk(KERN_WARNING
+					"open_namei() [filp_open() [do_open() [sys_open()]]]: rsbac_adf_set_attr() returned error\n");
+		}
+	}
+#endif
+
 	return 0;
 }
 
@@ -1683,6 +2047,11 @@ int open_namei(int dfd, const char *path
 	struct dentry *dir;
 	int count = 0;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	acc_mode = ACC_MODE(flag);
 
 	/* O_TRUNC implies we need access checks for write permissions */
@@ -1806,6 +2175,24 @@ do_link:
 	error = security_inode_follow_link(path.dentry, nd);
 	if (error)
 		goto exit_dput;
+
+#ifdef CONFIG_RSBAC
+	rsbac_target_id.dir.device = path.dentry->d_sb->s_dev;
+	rsbac_target_id.dir.inode  = path.dentry->d_inode->i_ino;
+	rsbac_target_id.dir.dentry_p = path.dentry;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_SEARCH,
+				current->pid,
+				T_SYMLINK,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		error = -EPERM;
+		goto exit_dput;
+	}
+#endif
+
 	error = __do_follow_link(&path, nd);
 	if (error) {
 		/* Does someone understand code flow here? Or it is only
@@ -1891,6 +2278,13 @@ int vfs_mknod(struct inode *dir, struct 
 {
 	int error = may_create(dir, dentry, NULL);
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	enum  rsbac_target_t          rsbac_new_target;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (error)
 		return error;
 
@@ -1904,10 +2298,58 @@ int vfs_mknod(struct inode *dir, struct 
 	if (error)
 		return error;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[sys_mknod()]: calling ADF\n");
+	rsbac_target_id.dir.device = dentry->d_sb->s_dev;
+	rsbac_target_id.dir.inode  = dir->i_ino;
+	rsbac_target_id.dir.dentry_p = dentry->d_parent;
+	rsbac_attribute_value.create_data.target = T_FILE;
+	rsbac_attribute_value.create_data.dentry_p = dentry;
+	rsbac_attribute_value.create_data.mode = mode;
+	rsbac_attribute_value.create_data.device = dev;
+	if (!rsbac_adf_request(R_CREATE,
+				current->pid,
+				T_DIR,
+				rsbac_target_id,
+				A_create_data,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
 	DQUOT_INIT(dir);
 	error = dir->i_op->mknod(dir, dentry, mode, dev);
-	if (!error)
+	if (!error) {
 		fsnotify_create(dir, dentry);
+
+#ifdef CONFIG_RSBAC
+		if(S_ISFIFO(dentry->d_inode->i_mode))
+			rsbac_new_target = T_FIFO;
+		else
+			if(S_ISLNK(dentry->d_inode->i_mode))
+				rsbac_new_target = T_SYMLINK;
+			else
+				if(S_ISSOCK(dentry->d_inode->i_mode))
+					rsbac_new_target = T_UNIXSOCK;
+				else
+					rsbac_new_target = T_FILE;
+		rsbac_new_target_id.dir.device = dentry->d_sb->s_dev;
+		rsbac_new_target_id.dir.inode  = dentry->d_inode->i_ino;
+		rsbac_new_target_id.dir.dentry_p = dentry;
+		if (rsbac_adf_set_attr(R_CREATE,
+					current->pid,
+					T_DIR,
+					rsbac_target_id,
+					rsbac_new_target,
+					rsbac_new_target_id,
+					A_create_data,
+					rsbac_attribute_value))
+		{
+			rsbac_pr_debug(aef, "[do_mknod(), sys_mknod()]: rsbac_adf_set_attr() returned error");
+		}
+#endif
+	}
 	return error;
 }
 
@@ -1970,6 +2412,12 @@ int vfs_mkdir(struct inode *dir, struct 
 {
 	int error = may_create(dir, dentry, NULL);
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (error)
 		return error;
 
@@ -1981,10 +2429,50 @@ int vfs_mkdir(struct inode *dir, struct 
 	if (error)
 		return error;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[sys_mkdir()]: calling ADF\n");
+	rsbac_target_id.dir.device = dentry->d_sb->s_dev;
+	rsbac_target_id.dir.inode  = dir->i_ino;
+	rsbac_target_id.dir.dentry_p = dentry->d_parent;
+	rsbac_attribute_value.create_data.target = T_DIR;
+	rsbac_attribute_value.create_data.dentry_p = dentry;
+	rsbac_attribute_value.create_data.mode = mode;
+	rsbac_attribute_value.create_data.device = 0;
+	rsbac_attribute_value.mode = mode;
+	if (!rsbac_adf_request(R_CREATE,
+				current->pid,
+				T_DIR,
+				rsbac_target_id,
+				A_create_data,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
 	DQUOT_INIT(dir);
 	error = dir->i_op->mkdir(dir, dentry, mode);
-	if (!error)
+	if (!error) {
 		fsnotify_mkdir(dir, dentry);
+
+#ifdef CONFIG_RSBAC
+		rsbac_new_target_id.dir.device = dentry->d_sb->s_dev;
+		rsbac_new_target_id.dir.inode  = dentry->d_inode->i_ino;
+		rsbac_new_target_id.dir.dentry_p = dentry;
+		if (rsbac_adf_set_attr(R_CREATE,
+					current->pid,
+					T_DIR,
+					rsbac_target_id,
+					T_DIR,
+					rsbac_new_target_id,
+					A_create_data,
+					rsbac_attribute_value))
+		{
+			rsbac_printk(KERN_WARNING
+					"vfs_mkdir() [sys_mkdir()]: rsbac_adf_set_attr() returned error");
+		}
+#endif
+	}
 	return error;
 }
 
@@ -2057,12 +2545,35 @@ int vfs_rmdir(struct inode *dir, struct 
 {
 	int error = may_delete(dir, dentry, 1);
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (error)
 		return error;
 
 	if (!dir->i_op || !dir->i_op->rmdir)
 		return -EPERM;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[do_rmdir() [sys_rmdir()]]: calling ADF\n");
+	rsbac_target_id.dir.device = dentry->d_sb->s_dev;
+	rsbac_target_id.dir.inode  = dentry->d_inode->i_ino;
+	rsbac_target_id.dir.dentry_p = dentry;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_DELETE,
+				current->pid,
+				T_DIR,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
 	DQUOT_INIT(dir);
 
 	mutex_lock(&dentry->d_inode->i_mutex);
@@ -2080,6 +2591,24 @@ int vfs_rmdir(struct inode *dir, struct 
 	mutex_unlock(&dentry->d_inode->i_mutex);
 	if (!error) {
 		d_delete(dentry);
+
+#ifdef CONFIG_RSBAC
+		{
+			rsbac_new_target_id.dummy = 0;
+			if (rsbac_adf_set_attr(R_DELETE,
+						current->pid,
+						T_DIR,
+						rsbac_target_id,
+						T_NONE,
+						rsbac_new_target_id,
+						A_none,
+						rsbac_attribute_value))
+			{
+				rsbac_printk(KERN_WARNING
+						"vfs_rmdir() [do_rmdir() [sys_rmdir()]]: rsbac_adf_set_attr() returned error");
+			}
+		}
+#endif
 	}
 	dput(dentry);
 
@@ -2137,6 +2666,13 @@ int vfs_unlink(struct inode *dir, struct
 {
 	int error = may_delete(dir, dentry, 0);
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (error)
 		return error;
 
@@ -2150,8 +2686,59 @@ int vfs_unlink(struct inode *dir, struct
 		error = -EBUSY;
 	else {
 		error = security_inode_unlink(dir, dentry);
-		if (!error)
+		if (!error) {
+#ifdef CONFIG_RSBAC
+			rsbac_pr_debug(aef, "[do_unlink() [sys_unlink()]]: calling ADF\n");
+			if(S_ISDIR(dentry->d_inode->i_mode))
+				rsbac_target = T_DIR;
+			else
+				if(S_ISFIFO(dentry->d_inode->i_mode))
+					rsbac_target = T_FIFO;
+				else
+					if(S_ISLNK(dentry->d_inode->i_mode))
+						rsbac_target = T_SYMLINK;
+					else
+					if(S_ISSOCK(dentry->d_inode->i_mode))
+						rsbac_target = T_UNIXSOCK;
+					else
+						rsbac_target = T_FILE;
+			rsbac_target_id.file.device = dentry->d_sb->s_dev;
+			rsbac_target_id.file.inode  = dentry->d_inode->i_ino;
+			rsbac_target_id.file.dentry_p = dentry;
+			rsbac_attribute_value.nlink = dentry->d_inode->i_nlink;
+			if (!rsbac_adf_request(R_DELETE,
+						current->pid,
+						rsbac_target,
+						rsbac_target_id,
+						A_nlink,
+						rsbac_attribute_value))
+			{
+				mutex_unlock(&dentry->d_inode->i_mutex);
+				return(-EPERM);
+			}
+#endif
+
 			error = dir->i_op->unlink(dir, dentry);
+
+#ifdef CONFIG_RSBAC
+			if (!error)
+			{
+				rsbac_new_target_id.dummy = 0;
+				if (rsbac_adf_set_attr(R_DELETE,
+							current->pid,
+							rsbac_target,
+							rsbac_target_id,
+							T_NONE,
+							rsbac_new_target_id,
+							A_nlink,
+							rsbac_attribute_value))
+				{
+					rsbac_printk(KERN_WARNING
+							"vfs_unlink() [do_unlink() [sys_unlink()]]: rsbac_adf_set_attr() returned error\n");
+				}
+			}
+#endif
+		}
 	}
 	mutex_unlock(&dentry->d_inode->i_mutex);
 
@@ -2236,6 +2823,12 @@ int vfs_symlink(struct inode *dir, struc
 {
 	int error = may_create(dir, dentry, NULL);
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (error)
 		return error;
 
@@ -2246,10 +2839,49 @@ int vfs_symlink(struct inode *dir, struc
 	if (error)
 		return error;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[do_symlink(), sys_symlink()]: calling ADF\n");
+	rsbac_target_id.dir.device = dentry->d_sb->s_dev;
+	rsbac_target_id.dir.inode  = dir->i_ino;
+	rsbac_target_id.dir.dentry_p = dentry->d_parent;
+	rsbac_attribute_value.create_data.target = T_SYMLINK;
+	rsbac_attribute_value.create_data.dentry_p = dentry;
+	rsbac_attribute_value.create_data.mode = 0;
+	rsbac_attribute_value.create_data.device = 0;
+	if (!rsbac_adf_request(R_CREATE,
+				current->pid,
+				T_DIR,
+				rsbac_target_id,
+				A_create_data,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
 	DQUOT_INIT(dir);
 	error = dir->i_op->symlink(dir, dentry, oldname);
-	if (!error)
+	if (!error) {
 		fsnotify_create(dir, dentry);
+
+#ifdef CONFIG_RSBAC
+		rsbac_new_target_id.file.device = dentry->d_sb->s_dev;
+		rsbac_new_target_id.file.inode  = dentry->d_inode->i_ino;
+		rsbac_new_target_id.file.dentry_p = dentry;
+		if (rsbac_adf_set_attr(R_CREATE,
+					current->pid,
+					T_DIR,
+					rsbac_target_id,
+					T_SYMLINK,
+					rsbac_new_target_id,
+					A_create_data,
+					rsbac_attribute_value))
+		{
+			rsbac_printk(KERN_WARNING
+					"vfs_symlink() [do_symlink(), sys_symlink()]: rsbac_adf_set_attr() returned error");
+		}
+#endif
+	}
 	return error;
 }
 
@@ -2300,6 +2932,12 @@ int vfs_link(struct dentry *old_dentry, 
 	struct inode *inode = old_dentry->d_inode;
 	int error;
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (!inode)
 		return -ENOENT;
 
@@ -2324,6 +2962,32 @@ int vfs_link(struct dentry *old_dentry, 
 	if (error)
 		return error;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[do_link() [sys_link()]]: calling ADF\n");
+	rsbac_target = T_FILE;
+	if (S_ISDIR (old_dentry->d_inode->i_mode))
+		rsbac_target = T_DIR;
+	else if (S_ISFIFO (old_dentry->d_inode->i_mode))
+		rsbac_target = T_FIFO;
+	else if (S_ISLNK (old_dentry->d_inode->i_mode))
+		rsbac_target = T_SYMLINK;
+	else if (S_ISSOCK (old_dentry->d_inode->i_mode))
+		rsbac_target = T_UNIXSOCK;
+	rsbac_target_id.dir.device = old_dentry->d_sb->s_dev;
+	rsbac_target_id.dir.inode  = old_dentry->d_inode->i_ino;
+	rsbac_target_id.dir.dentry_p = old_dentry;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_LINK_HARD,
+				current->pid,
+				rsbac_target,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
 	mutex_lock(&old_dentry->d_inode->i_mutex);
 	DQUOT_INIT(dir);
 	error = dir->i_op->link(old_dentry, dir, new_dentry);
@@ -2430,12 +3094,28 @@ static int vfs_rename_dir(struct inode *
 	int error = 0;
 	struct inode *target;
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target;
+	enum  rsbac_target_t          rsbac_target2 = T_NONE;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_target_id2;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+	union rsbac_attribute_value_t rsbac_attribute_value2;
+	rsbac_boolean_t target_exists = FALSE;
+#endif
+
 	/*
 	 * If we are going to change the parent - check write permissions,
 	 * we'll need to flip '..'.
 	 */
 	if (new_dir != old_dir) {
-		error = permission(old_dentry->d_inode, MAY_WRITE, NULL);
+#ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+		if(rsbac_dac_part_disabled(old_dentry))
+			error = 0;
+		else
+#endif
+			error = permission(old_dentry->d_inode, MAY_WRITE, NULL);
 		if (error)
 			return error;
 	}
@@ -2444,6 +3124,73 @@ static int vfs_rename_dir(struct inode *
 	if (error)
 		return error;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[vfs_rename_dir()]: calling ADF\n");
+	rsbac_target = T_FILE;
+	if (S_ISDIR(old_dentry->d_inode->i_mode))
+		rsbac_target = T_DIR;
+	else if (S_ISFIFO (old_dentry->d_inode->i_mode))
+		rsbac_target = T_FIFO;
+	else if (S_ISLNK (old_dentry->d_inode->i_mode))
+		rsbac_target = T_SYMLINK;
+	else if (S_ISSOCK (old_dentry->d_inode->i_mode))
+		rsbac_target = T_UNIXSOCK;
+	rsbac_target_id.file.device = old_dentry->d_sb->s_dev;
+	rsbac_target_id.file.inode  = old_dentry->d_inode->i_ino;
+	rsbac_target_id.file.dentry_p = old_dentry;
+	rsbac_attribute_value.new_dir_dentry_p = new_dentry->d_parent;
+	if (!rsbac_adf_request(R_RENAME,
+				current->pid,
+				rsbac_target,
+				rsbac_target_id,
+				A_new_dir_dentry_p,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+	rsbac_pr_debug(aef, "[vfs_rename_dir()]: calling ADF for WRITE on new_dir\n");
+	rsbac_target_id2.dir.device = new_dentry->d_sb->s_dev;
+	rsbac_target_id2.dir.inode  = new_dir->i_ino;
+	rsbac_target_id2.dir.dentry_p = new_dentry->d_parent;
+	rsbac_attribute_value2.dummy = 0;
+	if (!rsbac_adf_request(R_WRITE,
+				current->pid,
+				T_DIR,
+				rsbac_target_id2,
+				A_none,
+				rsbac_attribute_value2))
+	{
+		return -EPERM;
+	}
+	if(new_dentry->d_inode)
+	{
+		target_exists = TRUE;
+		rsbac_pr_debug(aef, "[vfs_rename_dir()]: calling ADF for DELETE on existing target\n");
+		rsbac_target2 = T_FILE;
+		if (S_ISDIR(new_dentry->d_inode->i_mode))
+			rsbac_target2 = T_DIR;
+		else if (S_ISFIFO (new_dentry->d_inode->i_mode))
+			rsbac_target2 = T_FIFO;
+		else if (S_ISLNK (new_dentry->d_inode->i_mode))
+			rsbac_target2 = T_SYMLINK;
+		else if (S_ISSOCK (new_dentry->d_inode->i_mode))
+			rsbac_target2 = T_UNIXSOCK;
+		rsbac_target_id2.file.device = new_dentry->d_sb->s_dev;
+		rsbac_target_id2.file.inode  = new_dentry->d_inode->i_ino;
+		rsbac_target_id2.file.dentry_p = new_dentry;
+		rsbac_attribute_value2.nlink = new_dentry->d_inode->i_nlink;
+		if (!rsbac_adf_request(R_DELETE,
+					current->pid,
+					rsbac_target2,
+					rsbac_target_id2,
+					A_nlink,
+					rsbac_attribute_value2))
+		{
+			return -EPERM;
+		}
+	}
+#endif /* CONFIG_RSBAC */
+
 	target = new_dentry->d_inode;
 	if (target) {
 		mutex_lock(&target->i_mutex);
@@ -2461,9 +3208,41 @@ static int vfs_rename_dir(struct inode *
 			d_rehash(new_dentry);
 		dput(new_dentry);
 	}
-	if (!error)
+	if (!error) {
 		if (!(old_dir->i_sb->s_type->fs_flags & FS_RENAME_DOES_D_MOVE))
 			d_move(old_dentry,new_dentry);
+
+#ifdef CONFIG_RSBAC
+		rsbac_new_target_id.dummy = 0;
+		if (rsbac_adf_set_attr(R_RENAME,
+					current->pid,
+					rsbac_target,
+					rsbac_target_id,
+					T_NONE,
+					rsbac_new_target_id,
+					A_new_dir_dentry_p,
+					rsbac_attribute_value))
+		{
+			rsbac_printk(KERN_WARNING
+				"do_rename() [sys_rename()]: rsbac_adf_set_attr() for RENAME returned error\n");
+		}
+		if (target_exists)
+		{
+			if (rsbac_adf_set_attr(R_DELETE,
+						current->pid,
+						rsbac_target2,
+						rsbac_target_id2,
+						T_NONE,
+						rsbac_new_target_id,
+						A_nlink,
+						rsbac_attribute_value2))
+			{
+				rsbac_printk(KERN_WARNING
+						"do_rename() [sys_rename()]: rsbac_adf_set_attr() for DELETE returned error\n");
+			}
+		}
+#endif
+	}
 	return error;
 }
 
@@ -2473,10 +3252,88 @@ static int vfs_rename_other(struct inode
 	struct inode *target;
 	int error;
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target;
+	enum  rsbac_target_t          rsbac_target2 = T_NONE;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_target_id2;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+	union rsbac_attribute_value_t rsbac_attribute_value2;
+	rsbac_boolean_t target_exists = FALSE;
+#endif
+
 	error = security_inode_rename(old_dir, old_dentry, new_dir, new_dentry);
 	if (error)
 		return error;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[sys_rename()]: calling ADF\n");
+	rsbac_target = T_FILE;
+	if (S_ISDIR(old_dentry->d_inode->i_mode))
+		rsbac_target = T_DIR;
+	else if (S_ISFIFO (old_dentry->d_inode->i_mode))
+		rsbac_target = T_FIFO;
+	else if (S_ISLNK (old_dentry->d_inode->i_mode))
+		rsbac_target = T_SYMLINK;
+	else if (S_ISSOCK (old_dentry->d_inode->i_mode))
+		rsbac_target = T_UNIXSOCK;
+	rsbac_target_id.file.device = old_dentry->d_sb->s_dev;
+	rsbac_target_id.file.inode  = old_dentry->d_inode->i_ino;
+	rsbac_target_id.file.dentry_p = old_dentry;
+	rsbac_attribute_value.new_dir_dentry_p = new_dentry->d_parent;
+	if (!rsbac_adf_request(R_RENAME,
+				current->pid,
+				rsbac_target,
+				rsbac_target_id,
+				A_new_dir_dentry_p,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+	rsbac_pr_debug(aef, "[sys_rename()]: calling ADF for WRITE on new_dir\n");
+	rsbac_target_id2.dir.device = new_dentry->d_sb->s_dev;
+	rsbac_target_id2.dir.inode  = new_dir->i_ino;
+	rsbac_target_id2.dir.dentry_p = new_dentry->d_parent;
+	rsbac_attribute_value2.dummy = 0;
+	if (!rsbac_adf_request(R_WRITE,
+				current->pid,
+				T_DIR,
+				rsbac_target_id2,
+				A_none,
+				rsbac_attribute_value2))
+	{
+		return -EPERM;
+	}
+	if(new_dentry->d_inode)
+	{
+		target_exists = TRUE;
+		rsbac_pr_debug(aef, "[sys_rename()]: calling ADF for DELETE on existing target\n");
+		rsbac_target2 = T_FILE;
+		if (S_ISDIR(new_dentry->d_inode->i_mode))
+			rsbac_target2 = T_DIR;
+		else if (S_ISFIFO (new_dentry->d_inode->i_mode))
+			rsbac_target2 = T_FIFO;
+		else if (S_ISLNK (new_dentry->d_inode->i_mode))
+			rsbac_target2 = T_SYMLINK;
+		else if (S_ISSOCK (new_dentry->d_inode->i_mode))
+			rsbac_target2 = T_UNIXSOCK;
+		rsbac_target_id2.file.device = new_dentry->d_sb->s_dev;
+		rsbac_target_id2.file.inode  = new_dentry->d_inode->i_ino;
+		rsbac_target_id2.file.dentry_p = new_dentry;
+		rsbac_attribute_value2.nlink = new_dentry->d_inode->i_nlink;
+		if (!rsbac_adf_request(R_DELETE,
+					current->pid,
+					rsbac_target2,
+					rsbac_target_id2,
+					A_nlink,
+					rsbac_attribute_value2))
+		{
+			return -EPERM;
+		}
+	}
+#endif /* CONFIG_RSBAC */
+
 	dget(new_dentry);
 	target = new_dentry->d_inode;
 	if (target)
@@ -2488,6 +3345,37 @@ static int vfs_rename_other(struct inode
 	if (!error) {
 		if (!(old_dir->i_sb->s_type->fs_flags & FS_RENAME_DOES_D_MOVE))
 			d_move(old_dentry, new_dentry);
+
+#ifdef CONFIG_RSBAC
+		rsbac_new_target_id.dummy = 0;
+		if (rsbac_adf_set_attr(R_RENAME,
+					current->pid,
+					rsbac_target,
+					rsbac_target_id,
+					T_NONE,
+					rsbac_new_target_id,
+					A_new_dir_dentry_p,
+					rsbac_attribute_value))
+		{
+			rsbac_printk(KERN_WARNING
+					"do_rename() [sys_rename()]: rsbac_adf_set_attr() returned error");
+		}
+		if (target_exists)
+		{
+			if (rsbac_adf_set_attr(R_DELETE,
+						current->pid,
+						rsbac_target2,
+						rsbac_target_id2,
+						T_NONE,
+						rsbac_new_target_id,
+						A_nlink,
+						rsbac_attribute_value2))
+			{
+				rsbac_printk(KERN_WARNING
+						"do_rename() [sys_rename()]: rsbac_adf_set_attr() returned error");
+			}
+		}
+#endif
 	}
 	if (target)
 		mutex_unlock(&target->i_mutex);
@@ -2643,6 +3531,9 @@ asmlinkage long sys_rename(const char __
 int vfs_readlink(struct dentry *dentry, char __user *buffer, int buflen, const char *link)
 {
 	int len;
+#ifdef CONFIG_RSBAC_SYM_REDIR
+	char * rsbac_name;
+#endif
 
 	len = PTR_ERR(link);
 	if (IS_ERR(link))
@@ -2651,8 +3542,21 @@ int vfs_readlink(struct dentry *dentry, 
 	len = strlen(link);
 	if (len > (unsigned) buflen)
 		len = buflen;
+
+#ifdef CONFIG_RSBAC_SYM_REDIR
+	rsbac_name = rsbac_symlink_redirect(dentry, link, buflen);
+	if(rsbac_name)
+	{
+		len = strlen(rsbac_name);
+		if (copy_to_user(buffer, rsbac_name, len))
+			len = -EFAULT;
+		kfree(rsbac_name);
+	}
+	else
+#endif
 	if (copy_to_user(buffer, link, len))
 		len = -EFAULT;
+
 out:
 	return len;
 }
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/namespace.c linux-2.6.23.14-rsbac-1.3.7/fs/namespace.c
--- trunk/fs/namespace.c	2008-02-13 16:25:24.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/namespace.c	2008-02-13 13:24:51.000000000 +0100
@@ -27,6 +27,7 @@
 #include <linux/ramfs.h>
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
+#include <rsbac/hooks.h>
 #include "pnode.h"
 #include "internal.h"
 
@@ -540,6 +541,12 @@ static int do_umount(struct vfsmount *mn
 	int retval;
 	LIST_HEAD(umount_list);
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	retval = security_sb_umount(mnt, flags);
 	if (retval)
 		return retval;
@@ -562,6 +569,47 @@ static int do_umount(struct vfsmount *mn
 			return -EAGAIN;
 	}
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF for DIR\n");
+        rsbac_target_id.dir.device = sb->s_root->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = sb->s_root->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = sb->s_root;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_UMOUNT,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        rsbac_pr_debug(aef, "calling ADF for dev\n");
+        rsbac_target_id.dev.type = D_block;
+        rsbac_target_id.dev.major = RSBAC_MAJOR(sb->s_dev);
+        rsbac_target_id.dev.minor = RSBAC_MINOR(sb->s_dev);
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_UMOUNT,
+                               current->pid,
+                               T_DEV,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
+        /* RSBAC: removing data structures for this fs from memory (not /) */
+        #ifdef CONFIG_RSBAC
+	if ((mnt != current->fs->rootmnt) || (flags & MNT_DETACH)) {
+	        rsbac_pr_debug(ds, "[sys_umount()]: calling rsbac_umount for Device %02u:%02u\n",
+                   MAJOR(sb->s_dev), MINOR(sb->s_dev));
+                   rsbac_umount(sb, mnt->mnt_mountpoint);
+	}
+        #endif
+
 	/*
 	 * If we may have to abort operations to get out of this
 	 * mount, and they will themselves hold resources we must
@@ -591,6 +639,7 @@ static int do_umount(struct vfsmount *mn
 		 * Special case for "unmounting" root ...
 		 * we just try to remount it readonly.
 		 */
+
 		down_write(&sb->s_umount);
 		if (!(sb->s_flags & MS_RDONLY)) {
 			lock_kernel();
@@ -603,6 +652,7 @@ static int do_umount(struct vfsmount *mn
 	}
 
 	down_write(&namespace_sem);
+
 	spin_lock(&vfsmount_lock);
 	event++;
 
@@ -615,6 +665,18 @@ static int do_umount(struct vfsmount *mn
 	spin_unlock(&vfsmount_lock);
 	if (retval)
 		security_sb_umount_busy(mnt);
+
+#ifdef CONFIG_RSBAC
+	/* RSBAC: umount failed, so reread data structures for this fs from disk */
+	if(retval)
+	{
+		rsbac_printk(KERN_WARNING
+				"do_umount() [sys_umount()]: umount failed -> calling rsbac_mount for Device %02u:%02u\n",
+				MAJOR(mnt->mnt_sb->s_dev),MINOR(mnt->mnt_sb->s_dev));
+		rsbac_mount(mnt->mnt_sb, mnt->mnt_mountpoint);
+	}
+#endif
+
 	up_write(&namespace_sem);
 	release_mounts(&umount_list);
 	return retval;
@@ -869,6 +931,17 @@ out_unlock:
 	mutex_unlock(&nd->dentry->d_inode->i_mutex);
 	if (!err)
 		security_sb_post_addmount(mnt, nd);
+
+        /* RSBAC: initialising data structures for this fs (not root fs) */
+#ifdef CONFIG_RSBAC
+        if (!err) {
+		rsbac_pr_debug(ds, "[do_loopback(), do_add_mount() [sys_mount()]]: calling rsbac_mount for Device %02u:%02u\n",
+			       MAJOR(mnt->mnt_sb->s_dev),
+			       MINOR(mnt->mnt_sb->s_dev));
+		rsbac_mount(mnt->mnt_sb, mnt->mnt_mountpoint);
+	}
+#endif
+
 	return err;
 }
 
@@ -904,6 +977,14 @@ static int do_loopback(struct nameidata 
 	struct nameidata old_nd;
 	struct vfsmount *mnt = NULL;
 	int err = mount_is_safe(nd);
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (err)
 		return err;
 	if (!old_name || !*old_name)
@@ -912,6 +993,57 @@ static int do_loopback(struct nameidata 
 	if (err)
 		return err;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[do_mount() [sys_mount()]]: calling ADF for DIR\n");
+	rsbac_target_id.dir.device = nd->dentry->d_sb->s_dev;
+	rsbac_target_id.dir.inode  = nd->dentry->d_inode->i_ino;
+	rsbac_target_id.dir.dentry_p = nd->dentry;
+	rsbac_attribute_value.mode = recurse;
+	if (!rsbac_adf_request(R_MOUNT,
+				current->pid,
+				T_DIR,
+				rsbac_target_id,
+				A_mode,
+				rsbac_attribute_value))
+	{
+		path_release(&old_nd);
+		return -EPERM;
+	}
+	rsbac_pr_debug(aef, "[do_mount() [sys_mount()]]: calling ADF for DEV\n");
+	if(S_ISBLK(old_nd.dentry->d_inode->i_mode))
+	{
+		rsbac_target = T_DEV;
+		rsbac_target_id.dev.type = D_block;
+		rsbac_target_id.dev.major = RSBAC_MAJOR(old_nd.dentry->d_sb->s_dev);
+		rsbac_target_id.dev.minor = RSBAC_MINOR(old_nd.dentry->d_sb->s_dev);
+	}
+	else
+		if(S_ISDIR(old_nd.dentry->d_inode->i_mode))
+		{
+			rsbac_target = T_DIR;
+			rsbac_target_id.dir.device = old_nd.dentry->d_sb->s_dev;
+			rsbac_target_id.dir.inode  = old_nd.dentry->d_inode->i_ino;
+			rsbac_target_id.dir.dentry_p = old_nd.dentry;
+		}
+		else
+		{
+			rsbac_target = T_FILE;
+			rsbac_target_id.file.device = old_nd.dentry->d_sb->s_dev;
+			rsbac_target_id.file.inode  = old_nd.dentry->d_inode->i_ino;
+			rsbac_target_id.file.dentry_p = old_nd.dentry;
+		}
+	if (!rsbac_adf_request(R_MOUNT,
+				current->pid,
+				rsbac_target,
+				rsbac_target_id,
+				A_mode,
+				rsbac_attribute_value))
+	{
+		path_release(&old_nd);
+		return -EPERM;
+	}
+#endif
+
 	down_write(&namespace_sem);
 	err = -EINVAL;
 	if (IS_MNT_UNBINDABLE(old_nd.mnt))
@@ -955,6 +1087,12 @@ static int do_remount(struct nameidata *
 	int err;
 	struct super_block *sb = nd->mnt->mnt_sb;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
 
@@ -964,6 +1102,37 @@ static int do_remount(struct nameidata *
 	if (nd->dentry != nd->mnt->mnt_root)
 		return -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "[do_mount() [sys_mount()]]: calling ADF for DIR\n");
+        rsbac_target_id.dir.device = nd->dentry->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = nd->dentry->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = nd->dentry;
+        rsbac_attribute_value.mode = flags;
+        if (!rsbac_adf_request(R_MOUNT,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_mode,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        rsbac_pr_debug(aef, "[do_mount() [sys_mount()]]: calling ADF for DEV\n");
+        rsbac_target_id.dev.type = D_block;
+        rsbac_target_id.dev.major = RSBAC_MAJOR(sb->s_dev);
+        rsbac_target_id.dev.minor = RSBAC_MINOR(sb->s_dev);
+        if (!rsbac_adf_request(R_MOUNT,
+                               current->pid,
+                               T_DEV,
+                               rsbac_target_id,
+                               A_mode,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	down_write(&sb->s_umount);
 	err = do_remount_sb(sb, flags, data, 0);
 	if (!err)
@@ -989,6 +1158,13 @@ static int do_move_mount(struct nameidat
 	struct nameidata old_nd, parent_nd;
 	struct vfsmount *p;
 	int err = 0;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
 	if (!old_name || !*old_name)
@@ -997,6 +1173,64 @@ static int do_move_mount(struct nameidat
 	if (err)
 		return err;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[do_mount() [sys_mount()]]: calling ADF for UMOUNT on old DIR\n");
+	rsbac_target_id.dir.device = old_nd.dentry->d_sb->s_dev;
+	rsbac_target_id.dir.inode  = old_nd.dentry->d_inode->i_ino;
+	rsbac_target_id.dir.dentry_p = old_nd.dentry;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_UMOUNT,
+				current->pid,
+				T_DIR,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		path_release(&old_nd);
+		return -EPERM;
+	}
+	rsbac_pr_debug(aef, "[do_mount() [sys_mount()]]: calling ADF for MOUNT on new DIR\n");
+	rsbac_target_id.dir.device = nd->dentry->d_sb->s_dev;
+	rsbac_target_id.dir.inode  = nd->dentry->d_inode->i_ino;
+	rsbac_target_id.dir.dentry_p = nd->dentry;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MOUNT,
+				current->pid,
+				T_DIR,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		path_release(&old_nd);
+		return -EPERM;
+	}
+	rsbac_pr_debug(aef, "[do_mount() [sys_mount()]]: calling ADF for UMOUNT on DEV\n");
+	rsbac_target_id.dev.type = D_block;
+	rsbac_target_id.dev.major = RSBAC_MAJOR(old_nd.dentry->d_sb->s_dev);
+	rsbac_target_id.dev.minor = RSBAC_MINOR(old_nd.dentry->d_sb->s_dev);
+	if (!rsbac_adf_request(R_UMOUNT,
+				current->pid,
+				T_DEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		path_release(&old_nd);
+		return -EPERM;
+	}
+	rsbac_pr_debug(aef, "[do_mount() [sys_mount()]]: calling ADF for MOUNT on DEV\n");
+	if (!rsbac_adf_request(R_MOUNT,
+				current->pid,
+				T_DEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		path_release(&old_nd);
+		return -EPERM;
+	}
+#endif
+
 	down_write(&namespace_sem);
 	while (d_mountpoint(nd->dentry) && follow_down(&nd->mnt, &nd->dentry))
 		;
@@ -1088,6 +1322,11 @@ int do_add_mount(struct vfsmount *newmnt
 {
 	int err;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	down_write(&namespace_sem);
 	/* Something was mounted here while we slept */
 	while (d_mountpoint(nd->dentry) && follow_down(&nd->mnt, &nd->dentry))
@@ -1106,6 +1345,40 @@ int do_add_mount(struct vfsmount *newmnt
 	if (S_ISLNK(newmnt->mnt_root->d_inode->i_mode))
 		goto unlock;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "[do_mount() [sys_mount()]]: calling ADF for DIR\n");
+        rsbac_target_id.dir.device = nd->dentry->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = nd->dentry->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = nd->dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MOUNT,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            err = -EPERM;
+            goto unlock;
+          }
+        rsbac_pr_debug(aef, "[do_mount() [sys_mount()]]: calling ADF for DEV\n");
+        rsbac_target_id.dev.type = D_block;
+        rsbac_target_id.dev.major = RSBAC_MAJOR(newmnt->mnt_sb->s_dev);
+        rsbac_target_id.dev.minor = RSBAC_MINOR(newmnt->mnt_sb->s_dev);
+        rsbac_attribute_value.mode = mnt_flags;
+        if (!rsbac_adf_request(R_MOUNT,
+                               current->pid,
+                               T_DEV,
+                               rsbac_target_id,
+                               A_mode,
+                               rsbac_attribute_value))
+          {
+            err = -EPERM;
+            goto unlock;
+          }
+        #endif
+
 	newmnt->mnt_flags = mnt_flags;
 	if ((err = graft_tree(newmnt, nd)))
 		goto unlock;
@@ -1670,6 +1943,12 @@ asmlinkage long sys_pivot_root(const cha
 	struct nameidata new_nd, old_nd, parent_nd, root_parent, user_nd;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
 
@@ -1693,6 +1972,45 @@ asmlinkage long sys_pivot_root(const cha
 		goto out1;
 	}
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF for MOUNT on put_old\n");
+        rsbac_target_id.dir.device = old_nd.dentry->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = old_nd.dentry->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = old_nd.dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MOUNT,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            path_release(&old_nd);
+            error = -EPERM;
+            goto out1;
+          }
+        rsbac_pr_debug(aef, "calling ADF for MOUNT on root DIR\n");
+        rsbac_target_id.dir.device = current->fs->rootmnt->mnt_sb->s_dev;
+        rsbac_target_id.dir.inode  = current->fs->root->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = current->fs->root;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MOUNT,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            path_release(&old_nd);
+            error = -EPERM;
+            goto out1;
+          }
+
+        /* Make the new root's cached rsbac.dat dentry be put to free the old root's dcache */
+        rsbac_free_dat_dentries();
+        #endif
+
 	read_lock(&current->fs->lock);
 	user_nd.mnt = mntget(current->fs->rootmnt);
 	user_nd.dentry = dget(current->fs->root);
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/open.c linux-2.6.23.14-rsbac-1.3.7/fs/open.c
--- trunk/fs/open.c	2008-02-13 16:25:55.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/open.c	2008-02-13 13:25:48.000000000 +0100
@@ -28,11 +28,38 @@
 #include <linux/audit.h>
 #include <linux/falloc.h>
 
+#ifdef CONFIG_RSBAC
+#include <net/sock.h>
+#endif
+#include <rsbac/hooks.h>
+
 int vfs_statfs(struct dentry *dentry, struct kstatfs *buf)
 {
 	int retval = -ENODEV;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (dentry) {
+#ifdef CONFIG_RSBAC
+		rsbac_pr_debug(aef, "calling ADF\n");
+		rsbac_target_id.dev.type = D_block;
+		rsbac_target_id.dev.major = RSBAC_MAJOR(dentry->d_sb->s_dev);
+		rsbac_target_id.dev.minor = RSBAC_MINOR(dentry->d_sb->s_dev);
+		rsbac_attribute_value.dummy = 0;
+		if (!rsbac_adf_request(R_GET_STATUS_DATA,
+					current->pid,
+					T_DEV,
+					rsbac_target_id,
+					A_none,
+					rsbac_attribute_value))
+		{
+			return -EPERM;
+		}
+#endif
+
 		retval = -ENOSYS;
 		if (dentry->d_sb->s_op->statfs) {
 			memset(buf, 0, sizeof(*buf));
@@ -200,10 +227,43 @@ int do_truncate(struct dentry *dentry, l
 	int err;
 	struct iattr newattrs;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #ifdef CONFIG_RSBAC_SECDEL
+        loff_t old_len = dentry->d_inode->i_size;
+        #endif
+        #endif
+
 	/* Not pretty: "inode->i_size" shouldn't really be signed. But it is. */
 	if (length < 0)
 		return -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[open_namei(), do_sys_truncate() [sys_truncate()]]: calling ADF\n");
+        rsbac_target_id.file.device = dentry->d_inode->i_sb->s_dev;
+        rsbac_target_id.file.inode  = dentry->d_inode->i_ino;
+        rsbac_target_id.file.dentry_p = dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_TRUNCATE,
+                               current->pid,
+                               T_FILE,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
+        /* RSBAC: Overwrite truncated part, if asked by flag */
+        #ifdef CONFIG_RSBAC_SECDEL
+        rsbac_sec_trunc(dentry, length, old_len);
+        #endif
+
 	newattrs.ia_size = length;
 	newattrs.ia_valid = ATTR_SIZE | time_attrs;
 	if (filp) {
@@ -217,6 +277,27 @@ int do_truncate(struct dentry *dentry, l
 	mutex_lock(&dentry->d_inode->i_mutex);
 	err = notify_change(dentry, &newattrs);
 	mutex_unlock(&dentry->d_inode->i_mutex);
+
+        #ifdef CONFIG_RSBAC
+        if (!err)
+          {
+	    rsbac_pr_debug(aef, "[open_namei(), do_sys_truncate() [sys_truncate()]]: notifying ADF\n");
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(R_TRUNCATE,
+                                   current->pid,
+                                   T_FILE,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "do_truncate() [open_namei(), do_sys_truncate() [sys_truncate()]]: rsbac_adf_set_attr() returned error\n");
+              }
+          }
+        #endif
+
 	return err;
 }
 
@@ -244,6 +325,11 @@ static long do_sys_truncate(const char _
 	if (!S_ISREG(inode->i_mode))
 		goto dput_and_out;
 
+#ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+	if(rsbac_dac_part_disabled(nd.dentry))
+		error = 0;
+	else
+#endif
 	error = vfs_permission(&nd, MAY_WRITE);
 	if (error)
 		goto dput_and_out;
@@ -425,6 +511,13 @@ asmlinkage long sys_faccessat(int dfd, c
 	kernel_cap_t old_cap;
 	int res;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
 		return -EINVAL;
 
@@ -443,15 +536,47 @@ asmlinkage long sys_faccessat(int dfd, c
 	 * value below.  We should hold task_capabilities_lock,
 	 * but we cannot because user_path_walk can sleep.
 	 */
-	if (current->uid)
+	if (current->uid) {
+                #ifdef CONFIG_RSBAC_FAKE_ROOT_UID
+                if(!rsbac_uid_faked())
+                #endif
 		cap_clear(current->cap_effective);
+	}
 	else
 		current->cap_effective = current->cap_permitted;
 
 	res = __user_walk_fd(dfd, filename, LOOKUP_FOLLOW|LOOKUP_ACCESS, &nd);
+
 	if (res)
 		goto out;
 
+	/* RSBAC */
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target = T_FILE;
+	if (S_ISDIR(nd.dentry->d_inode->i_mode))
+		rsbac_target = T_DIR;
+	else if (S_ISFIFO(nd.dentry->d_inode->i_mode))
+		rsbac_target = T_FIFO;
+	else if (S_ISLNK(nd.dentry->d_inode->i_mode))
+		rsbac_target = T_SYMLINK;
+	else if (S_ISSOCK(nd.dentry->d_inode->i_mode))
+		rsbac_target = T_UNIXSOCK;
+	rsbac_target_id.file.device = nd.dentry->d_inode->i_sb->s_dev;
+	rsbac_target_id.file.inode  = nd.dentry->d_inode->i_ino;
+	rsbac_target_id.file.dentry_p = nd.dentry;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_GET_PERMISSIONS_DATA,
+				current->pid,
+				rsbac_target,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value)) {
+		res = -EPERM;
+		goto out_path_release;
+	}
+#endif
+
 	res = vfs_permission(&nd, mode);
 	/* SuS v2 requires we report a read only fs too */
 	if(res || !(mode & S_IWOTH) ||
@@ -481,15 +606,45 @@ asmlinkage long sys_chdir(const char __u
 	struct nameidata nd;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = __user_walk(filename,
 			    LOOKUP_FOLLOW|LOOKUP_DIRECTORY|LOOKUP_CHDIR, &nd);
 	if (error)
 		goto out;
 
+#ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+	if(rsbac_dac_part_disabled(nd.dentry))
+		error = 0;
+	else
+#endif
 	error = vfs_permission(&nd, MAY_EXEC);
 	if (error)
 		goto dput_and_out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.dir.device = nd.dentry->d_inode->i_sb->s_dev;
+        rsbac_target_id.dir.inode  = nd.dentry->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = nd.dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_CHDIR,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            error = -EPERM;
+            goto dput_and_out;
+          }
+        #endif
+
 	set_fs_pwd(current->fs, nd.mnt, nd.dentry);
 
 dput_and_out:
@@ -506,6 +661,12 @@ asmlinkage long sys_fchdir(unsigned int 
 	struct vfsmount *mnt;
 	int error;
 
+	/* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = -EBADF;
 	file = fget(fd);
 	if (!file)
@@ -519,7 +680,33 @@ asmlinkage long sys_fchdir(unsigned int 
 	if (!S_ISDIR(inode->i_mode))
 		goto out_putf;
 
+#ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+	if(rsbac_dac_part_disabled(dentry))
+		error = 0;
+	else
+#endif
 	error = file_permission(file, MAY_EXEC);
+
+#ifdef CONFIG_RSBAC
+	if(!error)
+	{
+		rsbac_pr_debug(aef, "calling ADF\n");
+		rsbac_target_id.dir.device = inode->i_sb->s_dev;
+		rsbac_target_id.dir.inode  = inode->i_ino;
+		rsbac_target_id.dir.dentry_p = dentry;
+		rsbac_attribute_value.dummy = 0;
+		if (!rsbac_adf_request(R_CHDIR,
+					current->pid,
+					T_DIR,
+					rsbac_target_id,
+					A_none,
+					rsbac_attribute_value))
+		{
+			error = -EPERM;
+		}
+	}
+#endif
+
 	if (!error)
 		set_fs_pwd(current->fs, mnt, dentry);
 out_putf:
@@ -533,10 +720,21 @@ asmlinkage long sys_chroot(const char __
 	struct nameidata nd;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = __user_walk(filename, LOOKUP_FOLLOW | LOOKUP_DIRECTORY | LOOKUP_NOALT, &nd);
 	if (error)
 		goto out;
 
+#ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+	if(rsbac_dac_part_disabled(nd.dentry))
+		error = 0;
+	else
+#endif
 	error = vfs_permission(&nd, MAY_EXEC);
 	if (error)
 		goto dput_and_out;
@@ -545,6 +743,25 @@ asmlinkage long sys_chroot(const char __
 	if (!capable(CAP_SYS_CHROOT))
 		goto dput_and_out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.dir.device = nd.dentry->d_inode->i_sb->s_dev;
+        rsbac_target_id.dir.inode  = nd.dentry->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = nd.dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_CHDIR,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            error = -EPERM;
+            goto dput_and_out;
+          }
+        #endif
+
 	set_fs_root(current->fs, nd.mnt, nd.dentry);
 	set_fs_altroot();
 	error = 0;
@@ -562,6 +779,13 @@ asmlinkage long sys_fchmod(unsigned int 
 	int err = -EBADF;
 	struct iattr newattrs;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	file = fget(fd);
 	if (!file)
 		goto out;
@@ -577,6 +801,41 @@ asmlinkage long sys_fchmod(unsigned int 
 	err = -EPERM;
 	if (IS_IMMUTABLE(inode) || IS_APPEND(inode))
 		goto out_putf;
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target = T_FILE;
+	rsbac_target_id.file.device = inode->i_sb->s_dev;
+	rsbac_target_id.file.inode  = inode->i_ino;
+	rsbac_target_id.file.dentry_p = dentry;
+	if (S_ISDIR(inode->i_mode))
+		rsbac_target = T_DIR;
+	else if (S_ISFIFO(inode->i_mode))
+		rsbac_target = T_FIFO;
+	else if (S_ISLNK(inode->i_mode))
+		rsbac_target = T_SYMLINK;
+	else if (S_ISSOCK(inode->i_mode)) {
+		if(inode->i_sb->s_magic == SOCKFS_MAGIC) {
+			rsbac_target = T_IPC;
+			rsbac_target_id.ipc.type = I_anonunix;
+			rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+		} else {
+			rsbac_target = T_UNIXSOCK;
+		}
+	}
+	rsbac_attribute_value.mode = mode;
+	if (!rsbac_adf_request(R_MODIFY_PERMISSIONS_DATA,
+				current->pid,
+				rsbac_target,
+				rsbac_target_id,
+				A_mode,
+				rsbac_attribute_value))
+	{
+		err = -EPERM;
+		goto out_putf;
+	}
+#endif
+        
 	mutex_lock(&inode->i_mutex);
 	if (mode == (mode_t) -1)
 		mode = inode->i_mode;
@@ -599,6 +858,12 @@ asmlinkage long sys_fchmodat(int dfd, co
 	int error;
 	struct iattr newattrs;
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	error = __user_walk_fd(dfd, filename, LOOKUP_FOLLOW, &nd);
 	if (error)
 		goto out;
@@ -612,6 +877,40 @@ asmlinkage long sys_fchmodat(int dfd, co
 	if (IS_IMMUTABLE(inode) || IS_APPEND(inode))
 		goto dput_and_out;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target = T_FILE;
+	rsbac_target_id.file.device = inode->i_sb->s_dev;
+	rsbac_target_id.file.inode  = inode->i_ino;
+	rsbac_target_id.file.dentry_p = nd.dentry;
+	if (S_ISDIR(inode->i_mode))
+		rsbac_target = T_DIR;
+	else if (S_ISFIFO(inode->i_mode))
+		rsbac_target = T_FIFO;
+	else if (S_ISLNK(inode->i_mode))
+		rsbac_target = T_SYMLINK;
+	else if (S_ISSOCK(inode->i_mode)) {
+		if(inode->i_sb->s_magic == SOCKFS_MAGIC) {
+			rsbac_target = T_IPC;
+			rsbac_target_id.ipc.type = I_anonunix;
+			rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+		} else {
+			rsbac_target = T_UNIXSOCK;
+		}
+	}
+	rsbac_attribute_value.mode = mode;
+	if (!rsbac_adf_request(R_MODIFY_PERMISSIONS_DATA,
+				current->pid,
+				rsbac_target,
+				rsbac_target_id,
+				A_mode,
+				rsbac_attribute_value))
+	{
+		error = -EPERM;
+		goto dput_and_out;
+	}
+#endif
+
 	mutex_lock(&inode->i_mutex);
 	if (mode == (mode_t) -1)
 		mode = inode->i_mode;
@@ -637,6 +936,13 @@ static int chown_common(struct dentry * 
 	int error;
 	struct iattr newattrs;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = -ENOENT;
 	if (!(inode = dentry->d_inode)) {
 		printk(KERN_ERR "chown_common: NULL inode\n");
@@ -648,6 +954,34 @@ static int chown_common(struct dentry * 
 	error = -EPERM;
 	if (IS_IMMUTABLE(inode) || IS_APPEND(inode))
 		goto out;
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[sys_*chown]: calling ADF\n");
+	rsbac_target = T_FILE;
+	if (S_ISDIR(inode->i_mode))
+		rsbac_target = T_DIR;
+	else if (S_ISFIFO(inode->i_mode))
+		rsbac_target = T_FIFO;
+	else if (S_ISLNK(inode->i_mode))
+		rsbac_target = T_SYMLINK;
+	else if (S_ISSOCK(inode->i_mode))
+		rsbac_target = T_UNIXSOCK;
+	rsbac_target_id.file.device = inode->i_sb->s_dev;
+	rsbac_target_id.file.inode  = inode->i_ino;
+	rsbac_target_id.file.dentry_p = dentry;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_CHANGE_OWNER,
+				current->pid,
+				rsbac_target,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		error = -EPERM;
+		goto out;
+	}
+#endif
+
 	newattrs.ia_valid =  ATTR_CTIME;
 	if (user != (uid_t) -1) {
 		newattrs.ia_valid |= ATTR_UID;
@@ -659,6 +993,7 @@ static int chown_common(struct dentry * 
 	}
 	if (!S_ISDIR(inode->i_mode))
 		newattrs.ia_valid |= ATTR_KILL_SUID|ATTR_KILL_SGID;
+
 	mutex_lock(&inode->i_mutex);
 	error = notify_change(dentry, &newattrs);
 	mutex_unlock(&inode->i_mutex);
@@ -1093,16 +1428,126 @@ int filp_close(struct file *filp, fl_own
 {
 	int retval = 0;
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target = T_NONE;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (!file_count(filp)) {
 		printk(KERN_ERR "VFS: Close: file count is 0\n");
 		return 0;
 	}
 
+        /* RSBAC: calling adf */
+        #ifdef CONFIG_RSBAC
+        if (   filp
+            && filp->f_dentry
+            && filp->f_dentry->d_inode
+	   )
+          {
+            rsbac_pr_debug(aef, "[sys_close]: calling ADF\n");
+            rsbac_target = T_NONE;
+            if(   S_ISBLK(filp->f_dentry->d_inode->i_mode)
+               || S_ISCHR(filp->f_dentry->d_inode->i_mode))
+              {
+                rsbac_target = T_DEV;
+                if(S_ISBLK(filp->f_dentry->d_inode->i_mode))
+                  {
+                    rsbac_target_id.dev.type = D_block;
+                  }
+                else
+                  {
+                    rsbac_target_id.dev.type = D_char;
+                  }
+                rsbac_target_id.dev.major = RSBAC_MAJOR(filp->f_dentry->d_inode->i_sb->s_dev);
+                rsbac_target_id.dev.minor = RSBAC_MINOR(filp->f_dentry->d_inode->i_sb->s_dev);
+              }
+	    else
+            if(S_ISSOCK(filp->f_dentry->d_inode->i_mode))
+              {
+                if(   SOCKET_I(filp->f_dentry->d_inode)->ops
+                   && (SOCKET_I(filp->f_dentry->d_inode)->ops->family == AF_UNIX)
+                  )
+                  {
+                    if(filp->f_dentry->d_sb->s_magic == SOCKFS_MAGIC) {
+                      rsbac_target = T_IPC;
+                      rsbac_target_id.ipc.type = I_anonunix;
+                      rsbac_target_id.ipc.id.id_nr = filp->f_dentry->d_inode->i_ino;
+                    } else {
+			rsbac_target = T_UNIXSOCK;
+                        rsbac_target_id.unixsock.device = filp->f_dentry->d_sb->s_dev;
+                        rsbac_target_id.unixsock.inode  = filp->f_dentry->d_inode->i_ino;
+                        rsbac_target_id.unixsock.dentry_p = filp->f_dentry;
+                    }
+                  }
+                else
+                  {
+                    rsbac_target = T_NETOBJ;
+                    rsbac_target_id.netobj.sock_p
+                      = SOCKET_I(filp->f_dentry->d_inode);
+                    rsbac_target_id.netobj.local_addr = NULL;
+                    rsbac_target_id.netobj.local_len = 0;
+                    rsbac_target_id.netobj.remote_addr = NULL;
+                    rsbac_target_id.netobj.remote_len = 0;
+                  }
+              }
+            else /* must be file, fifo or dir */
+              {
+                if(S_ISDIR(filp->f_dentry->d_inode->i_mode))
+                  rsbac_target = T_DIR;
+                else if(S_ISFIFO(filp->f_dentry->d_inode->i_mode))
+                  rsbac_target = T_FIFO;
+                else
+                  rsbac_target = T_FILE;
+                rsbac_target_id.file.device = filp->f_dentry->d_inode->i_sb->s_dev;
+                rsbac_target_id.file.inode  = filp->f_dentry->d_inode->i_ino;
+                rsbac_target_id.file.dentry_p = filp->f_dentry;
+              }
+            rsbac_attribute_value.f_mode = filp->f_mode;
+            if ((rsbac_target != T_NONE) && !rsbac_adf_request(R_CLOSE,
+                                   current->pid,
+                                   rsbac_target,
+                                   rsbac_target_id,
+                                   A_f_mode,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING "filp_close() [sys_close]: ADF-call returned NOT_GRANTED\n");
+                /*return -EPERM;*/
+              }
+          }
+        #endif /* RSBAC */
+
 	if (filp->f_op && filp->f_op->flush)
 		retval = filp->f_op->flush(filp, id);
 
 	dnotify_flush(filp, id);
 	locks_remove_posix(filp, id);
+
+        /* RSBAC: notifying adf */
+        #ifdef CONFIG_RSBAC
+        if (rsbac_target != T_NONE)
+          {
+            rsbac_pr_debug(aef, "[sys_close]: notifying ADF\n");
+            rsbac_new_target_id.dummy = 0;
+            rsbac_attribute_value.f_mode = filp->f_mode;
+            if (rsbac_adf_set_attr(R_CLOSE,
+                                   current->pid,
+                                   rsbac_target,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_f_mode,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "filp_close() [sys_close]: rsbac_adf_set_attr() returned error\n");
+              }
+          }
+        #endif /* RSBAC */
+
 	fput(filp);
 	return retval;
 }
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/pipe.c linux-2.6.23.14-rsbac-1.3.7/fs/pipe.c
--- trunk/fs/pipe.c	2008-02-13 16:25:55.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/pipe.c	2008-02-13 13:25:48.000000000 +0100
@@ -21,6 +21,8 @@
 #include <asm/uaccess.h>
 #include <asm/ioctls.h>
 
+#include <rsbac/hooks.h>
+
 /*
  * We use a start+len construction, which provides full use of the 
  * allocated memory.
@@ -290,11 +292,36 @@ pipe_read(struct kiocb *iocb, const stru
 	struct iovec *iov = (struct iovec *)_iov;
 	size_t total_len;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	total_len = iov_length(iov, nr_segs);
 	/* Null read succeeds. */
 	if (unlikely(total_len == 0))
 		return 0;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+	rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.ipc.type = I_anonpipe;
+        rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+	rsbac_attribute_value.dummy = 0;
+
+	if (!rsbac_adf_request(R_READ,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+	#endif /* CONFIG_RSBAC_RW */
+
 	do_wakeup = 0;
 	ret = 0;
 	mutex_lock(&inode->i_mutex);
@@ -386,8 +413,28 @@ redo:
 		wake_up_interruptible(&pipe->wait);
 		kill_fasync(&pipe->fasync_writers, SIGIO, POLL_OUT);
 	}
-	if (ret > 0)
+	if (ret > 0) {
 		file_accessed(filp);
+		
+		/* RSBAC: notify adf of read from pipe */
+                #ifdef CONFIG_RSBAC_RW
+		rsbac_new_target_id.dummy = 0;
+		
+		if (rsbac_adf_set_attr(R_READ,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           T_NONE,
+                                           rsbac_new_target_id,
+                                           A_none,
+                                           rsbac_attribute_value))
+                      {
+                        rsbac_printk(KERN_WARNING
+                               "pipe_readv(): rsbac_adf_set_attr() returned error\n");
+                      }
+                #endif
+
+	}
 	return ret;
 }
 
@@ -404,11 +451,36 @@ pipe_write(struct kiocb *iocb, const str
 	size_t total_len;
 	ssize_t chars;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	total_len = iov_length(iov, nr_segs);
 	/* Null write succeeds. */
 	if (unlikely(total_len == 0))
 		return 0;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+	rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.ipc.type = I_anonpipe;
+        rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+	rsbac_attribute_value.dummy = 0;
+
+	if (!rsbac_adf_request(R_WRITE,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+	#endif /* CONFIG_RSBAC_RW */
+
 	do_wakeup = 0;
 	ret = 0;
 	mutex_lock(&inode->i_mutex);
@@ -559,8 +631,28 @@ out:
 		wake_up_interruptible(&pipe->wait);
 		kill_fasync(&pipe->fasync_readers, SIGIO, POLL_IN);
 	}
-	if (ret > 0)
+	if (ret > 0) {
 		file_update_time(filp);
+		
+		/* RSBAC: notify adf of write to pipe */
+                #ifdef CONFIG_RSBAC_RW
+		rsbac_new_target_id.dummy = 0;
+		
+		if (rsbac_adf_set_attr(R_WRITE,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           T_NONE,
+                                           rsbac_new_target_id,
+                                           A_none,
+                                           rsbac_attribute_value))
+                      {
+                        rsbac_printk(KERN_WARNING
+                               "pipe_writev(): rsbac_adf_set_attr() returned error\n");
+                      }
+                #endif
+	}
+
 	return ret;
 }
 
@@ -648,7 +740,22 @@ pipe_release(struct inode *inode, int de
 	pipe->writers -= decw;
 
 	if (!pipe->readers && !pipe->writers) {
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                union rsbac_target_id_t rsbac_target_id;
+                #endif
+
 		free_pipe_info(inode);
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+		rsbac_pr_debug(aef, "calling ACI remove_target()\n");
+                rsbac_target_id.ipc.type   = I_anonpipe;
+                rsbac_target_id.ipc.id.id_nr  = inode->i_ino;
+                rsbac_remove_target(T_IPC, rsbac_target_id);
+                #endif
+
 	} else {
 		wake_up_interruptible(&pipe->wait);
 		kill_fasync(&pipe->fasync_readers, SIGIO, POLL_IN);
@@ -665,6 +772,29 @@ pipe_read_fasync(int fd, struct file *fi
 	struct inode *inode = filp->f_path.dentry->d_inode;
 	int retval;
 
+#ifdef CONFIG_RSBAC_RW
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC_RW
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.ipc.type = I_anonpipe;
+	rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+	rsbac_attribute_value.dummy = 0;
+
+	if (!rsbac_adf_request(R_READ,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
 	mutex_lock(&inode->i_mutex);
 	retval = fasync_helper(fd, filp, on, &inode->i_pipe->fasync_readers);
 	mutex_unlock(&inode->i_mutex);
@@ -672,6 +802,23 @@ pipe_read_fasync(int fd, struct file *fi
 	if (retval < 0)
 		return retval;
 
+	/* RSBAC: notify adf of read from pipe */
+        #ifdef CONFIG_RSBAC_RW
+	rsbac_new_target_id.dummy = 0;
+		
+	if (rsbac_adf_set_attr(R_READ,
+                                   current->pid,
+                                   T_IPC,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING "pipe_read_fasync(): rsbac_adf_set_attr() returned error\n");
+              }
+        #endif
+
 	return 0;
 }
 
@@ -682,6 +829,29 @@ pipe_write_fasync(int fd, struct file *f
 	struct inode *inode = filp->f_path.dentry->d_inode;
 	int retval;
 
+#ifdef CONFIG_RSBAC_RW
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC_RW
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.ipc.type = I_anonpipe;
+	rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+	rsbac_attribute_value.dummy = 0;
+
+	if (!rsbac_adf_request(R_WRITE,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
 	mutex_lock(&inode->i_mutex);
 	retval = fasync_helper(fd, filp, on, &inode->i_pipe->fasync_writers);
 	mutex_unlock(&inode->i_mutex);
@@ -689,6 +859,23 @@ pipe_write_fasync(int fd, struct file *f
 	if (retval < 0)
 		return retval;
 
+	/* RSBAC: notify adf of write to pipe */
+        #ifdef CONFIG_RSBAC_RW
+	rsbac_new_target_id.dummy = 0;
+		
+	if (rsbac_adf_set_attr(R_WRITE,
+                                   current->pid,
+                                   T_IPC,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING "pipe_write_fasync(): rsbac_adf_set_attr() returned error\n");
+              }
+        #endif
+
 	return 0;
 }
 
@@ -700,6 +887,45 @@ pipe_rdwr_fasync(int fd, struct file *fi
 	struct pipe_inode_info *pipe = inode->i_pipe;
 	int retval;
 
+#ifdef CONFIG_RSBAC_RW
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC_RW
+	rsbac_pr_debug(aef, "calling ADF for READ\n");
+	rsbac_target_id.ipc.type = I_anonpipe;
+	rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+	rsbac_attribute_value.dummy = 0;
+
+	if (!rsbac_adf_request(R_READ,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+
+	rsbac_pr_debug(aef, "calling ADF for WRITE\n");
+	rsbac_target_id.ipc.type = I_anonpipe;
+	rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+	rsbac_attribute_value.dummy = 0;
+
+	if (!rsbac_adf_request(R_WRITE,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
+
 	mutex_lock(&inode->i_mutex);
 
 	retval = fasync_helper(fd, filp, on, &pipe->fasync_readers);
@@ -712,6 +938,40 @@ pipe_rdwr_fasync(int fd, struct file *fi
 	if (retval < 0)
 		return retval;
 
+	/* RSBAC: notify adf of read from pipe */
+        #ifdef CONFIG_RSBAC_RW
+	rsbac_new_target_id.dummy = 0;
+		
+	if (rsbac_adf_set_attr(R_READ,
+                                   current->pid,
+                                   T_IPC,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "pipe_rwdr_fasync(): rsbac_adf_set_attr() returned error\n");
+              }
+	
+	/* RSBAC: notify adf of write to pipe */
+	rsbac_new_target_id.dummy = 0;
+		
+	if (rsbac_adf_set_attr(R_WRITE,
+                                   current->pid,
+                                   T_IPC,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "pipe_rwdr_fasync(): rsbac_adf_set_attr() returned error\n");
+              }
+        #endif
+
 	return 0;
 }
 
@@ -744,28 +1004,132 @@ pipe_rdwr_release(struct inode *inode, s
 static int
 pipe_read_open(struct inode *inode, struct file *filp)
 {
+	
+	#ifdef CONFIG_RSBAC
+	/* RSBAC */
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+	
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.ipc.type = I_anonpipe;
+        rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+	rsbac_attribute_value.dummy = 0;
+
+	if (!rsbac_adf_request(R_READ_OPEN,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+	#endif
+
 	/* We could have perhaps used atomic_t, but this and friends
 	   below are the only places.  So it doesn't seem worthwhile.  */
 	mutex_lock(&inode->i_mutex);
 	inode->i_pipe->readers++;
 	mutex_unlock(&inode->i_mutex);
 
+        #ifdef CONFIG_RSBAC
+	/* RSBAC: notify adf of read_open on pipe */
+	rsbac_new_target_id.dummy = 0;
+		
+	if (rsbac_adf_set_attr(R_READ_OPEN,
+                                   current->pid,
+                                   T_IPC,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING "pipe_read_open(): rsbac_adf_set_attr() returned error\n");
+              }
+        #endif
+
 	return 0;
 }
 
 static int
 pipe_write_open(struct inode *inode, struct file *filp)
 {
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.ipc.type = I_anonpipe;
+	rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+	rsbac_attribute_value.dummy = 0;
+
+	if (!rsbac_adf_request(R_WRITE_OPEN,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
 	mutex_lock(&inode->i_mutex);
 	inode->i_pipe->writers++;
 	mutex_unlock(&inode->i_mutex);
 
+#ifdef CONFIG_RSBAC
+	/* RSBAC: notify adf of write_open on pipe */
+	rsbac_new_target_id.dummy = 0;
+
+	if (rsbac_adf_set_attr(R_WRITE_OPEN,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				T_NONE,
+				rsbac_new_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		rsbac_printk(KERN_WARNING "pipe_write_open(): rsbac_adf_set_attr() returned error\n");
+	}
+#endif
+
 	return 0;
 }
 
 static int
 pipe_rdwr_open(struct inode *inode, struct file *filp)
 {
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.ipc.type = I_anonpipe;
+	rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+	rsbac_attribute_value.dummy = 0;
+
+	if (!rsbac_adf_request(R_READ_WRITE_OPEN,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+
+#endif
+
 	mutex_lock(&inode->i_mutex);
 	if (filp->f_mode & FMODE_READ)
 		inode->i_pipe->readers++;
@@ -773,6 +1137,23 @@ pipe_rdwr_open(struct inode *inode, stru
 		inode->i_pipe->writers++;
 	mutex_unlock(&inode->i_mutex);
 
+#ifdef CONFIG_RSBAC
+	/* RSBAC: notify adf of read_write_open on pipe */
+	rsbac_new_target_id.dummy = 0;
+
+	if (rsbac_adf_set_attr(R_READ_WRITE_OPEN,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				T_NONE,
+				rsbac_new_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		rsbac_printk(KERN_WARNING "pipe_rdwr_open(): rsbac_adf_set_attr() returned error\n");
+	}
+#endif
+
 	return 0;
 }
 
@@ -960,6 +1341,13 @@ struct file *create_write_pipe(void)
 	struct dentry *dentry;
 	struct qstr name = { .name = "" };
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	f = get_empty_filp();
 	if (!f)
 		return ERR_PTR(-ENFILE);
@@ -990,6 +1378,24 @@ struct file *create_write_pipe(void)
 	f->f_mode = FMODE_WRITE;
 	f->f_version = 0;
 
+	/* RSBAC: notify ADF of new anonpipe */
+#ifdef CONFIG_RSBAC
+        rsbac_target_id.ipc.type = I_anonpipe;
+	rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+	rsbac_new_target_id.dummy = 0;
+	if (rsbac_adf_set_attr(R_CREATE,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				T_NONE,
+				rsbac_new_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		rsbac_printk(KERN_WARNING
+				"do_pipe() [sys_pipe()]: rsbac_adf_set_attr() returned error");
+	}
+#endif
 	return f;
 
  err_inode:
@@ -1034,6 +1440,29 @@ int do_pipe(int *fd)
 	int error;
 	int fdw, fdr;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[sys_pipe()]: calling ADF\n");
+        rsbac_target_id.ipc.type = I_anonpipe;
+        rsbac_target_id.ipc.id.id_nr = 0;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_CREATE,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	fw = create_write_pipe();
 	if (IS_ERR(fw))
 		return PTR_ERR(fw);
@@ -1105,12 +1534,28 @@ static int __init init_pipe_fs(void)
 			err = PTR_ERR(pipe_mnt);
 			unregister_filesystem(&pipe_fs_type);
 		}
+		#ifdef CONFIG_RSBAC
+		else {
+			/* RSBAC: initialising data structures for this fs (not root fs) */
+			rsbac_pr_debug(ds, "calling rsbac_mount for Device %02u:%02u\n",
+				 MAJOR(pipe_mnt->mnt_sb->s_dev), MINOR(pipe_mnt->mnt_sb->s_dev));
+			rsbac_mount(pipe_mnt->mnt_sb, NULL);
+		}
+		#endif
 	}
 	return err;
 }
 
 static void __exit exit_pipe_fs(void)
 {
+        /* RSBAC: removing data structures for this fs from memory */
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(ds, "calling rsbac_umount for "
+		       "Device %02u:%02u\n", MAJOR(pipe_mnt->mnt_sb->s_dev),
+		       MINOR(pipe_mnt->mnt_sb->s_dev));
+        rsbac_umount(pipe_mnt->mnt_sb, NULL);
+#endif
+
 	unregister_filesystem(&pipe_fs_type);
 	mntput(pipe_mnt);
 }
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/proc/array.c linux-2.6.23.14-rsbac-1.3.7/fs/proc/array.c
--- trunk/fs/proc/array.c	2008-02-13 16:25:23.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/proc/array.c	2008-02-13 13:24:49.000000000 +0100
@@ -81,6 +81,7 @@
 #include <asm/pgtable.h>
 #include <asm/processor.h>
 #include "internal.h"
+#include <rsbac/hooks.h>
 
 /* Gcc optimizes away "strlen(x)" for constant x */
 #define ADDBUF(buffer, string) \
@@ -303,6 +304,28 @@ int proc_pid_status(struct task_struct *
 	char *orig = buffer;
 	struct mm_struct *mm = get_task_mm(task);
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = task->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		if (mm)
+			mmput(mm);
+		return -EPERM;
+	}
+#endif
+
 	buffer = task_name(task, buffer);
 	buffer = task_state(task, buffer);
 
@@ -382,7 +405,7 @@ static int do_task_stat(struct task_stru
 	int res;
 	pid_t ppid = 0, pgid = -1, sid = -1;
 	int num_threads = 0;
-	struct mm_struct *mm;
+	struct mm_struct *mm = get_task_mm(task);
 	unsigned long long start_time;
 	unsigned long cmin_flt = 0, cmaj_flt = 0;
 	unsigned long  min_flt = 0,  maj_flt = 0;
@@ -391,9 +414,29 @@ static int do_task_stat(struct task_stru
 	char tcomm[sizeof(task->comm)];
 	unsigned long flags;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = task->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))	{
+		if (mm)
+			mmput(mm);
+		return -EPERM;
+	}
+#endif
+
 	state = *get_task_state(task);
 	vsize = eip = esp = 0;
-	mm = get_task_mm(task);
 	if (mm) {
 		vsize = task_vsize(mm);
 		eip = KSTK_EIP(task);
@@ -537,8 +580,29 @@ int proc_tgid_stat(struct task_struct *t
 int proc_pid_statm(struct task_struct *task, char *buffer)
 {
 	int size = 0, resident = 0, shared = 0, text = 0, lib = 0, data = 0;
-	struct mm_struct *mm = get_task_mm(task);
+	struct mm_struct *mm;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = task->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+	
+	mm = get_task_mm(task);
 	if (mm) {
 		size = task_statm(mm, &shared, &text, &data, &resident);
 		mmput(mm);
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/proc/base.c linux-2.6.23.14-rsbac-1.3.7/fs/proc/base.c
--- trunk/fs/proc/base.c	2008-02-13 16:25:23.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/proc/base.c	2008-02-13 13:24:49.000000000 +0100
@@ -74,6 +74,7 @@
 #include <linux/oom.h>
 #include <linux/elf.h>
 #include "internal.h"
+#include <rsbac/hooks.h>
 
 /* NOTE:
  *	Implementing inode permission operations in /proc is almost
@@ -156,6 +157,27 @@ static int proc_cwd_link(struct inode *i
 	struct fs_struct *fs = NULL;
 	int result = -ENOENT;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+	
+	if(!task)
+		return -ENOENT;
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = task->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value)) {
+		put_task_struct(task);
+		return -EPERM;
+	}
+#endif
+
+
 	if (task) {
 		fs = get_fs_struct(task);
 		put_task_struct(task);
@@ -176,6 +198,27 @@ static int proc_root_link(struct inode *
 	struct task_struct *task = get_proc_task(inode);
 	struct fs_struct *fs = NULL;
 	int result = -ENOENT;
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC
+	if(!task)
+		return -ENOENT;
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = task->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value)) {
+		put_task_struct(task);
+		return -EPERM;
+	}
+#endif
 
 	if (task) {
 		fs = get_fs_struct(task);
@@ -203,6 +246,25 @@ static int proc_pid_environ(struct task_
 {
 	int res = 0;
 	struct mm_struct *mm = get_task_mm(task);
+        
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = task->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+		return -EPERM;
+#endif
+
 	if (mm) {
 		unsigned int len;
 
@@ -225,6 +287,25 @@ static int proc_pid_cmdline(struct task_
 	int res = 0;
 	unsigned int len;
 	struct mm_struct *mm = get_task_mm(task);
+
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = task->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+		return -EPERM;
+#endif
+
 	if (!mm)
 		goto out;
 	if (!mm->arg_end)
@@ -261,6 +342,25 @@ static int proc_pid_auxv(struct task_str
 {
 	int res = 0;
 	struct mm_struct *mm = get_task_mm(task);
+
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = task->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+		return -EPERM;
+#endif
+
 	if (mm) {
 		unsigned int nwords = 0;
 		do
@@ -286,6 +386,24 @@ static int proc_pid_wchan(struct task_st
 	unsigned long wchan;
 	char symname[KSYM_NAME_LEN];
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = task->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+		return -EPERM;
+#endif
+
 	wchan = get_wchan(task);
 
 	if (lookup_symbol_name(wchan, symname) < 0)
@@ -301,6 +419,26 @@ static int proc_pid_wchan(struct task_st
  */
 static int proc_pid_schedstat(struct task_struct *task, char *buffer)
 {
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = task->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
 	return sprintf(buffer, "%llu %llu %lu\n",
 			task->sched_info.cpu_time,
 			task->sched_info.run_delay,
@@ -315,6 +453,28 @@ static int proc_oom_score(struct task_st
 	unsigned long points;
 	struct timespec uptime;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.process = task->pid;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	do_posix_clock_monotonic_gettime(&uptime);
 	read_lock(&tasklist_lock);
 	points = badness(task, uptime.tv_sec);
@@ -374,6 +534,29 @@ static int mounts_open(struct inode *ino
 	struct proc_mounts *p;
 	int ret = -EINVAL;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC
+	if(!task)
+		return -EINVAL;
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = task->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		put_task_struct(task);
+		return -EPERM;
+	}
+#endif
+
 	if (task) {
 		task_lock(task);
 		if (task->nsproxy) {
@@ -525,12 +708,33 @@ static ssize_t mem_read(struct file * fi
 	int ret = -ESRCH;
 	struct mm_struct *mm;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (!task)
 		goto out_no_task;
 
 	if (!MAY_PTRACE(task) || !ptrace_may_attach(task))
 		goto out;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = task->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		ret = -EPERM;
+		goto out;
+	}
+#endif
+
 	ret = -ENOMEM;
 	page = (char *)__get_free_page(GFP_USER);
 	if (!page)
@@ -594,6 +798,11 @@ static ssize_t mem_write(struct file * f
 	struct task_struct *task = get_proc_task(file->f_path.dentry->d_inode);
 	unsigned long dst = *ppos;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	copied = -ESRCH;
 	if (!task)
 		goto out_no_task;
@@ -601,6 +810,22 @@ static ssize_t mem_write(struct file * f
 	if (!MAY_PTRACE(task) || !ptrace_may_attach(task))
 		goto out;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = task->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		copied = -EPERM;
+		goto out;
+	}
+#endif
+
 	copied = -ENOMEM;
 	page = (char *)__get_free_page(GFP_USER);
 	if (!page)
@@ -666,8 +891,30 @@ static ssize_t oom_adjust_read(struct fi
 	size_t len;
 	int oom_adjust;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (!task)
 		return -ESRCH;
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = task->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		put_task_struct(task);
+		return -EPERM;
+	}
+#endif
+
 	oom_adjust = task->oomkilladj;
 	put_task_struct(task);
 
@@ -683,6 +930,12 @@ static ssize_t oom_adjust_write(struct f
 	char buffer[PROC_NUMBUF], *end;
 	int oom_adjust;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+
 	memset(buffer, 0, sizeof(buffer));
 	if (count > sizeof(buffer) - 1)
 		count = sizeof(buffer) - 1;
@@ -697,6 +950,23 @@ static ssize_t oom_adjust_write(struct f
 	task = get_proc_task(file->f_path.dentry->d_inode);
 	if (!task)
 		return -ESRCH;
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = task->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		put_task_struct(task);
+		return -EPERM;
+	}
+#endif
+
 	if (oom_adjust < task->oomkilladj && !capable(CAP_SYS_RESOURCE)) {
 		put_task_struct(task);
 		return -EACCES;
@@ -759,8 +1029,30 @@ static ssize_t proc_loginuid_read(struct
 	ssize_t length;
 	char tmpbuf[TMPBUFLEN];
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (!task)
 		return -ESRCH;
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = task->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		put_task_struct(task);
+		return -EPERM;
+	}
+#endif
+
 	length = scnprintf(tmpbuf, TMPBUFLEN, "%u",
 				audit_get_loginuid(task->audit_context));
 	put_task_struct(task);
@@ -775,6 +1067,12 @@ static ssize_t proc_loginuid_write(struc
 	ssize_t length;
 	uid_t loginuid;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!capable(CAP_AUDIT_CONTROL))
 		return -EPERM;
 
@@ -788,6 +1086,23 @@ static ssize_t proc_loginuid_write(struc
 		/* No partial writes. */
 		return -EINVAL;
 	}
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.process =  pid_task(proc_pid(inode), PIDTYPE_PID)->pid;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	page = (char*)__get_free_page(GFP_USER);
 	if (!page)
 		return -ENOMEM;
@@ -1228,6 +1543,27 @@ static int proc_fd_info(struct inode *in
 	struct file *file;
 	int fd = proc_fd(inode);
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = PROC_I(inode)->pid->nr;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value)) {
+		if (task)
+			put_task_struct(task);
+		return -EPERM;
+	}
+#endif
+
 	if (task) {
 		files = get_files_struct(task);
 		put_task_struct(task);
@@ -2225,6 +2561,11 @@ struct dentry *proc_pid_lookup(struct in
 	struct task_struct *task;
 	unsigned tgid;
 
+#ifdef CONFIG_RSBAC_PROC_HIDE
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif			
+
 	result = proc_base_lookup(dir, dentry);
 	if (!IS_ERR(result) || PTR_ERR(result) != -ENOENT)
 		goto out;
@@ -2241,6 +2582,23 @@ struct dentry *proc_pid_lookup(struct in
 	if (!task)
 		goto out;
 
+	/* RSBAC */
+#ifdef CONFIG_RSBAC_PROC_HIDE
+	rsbac_target_id.process = task->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		result = ERR_PTR(-ENOENT);
+		put_task_struct(task);
+		goto out;
+	}
+#endif						
+
 	result = proc_pid_instantiate(dir, dentry, task, NULL);
 	put_task_struct(task);
 out:
@@ -2301,6 +2659,10 @@ int proc_pid_readdir(struct file * filp,
 	struct task_struct *reaper = get_proc_task(filp->f_path.dentry->d_inode);
 	struct task_struct *task;
 	int tgid;
+#ifdef CONFIG_RSBAC_PROC_HIDE
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
 
 	if (!reaper)
 		goto out_no_task;
@@ -2316,6 +2678,21 @@ int proc_pid_readdir(struct file * filp,
 	     task;
 	     put_task_struct(task), task = next_tgid(tgid + 1)) {
 		tgid = task->pid;
+
+#ifdef CONFIG_RSBAC_PROC_HIDE
+		rsbac_target_id.process = task->pid;
+		rsbac_attribute_value.dummy = 0;
+		if(!rsbac_adf_request(R_GET_STATUS_DATA,
+					current->pid,
+					T_PROCESS,
+					rsbac_target_id,
+					A_none,
+					rsbac_attribute_value))
+		{
+			continue;
+		}
+#endif
+
 		filp->f_pos = tgid + TGID_OFFSET;
 		if (proc_pid_fill_cache(filp, dirent, filldir, task, tgid) < 0) {
 			put_task_struct(task);
@@ -2436,6 +2813,10 @@ static struct dentry *proc_task_lookup(s
 	struct task_struct *task;
 	struct task_struct *leader = get_proc_task(dir);
 	unsigned tid;
+#ifdef CONFIG_RSBAC_PROC_HIDE
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif			
 
 	if (!leader)
 		goto out_no_task;
@@ -2454,6 +2835,22 @@ static struct dentry *proc_task_lookup(s
 	if (leader->tgid != task->tgid)
 		goto out_drop_task;
 
+	/* RSBAC */
+#ifdef CONFIG_RSBAC_PROC_HIDE
+	rsbac_target_id.process = task->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		goto out_drop_task;
+	}
+#endif						
+
+
 	result = proc_task_instantiate(dir, dentry, task, NULL);
 out_drop_task:
 	put_task_struct(task);
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/proc/kcore.c linux-2.6.23.14-rsbac-1.3.7/fs/proc/kcore.c
--- trunk/fs/proc/kcore.c	2008-02-13 16:25:23.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/proc/kcore.c	2008-02-13 13:24:48.000000000 +0100
@@ -19,14 +19,39 @@
 #include <linux/vmalloc.h>
 #include <linux/highmem.h>
 #include <linux/init.h>
+#include <linux/security.h>
+
 #include <asm/uaccess.h>
 #include <asm/io.h>
+#include <rsbac/hooks.h>
 
 #define CORE_STR "CORE"
 
 static int open_kcore(struct inode * inode, struct file * filp)
 {
+        /* RSBAC */
+#ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+
+	if(!capable(CAP_SYS_RAWIO))
+	  return -EPERM;
+
+        rsbac_target_id.scd = ST_kmem;
+        rsbac_attribute_value.dummy = 0;
+        rsbac_pr_debug(aef, "calling ADF\n");
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_SCD,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          return -EPERM;
+        else
+          return 0;
+#else
 	return capable(CAP_SYS_RAWIO) ? 0 : -EPERM;
+#endif
 }
 
 static ssize_t read_kcore(struct file *, char __user *, size_t, loff_t *);
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/proc/task_mmu.c linux-2.6.23.14-rsbac-1.3.7/fs/proc/task_mmu.c
--- trunk/fs/proc/task_mmu.c	2008-02-13 16:25:23.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/proc/task_mmu.c	2008-02-13 13:24:49.000000000 +0100
@@ -6,11 +6,13 @@
 #include <linux/ptrace.h>
 #include <linux/pagemap.h>
 #include <linux/mempolicy.h>
+#include <linux/security.h>
 
 #include <asm/elf.h>
 #include <asm/uaccess.h>
 #include <asm/tlbflush.h>
 #include "internal.h"
+#include <rsbac/hooks.h>
 
 char *task_mem(struct mm_struct *mm, char *buffer)
 {
@@ -79,12 +81,34 @@ int proc_exe_link(struct inode *inode, s
 	struct task_struct *task = get_proc_task(inode);
 	struct mm_struct * mm = NULL;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (task) {
 		mm = get_task_mm(task);
 		put_task_struct(task);
 	}
 	if (!mm)
 		goto out;
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = task->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		mmput(mm);
+		return -EPERM;
+	}
+#endif
+
 	down_read(&mm->mmap_sem);
 
 	vma = mm->mmap;
@@ -487,10 +511,29 @@ static int do_maps_open(struct inode *in
 {
 	struct proc_maps_private *priv;
 	int ret = -ENOMEM;
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
 	priv = kzalloc(sizeof(*priv), GFP_KERNEL);
 	if (priv) {
 		priv->pid = proc_pid(inode);
 		ret = seq_open(file, ops);
+#ifdef CONFIG_RSBAC
+		rsbac_pr_debug(aef, "calling ADF\n");
+		rsbac_target_id.process = pid_task(proc_pid(inode), PIDTYPE_PID)->pid;
+		rsbac_attribute_value.dummy = 0;
+		if(!rsbac_adf_request(R_GET_STATUS_DATA,
+					current->pid,
+					T_PROCESS,
+					rsbac_target_id,
+					A_none,
+					rsbac_attribute_value))
+		{
+			kfree(priv);
+			return -EPERM;
+		}
+#endif
 		if (!ret) {
 			struct seq_file *m = file->private_data;
 			m->private = priv;
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/proc/task_nommu.c linux-2.6.23.14-rsbac-1.3.7/fs/proc/task_nommu.c
--- trunk/fs/proc/task_nommu.c	2008-02-13 16:25:23.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/proc/task_nommu.c	2008-02-13 13:24:49.000000000 +0100
@@ -5,6 +5,7 @@
 #include <linux/ptrace.h>
 #include <linux/seq_file.h>
 #include "internal.h"
+#include <rsbac/hooks.h>
 
 /*
  * Logic: we've got two memory sums for each process, "shared", and
@@ -112,8 +113,32 @@ int proc_exe_link(struct inode *inode, s
 	struct mm_struct *mm = get_task_mm(task);
 	int result = -ENOENT;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!mm)
 		goto out;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.process = task->pid;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            mmput(mm);
+            return -EPERM;
+          }
+        #endif
+
 	down_read(&mm->mmap_sem);
 
 	vml = mm->context.vmlist;
@@ -209,10 +234,32 @@ static struct seq_operations proc_pid_ma
 };
 
 static int maps_open(struct inode *inode, struct file *file)
-{
+{	
 	struct proc_maps_private *priv;
 	int ret = -ENOMEM;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+	struct task_struct *task = get_proc_task(inode);
+#endif
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = pid_task(proc_pid(inode), PIDTYPE_PID)->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
+
 	priv = kzalloc(sizeof(*priv), GFP_KERNEL);
 	if (priv) {
 		priv->pid = proc_pid(inode);
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/quota.c linux-2.6.23.14-rsbac-1.3.7/fs/quota.c
--- trunk/fs/quota.c	2008-02-13 16:25:48.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/quota.c	2008-02-13 13:25:37.000000000 +0100
@@ -18,6 +18,7 @@
 #include <linux/capability.h>
 #include <linux/quotaops.h>
 #include <linux/types.h>
+#include <rsbac/hooks.h>
 
 /* Check validity of generic quotactl commands */
 static int generic_quotactl_valid(struct super_block *sb, int type, int cmd, qid_t id)
@@ -85,10 +86,32 @@ static int generic_quotactl_valid(struct
 		    !capable(CAP_SYS_ADMIN))
 			return -EPERM;
 	}
-	else if (cmd != Q_GETFMT && cmd != Q_SYNC && cmd != Q_GETINFO)
+	else if (cmd != Q_GETFMT && cmd != Q_SYNC && cmd != Q_GETINFO) {
+	        /* RSBAC */
+	        #ifdef CONFIG_RSBAC
+	        union rsbac_target_id_t       rsbac_target_id;
+	        union rsbac_attribute_value_t rsbac_attribute_value;
+	        #endif
+
 		if (!capable(CAP_SYS_ADMIN))
 			return -EPERM;
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                rsbac_target_id.scd = ST_quota;
+                rsbac_attribute_value.dummy = 0;
+                rsbac_pr_debug(aef, "[sys_quotactl()]: calling ADF\n");
+                if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                                      current->pid,
+                                      T_SCD,
+                                      rsbac_target_id,
+                                      A_none,
+                                      rsbac_attribute_value))
+                  {
+                    return -EPERM;
+                  }
+                #endif
+	}
 	return 0;
 }
 
@@ -136,10 +159,31 @@ static int xqm_quotactl_valid(struct sup
 		     !capable(CAP_SYS_ADMIN))
 			return -EPERM;
 	} else if (cmd != Q_XGETQSTAT && cmd != Q_XQUOTASYNC) {
+	        /* RSBAC */
+	        #ifdef CONFIG_RSBAC
+	        union rsbac_target_id_t       rsbac_target_id;
+	        union rsbac_attribute_value_t rsbac_attribute_value;
+	        #endif
+
 		if (!capable(CAP_SYS_ADMIN))
 			return -EPERM;
-	}
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                rsbac_target_id.scd = ST_quota;
+                rsbac_attribute_value.dummy = 0;
+		rsbac_pr_debug(aef, "[sys_quotactl()]: calling ADF\n");
+                if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                                      current->pid,
+                                      T_SCD,
+                                      rsbac_target_id,
+                                      A_none,
+                                      rsbac_attribute_value))
+                  {
+                    return -EPERM;
+                  }
+                #endif
+	}
 	return 0;
 }
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/read_write.c linux-2.6.23.14-rsbac-1.3.7/fs/read_write.c
--- trunk/fs/read_write.c	2008-02-13 16:25:40.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/read_write.c	2008-02-13 13:25:22.000000000 +0100
@@ -18,6 +18,12 @@
 #include <linux/splice.h>
 #include "read_write.h"
 
+#ifdef CONFIG_RSBAC_RW
+#include <net/sock.h>
+#include <net/af_unix.h>
+#endif
+#include <rsbac/hooks.h>
+
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
 
@@ -218,7 +224,7 @@ Einval:
 	return -EINVAL;
 }
 
-static void wait_on_retry_sync_kiocb(struct kiocb *iocb)
+void wait_on_retry_sync_kiocb(struct kiocb *iocb)
 {
 	set_current_state(TASK_UNINTERRUPTIBLE);
 	if (!kiocbIsKicked(iocb))
@@ -257,6 +263,15 @@ ssize_t vfs_read(struct file *file, char
 {
 	ssize_t ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        enum  rsbac_attribute_t       rsbac_attribute = A_none;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!(file->f_mode & FMODE_READ))
 		return -EBADF;
 	if (!file->f_op || (!file->f_op->read && !file->f_op->aio_read))
@@ -269,6 +284,110 @@ ssize_t vfs_read(struct file *file, char
 		count = ret;
 		ret = security_file_permission (file, MAY_READ);
 		if (!ret) {
+                        /* RSBAC */
+                        #ifdef CONFIG_RSBAC_RW
+                        rsbac_pr_debug(aef, "[sys_read()]: calling ADF\n");
+                        rsbac_attribute_value.dummy = 0;
+                        /* get target type and id clear */
+                        if(S_ISSOCK(file->f_dentry->d_inode->i_mode))
+                          {
+			    struct socket * sock = SOCKET_I(file->f_dentry->d_inode);
+
+                            if(   sock->ops
+                               && (sock->ops->family == AF_UNIX)
+                              )
+                              {
+#if 0
+                                if(file->f_dentry->d_sb->s_magic == SOCKFS_MAGIC) {
+                                  rsbac_target = T_IPC;
+                                  rsbac_target_id.ipc.type = I_anonunix;
+		                  if(unix_sk(sock->sk)->peer
+		                     && unix_sk(unix_sk(sock->sk)->peer)->dentry
+                		     && unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode
+		                    )
+					rsbac_target_id.ipc.id.id_nr = unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode->i_ino;
+				  else
+	                                rsbac_target_id.ipc.id.id_nr = file->f_dentry->d_inode->i_ino;
+                                } else {
+				  rsbac_target = T_UNIXSOCK;
+                                  rsbac_target_id.unixsock.device = file->f_dentry->d_sb->s_dev;
+                                  rsbac_target_id.unixsock.inode  = file->f_dentry->d_inode->i_ino;
+                                  rsbac_target_id.unixsock.dentry_p = file->f_dentry;
+                                }
+                                if (sock->sk
+				    && sock->sk->sk_peercred.pid) {
+					rsbac_attribute = A_process;
+					rsbac_attribute_value.process = sock->sk->sk_peercred.pid;
+				} else {
+					rsbac_attribute = A_sock_type;
+					rsbac_attribute_value.sock_type = sock->type;
+				}
+#endif
+                              }
+                            #ifdef CONFIG_RSBAC_NET_OBJ_RW
+                            else
+                              {
+                                rsbac_target = T_NETOBJ;
+                                rsbac_target_id.netobj.sock_p
+                                 = SOCKET_I(file->f_dentry->d_inode);
+                                rsbac_target_id.netobj.local_addr = NULL;
+                                rsbac_target_id.netobj.local_len = 0;
+                                rsbac_target_id.netobj.remote_addr = NULL;
+                                rsbac_target_id.netobj.remote_len = 0;
+				rsbac_attribute = A_sock_type;
+				rsbac_attribute_value.sock_type = sock->type;
+                              }
+                            #endif
+                          }
+                        else
+                        if(   S_ISFIFO(file->f_dentry->d_inode->i_mode)
+                              /* named FIFO only */
+                           && (file->f_dentry->d_sb->s_magic != PIPEFS_MAGIC)
+                          )
+                          {
+                            rsbac_target = T_FIFO;
+                            rsbac_target_id.fifo.device = file->f_dentry->d_sb->s_dev;
+                            rsbac_target_id.fifo.inode  = file->f_dentry->d_inode->i_ino;
+                            rsbac_target_id.fifo.dentry_p = file->f_dentry;
+                          }
+                        else
+                        if(S_ISREG(file->f_dentry->d_inode->i_mode))
+                          {
+                            rsbac_target = T_FILE;
+                            rsbac_target_id.file.device = file->f_dentry->d_sb->s_dev;
+                            rsbac_target_id.file.inode  = file->f_dentry->d_inode->i_ino;
+                            rsbac_target_id.file.dentry_p = file->f_dentry;
+                          }
+                        else
+                        if(S_ISBLK(file->f_dentry->d_inode->i_mode))
+                          {
+                            rsbac_target = T_DEV;
+                            rsbac_target_id.dev.type = D_block;
+                            rsbac_target_id.dev.major = RSBAC_MAJOR(file->f_dentry->d_inode->i_rdev);
+                            rsbac_target_id.dev.minor = RSBAC_MINOR(file->f_dentry->d_inode->i_rdev);
+                          }
+                        else
+                        if(S_ISCHR(file->f_dentry->d_inode->i_mode))
+                          {
+                            rsbac_target = T_DEV;
+                            rsbac_target_id.dev.type = D_char;
+                            rsbac_target_id.dev.major = RSBAC_MAJOR(file->f_dentry->d_inode->i_rdev);
+                            rsbac_target_id.dev.minor = RSBAC_MINOR(file->f_dentry->d_inode->i_rdev);
+                          }
+                        if (   (rsbac_target != T_NONE)
+                            && !rsbac_adf_request(R_READ,
+                                                  current->pid,
+                                                  rsbac_target,
+                                                  rsbac_target_id,
+                                                  rsbac_attribute,
+                                                  rsbac_attribute_value)
+                           )
+                          {
+                            ret = -EPERM;
+                          }
+                        else
+                        #endif /* CONFIG_RSBAC_RW */
+
 			if (file->f_op->read)
 				ret = file->f_op->read(file, buf, count, pos);
 			else
@@ -276,6 +395,26 @@ ssize_t vfs_read(struct file *file, char
 			if (ret > 0) {
 				fsnotify_access(file->f_path.dentry);
 				add_rchar(current, ret);
+
+	                        /* RSBAC: notify adf of read file etc. */
+	                        #ifdef CONFIG_RSBAC_RW
+	                        if (rsbac_target != T_NONE)
+	                          {
+	                            rsbac_new_target_id.dummy = 0;
+	                            if (rsbac_adf_set_attr(R_READ,
+	                                                   current->pid,
+	                                                   rsbac_target,
+	                                                   rsbac_target_id,
+	                                                   T_NONE,
+	                                                   rsbac_new_target_id,
+	                                                   rsbac_attribute,
+	                                                   rsbac_attribute_value))
+	                              {
+	                                rsbac_printk(KERN_WARNING
+	                                       "vfs_read() [sys_read()]: rsbac_adf_set_attr() returned error\n");
+	                              }
+	                          }
+	                        #endif
 			}
 			inc_syscr(current);
 		}
@@ -315,6 +454,15 @@ ssize_t vfs_write(struct file *file, con
 {
 	ssize_t ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        enum  rsbac_attribute_t       rsbac_attribute = A_none;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!(file->f_mode & FMODE_WRITE))
 		return -EBADF;
 	if (!file->f_op || (!file->f_op->write && !file->f_op->aio_write))
@@ -327,6 +475,110 @@ ssize_t vfs_write(struct file *file, con
 		count = ret;
 		ret = security_file_permission (file, MAY_WRITE);
 		if (!ret) {
+                        /* RSBAC */
+                        #ifdef CONFIG_RSBAC_RW
+                        rsbac_pr_debug(aef, "calling ADF\n");
+			rsbac_attribute_value.dummy = 0;
+                        /* get target type and id clear */
+                        if(S_ISSOCK(file->f_dentry->d_inode->i_mode))
+                          {
+			    struct socket * sock = SOCKET_I(file->f_dentry->d_inode);
+
+                            if(   sock->ops
+                               && (sock->ops->family == AF_UNIX)
+                              )
+                              {
+#if 0
+                                if(file->f_dentry->d_sb->s_magic == SOCKFS_MAGIC) {
+                                  rsbac_target = T_IPC;
+                                  rsbac_target_id.ipc.type = I_anonunix;
+		                  if(unix_sk(sock->sk)->peer
+		                     && unix_sk(unix_sk(sock->sk)->peer)->dentry
+                		     && unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode
+		                    )
+					rsbac_target_id.ipc.id.id_nr = unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode->i_ino;
+				  else
+	                                rsbac_target_id.ipc.id.id_nr = file->f_dentry->d_inode->i_ino;
+                                } else {
+				  rsbac_target = T_UNIXSOCK;
+                                  rsbac_target_id.unixsock.device = file->f_dentry->d_sb->s_dev;
+                                  rsbac_target_id.unixsock.inode  = file->f_dentry->d_inode->i_ino;
+                                  rsbac_target_id.unixsock.dentry_p = file->f_dentry;
+                                }
+                                if (sock->sk
+				    && sock->sk->sk_peercred.pid) {
+					rsbac_attribute = A_process;
+					rsbac_attribute_value.process = sock->sk->sk_peercred.pid;
+				} else {
+					rsbac_attribute = A_sock_type;
+					rsbac_attribute_value.sock_type = sock->type;
+				}
+#endif
+                              }
+                            #ifdef CONFIG_RSBAC_NET_OBJ_RW
+                            else
+                              {
+                                rsbac_target = T_NETOBJ;
+                                rsbac_target_id.netobj.sock_p
+                                 = SOCKET_I(file->f_dentry->d_inode);
+                                rsbac_target_id.netobj.local_addr = NULL;
+                                rsbac_target_id.netobj.local_len = 0;
+                                rsbac_target_id.netobj.remote_addr = NULL;
+                                rsbac_target_id.netobj.remote_len = 0;
+				rsbac_attribute = A_sock_type;
+				rsbac_attribute_value.sock_type = sock->type;
+                              }
+                            #endif
+                          }
+                        else
+                        if(   S_ISFIFO(file->f_dentry->d_inode->i_mode)
+                              /* named FIFO only */
+                           && (file->f_dentry->d_sb->s_magic != PIPEFS_MAGIC)
+                          )
+                          {
+                            rsbac_target = T_FIFO;
+                            rsbac_target_id.fifo.device = file->f_dentry->d_sb->s_dev;
+                            rsbac_target_id.fifo.inode  = file->f_dentry->d_inode->i_ino;
+                            rsbac_target_id.fifo.dentry_p = file->f_dentry;
+                          }
+                        else
+                        if(S_ISREG(file->f_dentry->d_inode->i_mode))
+                          {
+                            rsbac_target = T_FILE;
+                            rsbac_target_id.file.device = file->f_dentry->d_sb->s_dev;
+                            rsbac_target_id.file.inode  = file->f_dentry->d_inode->i_ino;
+                            rsbac_target_id.file.dentry_p = file->f_dentry;
+                          }
+                        else
+                        if(S_ISBLK(file->f_dentry->d_inode->i_mode))
+                          {
+                            rsbac_target = T_DEV;
+                            rsbac_target_id.dev.type = D_block;
+                            rsbac_target_id.dev.major = RSBAC_MAJOR(file->f_dentry->d_inode->i_rdev);
+                            rsbac_target_id.dev.minor = RSBAC_MINOR(file->f_dentry->d_inode->i_rdev);
+                          }
+                        else
+                        if(S_ISCHR(file->f_dentry->d_inode->i_mode))
+                          {
+                            rsbac_target = T_DEV;
+                            rsbac_target_id.dev.type = D_char;
+                            rsbac_target_id.dev.major = RSBAC_MAJOR(file->f_dentry->d_inode->i_rdev);
+                            rsbac_target_id.dev.minor = RSBAC_MINOR(file->f_dentry->d_inode->i_rdev);
+                          }
+                        if (   (rsbac_target != T_NONE)
+                            && !rsbac_adf_request(R_WRITE,
+                                                  current->pid,
+                                                  rsbac_target,
+                                                  rsbac_target_id,
+                                                  rsbac_attribute,
+                                                  rsbac_attribute_value)
+                           )
+                          {
+                            ret = -EPERM;
+                          }
+                        else
+                        #endif /* CONFIG_RSBAC_RW */
+
 			if (file->f_op->write)
 				ret = file->f_op->write(file, buf, count, pos);
 			else
@@ -334,6 +586,26 @@ ssize_t vfs_write(struct file *file, con
 			if (ret > 0) {
 				fsnotify_modify(file->f_path.dentry);
 				add_wchar(current, ret);
+
+	                        /* RSBAC: notify adf of written file etc. */
+	                        #ifdef CONFIG_RSBAC_RW
+	                        if (rsbac_target != T_NONE)
+	                          {
+	                            rsbac_new_target_id.dummy = 0;
+	                            if (rsbac_adf_set_attr(R_WRITE,
+	                                                   current->pid,
+	                                                   rsbac_target,
+	                                                   rsbac_target_id,
+	                                                   T_NONE,
+	                                                   rsbac_new_target_id,
+	                                                   rsbac_attribute,
+	                                                   rsbac_attribute_value))
+	                              {
+	                                rsbac_printk(KERN_WARNING
+	                                       "vfs_write()[sys_write()]: rsbac_adf_set_attr() returned error\n");
+	                              }
+	                          }
+	                        #endif
 			}
 			inc_syscw(current);
 		}
@@ -589,6 +861,17 @@ static ssize_t do_readv_writev(int type,
 	io_fn_t fn;
 	iov_fn_t fnv;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+        enum  rsbac_adf_request_t     rsbac_request = R_NONE;
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        enum  rsbac_attribute_t       rsbac_attribute = A_none;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        struct inode * rsbac_inode;
+        #endif
+
 	if (!file->f_op) {
 		ret = -EINVAL;
 		goto out;
@@ -607,6 +890,115 @@ static ssize_t do_readv_writev(int type,
 	if (ret)
 		goto out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+        rsbac_pr_debug(aef, "[sys_vread(), sys_vwrite()]: calling ADF\n");
+        rsbac_inode = file->f_dentry->d_inode;
+        rsbac_attribute_value.dummy = 0;
+        /* get target type and id clear */
+        if(S_ISSOCK(rsbac_inode->i_mode))
+          {
+	    struct socket * sock = SOCKET_I(rsbac_inode);
+
+            if(   sock->ops
+               && (sock->ops->family == AF_UNIX)
+              )
+              {
+#if 0
+                if(file->f_dentry->d_sb->s_magic == SOCKFS_MAGIC) {
+                  rsbac_target = T_IPC;
+                  rsbac_target_id.ipc.type = I_anonunix;
+                  if(unix_sk(sock->sk)->peer
+                     && unix_sk(unix_sk(sock->sk)->peer)->dentry
+		     && unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode
+		    )
+			rsbac_target_id.ipc.id.id_nr = unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode->i_ino;
+		  else
+	                rsbac_target_id.ipc.id.id_nr = rsbac_inode->i_ino;
+                } else {
+		  rsbac_target = T_UNIXSOCK;
+                  rsbac_target_id.unixsock.device = file->f_dentry->d_sb->s_dev;
+                  rsbac_target_id.unixsock.inode  = rsbac_inode->i_ino;
+                  rsbac_target_id.unixsock.dentry_p = file->f_dentry;
+                }
+                if (sock->sk
+		    && sock->sk->sk_peercred.pid) {
+			rsbac_attribute = A_process;
+			rsbac_attribute_value.process = sock->sk->sk_peercred.pid;
+		} else {
+			rsbac_attribute = A_sock_type;
+			rsbac_attribute_value.sock_type = sock->type;
+		}
+#endif
+              }
+            #ifdef CONFIG_RSBAC_NET_OBJ_RW
+            else
+              {
+                rsbac_target = T_NETOBJ;
+                rsbac_target_id.netobj.sock_p
+                  = sock;
+                rsbac_target_id.netobj.local_addr = NULL;
+                rsbac_target_id.netobj.local_len = 0;
+                rsbac_target_id.netobj.remote_addr = NULL;
+                rsbac_target_id.netobj.remote_len = 0;
+		rsbac_attribute = A_sock_type;
+		rsbac_attribute_value.sock_type = sock->type;
+              }
+            #endif
+          }
+        else
+        if(   S_ISFIFO(rsbac_inode->i_mode)
+           /* named FIFO only */
+           && (rsbac_inode->i_sb->s_magic != PIPEFS_MAGIC)
+          )
+          {
+            rsbac_target = T_FIFO;
+            rsbac_target_id.fifo.device = rsbac_inode->i_sb->s_dev;
+            rsbac_target_id.fifo.inode  = rsbac_inode->i_ino;
+            rsbac_target_id.fifo.dentry_p = file->f_dentry;
+          }
+        else
+        if(S_ISREG(rsbac_inode->i_mode))
+          {
+            rsbac_target = T_FILE;
+            rsbac_target_id.file.device = rsbac_inode->i_sb->s_dev;
+            rsbac_target_id.file.inode  = rsbac_inode->i_ino;
+            rsbac_target_id.file.dentry_p = file->f_dentry;
+          }
+        else
+        if(S_ISBLK(rsbac_inode->i_mode))
+          {
+            rsbac_target = T_DEV;
+            rsbac_target_id.dev.type = D_block;
+            rsbac_target_id.dev.major = RSBAC_MAJOR(rsbac_inode->i_rdev);
+            rsbac_target_id.dev.minor = RSBAC_MINOR(rsbac_inode->i_rdev);
+          }
+        else
+        if(S_ISCHR(rsbac_inode->i_mode))
+          {
+            rsbac_target = T_DEV;
+            rsbac_target_id.dev.type = D_char;
+            rsbac_target_id.dev.major = RSBAC_MAJOR(rsbac_inode->i_rdev);
+            rsbac_target_id.dev.minor = RSBAC_MINOR(rsbac_inode->i_rdev);
+          }
+        if(type == READ)
+          rsbac_request = R_READ;
+        else
+          rsbac_request = R_WRITE;
+        if (   (rsbac_target != T_NONE)
+            && !rsbac_adf_request(rsbac_request,
+                                  current->pid,
+                                  rsbac_target,
+                                  rsbac_target_id,
+                                  rsbac_attribute,
+                                  rsbac_attribute_value)
+           )
+          {
+            ret = -EPERM;
+            goto out;
+          }
+        #endif /* CONFIG_RSBAC_RW */
+
 	fnv = NULL;
 	if (type == READ) {
 		fn = file->f_op->read;
@@ -631,6 +1023,29 @@ out:
 		else
 			fsnotify_modify(file->f_path.dentry);
 	}
+
+        /* RSBAC: notify adf of read or written file etc. */
+        #ifdef CONFIG_RSBAC_RW
+        if (   (ret > 0)
+            && (rsbac_target != T_NONE)
+           )
+          {
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(rsbac_request,
+                                   current->pid,
+                                   rsbac_target,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   rsbac_attribute,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "do_readv_writev() [sys_vread(), sys_vwrite()]: rsbac_adf_set_attr() returned error\n");
+              }
+          }
+        #endif
+
 	return ret;
 }
 
@@ -711,6 +1126,19 @@ static ssize_t do_sendfile(int out_fd, i
 	ssize_t retval;
 	int fput_needed_in, fput_needed_out, fl;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        enum  rsbac_target_t          rsbac_target2 = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_target2_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        enum  rsbac_attribute_t       rsbac_attribute = A_none;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        enum  rsbac_attribute_t       rsbac_attribute2 = A_none;
+        union rsbac_attribute_value_t rsbac_attribute_value2;
+        #endif
+
 	/*
 	 * Get input file, and verify that it is ok..
 	 */
@@ -741,6 +1169,108 @@ static ssize_t do_sendfile(int out_fd, i
 	if (retval)
 		goto fput_in;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+        rsbac_pr_debug(aef, "[sys_sendfile()]: calling ADF\n");
+        rsbac_attribute_value.dummy = 0;
+        /* get target type and id clear */
+        if(S_ISSOCK(in_file->f_dentry->d_inode->i_mode))
+          {
+	    struct socket * sock = SOCKET_I(in_file->f_dentry->d_inode);
+
+	    if(   sock->ops
+               && (sock->ops->family == AF_UNIX)
+              )
+              {
+#if 0
+                if(in_file->f_dentry->d_sb->s_magic == SOCKFS_MAGIC) {
+                  rsbac_target = T_IPC;
+                  rsbac_target_id.ipc.type = I_anonunix;
+                  if(unix_sk(sock->sk)->peer
+                     && unix_sk(unix_sk(sock->sk)->peer)->dentry
+		     && unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode
+		    )
+			rsbac_target_id.ipc.id.id_nr = unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode->i_ino;
+		  else
+	                rsbac_target_id.ipc.id.id_nr = in_file->f_dentry->d_inode->i_ino;
+                } else {
+		  rsbac_target = T_UNIXSOCK;
+                  rsbac_target_id.unixsock.device = in_file->f_dentry->d_sb->s_dev;
+                  rsbac_target_id.unixsock.inode  = in_file->f_dentry->d_inode->i_ino;
+                  rsbac_target_id.unixsock.dentry_p = in_file->f_dentry;
+                }
+                if (sock->sk
+		    && sock->sk->sk_peercred.pid) {
+			rsbac_attribute = A_process;
+			rsbac_attribute_value.process = sock->sk->sk_peercred.pid;
+		} else {
+			rsbac_attribute = A_sock_type;
+			rsbac_attribute_value.sock_type = sock->type;
+		}
+#endif
+              }
+            #ifdef CONFIG_RSBAC_NET_OBJ_RW
+            else
+              {
+                rsbac_target = T_NETOBJ;
+                rsbac_target_id.netobj.sock_p = sock;
+                rsbac_target_id.netobj.local_addr = NULL;
+                rsbac_target_id.netobj.local_len = 0;
+                rsbac_target_id.netobj.remote_addr = NULL;
+                rsbac_target_id.netobj.remote_len = 0;
+		rsbac_attribute = A_sock_type;
+		rsbac_attribute_value.sock_type = sock->type;
+              }
+            #endif
+          }
+        else
+        if(   S_ISFIFO(in_file->f_dentry->d_inode->i_mode)
+              /* named FIFO only */
+           && (in_file->f_dentry->d_sb->s_magic != PIPEFS_MAGIC)
+          )
+          {
+            rsbac_target = T_FIFO;
+            rsbac_target_id.fifo.device = in_file->f_dentry->d_sb->s_dev;
+            rsbac_target_id.fifo.inode  = in_file->f_dentry->d_inode->i_ino;
+            rsbac_target_id.fifo.dentry_p = in_file->f_dentry;
+          }
+        else
+        if(S_ISREG(in_file->f_dentry->d_inode->i_mode))
+          {
+            rsbac_target = T_FILE;
+            rsbac_target_id.file.device = in_file->f_dentry->d_sb->s_dev;
+            rsbac_target_id.file.inode  = in_file->f_dentry->d_inode->i_ino;
+            rsbac_target_id.file.dentry_p = in_file->f_dentry;
+          }
+        else
+        if(S_ISBLK(in_file->f_dentry->d_inode->i_mode))
+          {
+            rsbac_target = T_DEV;
+            rsbac_target_id.dev.type = D_block;
+            rsbac_target_id.dev.major = RSBAC_MAJOR(in_file->f_dentry->d_inode->i_rdev);
+            rsbac_target_id.dev.minor = RSBAC_MINOR(in_file->f_dentry->d_inode->i_rdev);
+          }
+        else
+        if(S_ISCHR(in_file->f_dentry->d_inode->i_mode))
+          {
+            rsbac_target = T_DEV;
+            rsbac_target_id.dev.type = D_char;
+            rsbac_target_id.dev.major = RSBAC_MAJOR(in_file->f_dentry->d_inode->i_rdev);
+            rsbac_target_id.dev.minor = RSBAC_MINOR(in_file->f_dentry->d_inode->i_rdev);
+          }
+        if (   (rsbac_target != T_NONE)
+            && !rsbac_adf_request(R_READ,
+                                  current->pid,
+                                  rsbac_target,
+                                  rsbac_target_id,
+                                  rsbac_attribute,
+                                  rsbac_attribute_value)
+           ) {
+           	retval = -EPERM;
+		goto fput_in;
+        }
+        #endif /* CONFIG_RSBAC_RW */
+
 	/*
 	 * Get output file, and verify that it is ok..
 	 */
@@ -763,6 +1293,107 @@ static ssize_t do_sendfile(int out_fd, i
 	if (retval)
 		goto fput_out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+        rsbac_pr_debug(aef, "[sys_sendfile()]: calling ADF for outfile\n");
+	rsbac_attribute_value2.dummy = 0;
+        /* get target type and id clear */
+        if(S_ISSOCK(out_file->f_dentry->d_inode->i_mode))
+          {
+	    struct socket * sock = SOCKET_I(out_file->f_dentry->d_inode);
+
+	    if(   sock->ops
+               && (sock->ops->family == AF_UNIX)
+              )
+              {
+                if(out_file->f_dentry->d_sb->s_magic == SOCKFS_MAGIC) {
+                  rsbac_target = T_IPC;
+                  rsbac_target_id.ipc.type = I_anonunix;
+                  if(unix_sk(sock->sk)->peer
+                     && unix_sk(unix_sk(sock->sk)->peer)->dentry
+		     && unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode
+		    )
+			rsbac_target_id.ipc.id.id_nr = unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode->i_ino;
+		  else
+	                  rsbac_target_id.ipc.id.id_nr = out_file->f_dentry->d_inode->i_ino;
+                } else {
+		  rsbac_target = T_UNIXSOCK;
+                  rsbac_target_id.unixsock.device = out_file->f_dentry->d_sb->s_dev;
+                  rsbac_target_id.unixsock.inode  = out_file->f_dentry->d_inode->i_ino;
+                  rsbac_target_id.unixsock.dentry_p = out_file->f_dentry;
+                }
+                if (sock->sk
+		    && sock->sk->sk_peercred.pid) {
+			rsbac_attribute2 = A_process;
+			rsbac_attribute_value2.process = sock->sk->sk_peercred.pid;
+		} else {
+			rsbac_attribute2 = A_sock_type;
+			rsbac_attribute_value2.sock_type = sock->type;
+		}
+              }
+            #ifdef CONFIG_RSBAC_NET_OBJ_RW
+            else
+              {
+                rsbac_target = T_NETOBJ;
+                rsbac_target_id.netobj.sock_p = sock;
+                rsbac_target_id.netobj.local_addr = NULL;
+                rsbac_target_id.netobj.local_len = 0;
+                rsbac_target_id.netobj.remote_addr = NULL;
+                rsbac_target_id.netobj.remote_len = 0;
+		rsbac_attribute2 = A_sock_type;
+		rsbac_attribute_value2.sock_type = sock->type;
+              }
+            #endif
+          }
+        else
+        if(   S_ISFIFO(out_file->f_dentry->d_inode->i_mode)
+              /* named FIFO only */
+           && (out_file->f_dentry->d_sb->s_magic != PIPEFS_MAGIC)
+          )
+          {
+            rsbac_target2 = T_FIFO;
+            rsbac_target2_id.fifo.device = out_file->f_dentry->d_sb->s_dev;
+            rsbac_target2_id.fifo.inode  = out_file->f_dentry->d_inode->i_ino;
+            rsbac_target2_id.fifo.dentry_p = out_file->f_dentry;
+          }
+        else
+        if(S_ISREG(out_file->f_dentry->d_inode->i_mode))
+          {
+            rsbac_target2 = T_FILE;
+            rsbac_target2_id.file.device = out_file->f_dentry->d_sb->s_dev;
+            rsbac_target2_id.file.inode  = out_file->f_dentry->d_inode->i_ino;
+            rsbac_target2_id.file.dentry_p = out_file->f_dentry;
+          }
+        else
+        if(S_ISBLK(out_file->f_dentry->d_inode->i_mode))
+          {
+            rsbac_target2 = T_DEV;
+            rsbac_target2_id.dev.type = D_block;
+            rsbac_target2_id.dev.major = RSBAC_MAJOR(out_file->f_dentry->d_inode->i_rdev);
+            rsbac_target2_id.dev.minor = RSBAC_MINOR(out_file->f_dentry->d_inode->i_rdev);
+          }
+        else
+        if(S_ISCHR(out_file->f_dentry->d_inode->i_mode))
+          {
+            rsbac_target2 = T_DEV;
+            rsbac_target2_id.dev.type = D_char;
+            rsbac_target2_id.dev.major = RSBAC_MAJOR(out_file->f_dentry->d_inode->i_rdev);
+            rsbac_target2_id.dev.minor = RSBAC_MINOR(out_file->f_dentry->d_inode->i_rdev);
+          }
+        if (   (rsbac_target2 != T_NONE)
+            && !rsbac_adf_request(R_WRITE,
+                                  current->pid,
+                                  rsbac_target2,
+                                  rsbac_target2_id,
+                                  rsbac_attribute2,
+                                  rsbac_attribute_value2)
+           )
+          {
+            retval = -EPERM;
+            goto fput_out;
+          }
+        #endif /* CONFIG_RSBAC_RW */
+
 	if (!max)
 		max = min(in_inode->i_sb->s_maxbytes, out_inode->i_sb->s_maxbytes);
 
@@ -800,6 +1431,45 @@ static ssize_t do_sendfile(int out_fd, i
 	if (*ppos > max)
 		retval = -EOVERFLOW;
 
+        /* RSBAC: notify adf of read and written files etc. */
+        #ifdef CONFIG_RSBAC_RW
+        if (retval > 0)
+          {
+            if(rsbac_target != T_NONE)
+              {
+                rsbac_new_target_id.dummy = 0;
+                if (rsbac_adf_set_attr(R_READ,
+                                       current->pid,
+                                       rsbac_target,
+                                       rsbac_target_id,
+                                       T_NONE,
+                                       rsbac_new_target_id,
+                                       rsbac_attribute,
+                                       rsbac_attribute_value))
+                  {
+                    rsbac_printk(KERN_WARNING
+                           "do_sendfile() [sys_sendfile()]: rsbac_adf_set_attr() for in_file returned error\n");
+                  }
+              }
+            if(rsbac_target2 != T_NONE)
+              {
+                rsbac_new_target_id.dummy = 0;
+                if (rsbac_adf_set_attr(R_WRITE,
+                                       current->pid,
+                                       rsbac_target2,
+                                       rsbac_target2_id,
+                                       T_NONE,
+                                       rsbac_new_target_id,
+                                       rsbac_attribute2,
+                                       rsbac_attribute_value2))
+                  {
+                    rsbac_printk(KERN_WARNING
+                           "do_sendfile() [sys_sendfile()]: rsbac_adf_set_attr() for out_file returned error\n");
+                  }
+              }
+          }
+        #endif
+
 fput_out:
 	fput_light(out_file, fput_needed_out);
 fput_in:
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/readdir.c linux-2.6.23.14-rsbac-1.3.7/fs/readdir.c
--- trunk/fs/readdir.c	2008-02-13 16:25:49.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/readdir.c	2008-02-13 13:25:38.000000000 +0100
@@ -19,10 +19,27 @@
 
 #include <asm/uaccess.h>
 
+#ifdef CONFIG_RSBAC
+#include <net/sock.h>
+#ifdef CONFIG_RSBAC_FSOBJ_HIDE
+#include "hfsplus/hfsplus_fs.h"
+#include "hfsplus/hfsplus_raw.h"
+#endif
+#endif
+
+#include <rsbac/hooks.h>
+#include <linux/namei.h>
+
 int vfs_readdir(struct file *file, filldir_t filler, void *buf)
 {
 	struct inode *inode = file->f_path.dentry->d_inode;
 	int res = -ENOTDIR;
+
+#ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (!file->f_op || !file->f_op->readdir)
 		goto out;
 
@@ -30,6 +47,23 @@ int vfs_readdir(struct file *file, filld
 	if (res)
 		goto out;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[old_readdir(), sys_getdents()]: calling ADF\n");
+	rsbac_target_id.dir.device = inode->i_sb->s_dev;
+	rsbac_target_id.dir.inode = inode->i_ino;
+	rsbac_target_id.dir.dentry_p = file->f_dentry;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_READ,
+				current->pid,
+				T_DIR,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))	{
+		res = -EPERM;
+		goto out;
+	}
+#endif
+
 	mutex_lock(&inode->i_mutex);
 	res = -ENOENT;
 	if (!IS_DEADDIR(inode)) {
@@ -64,6 +98,9 @@ struct old_linux_dirent {
 
 struct readdir_callback {
 	struct old_linux_dirent __user * dirent;
+#ifdef CONFIG_RSBAC_FSOBJ_HIDE
+	struct file * file;
+#endif
 	int result;
 };
 
@@ -76,6 +113,11 @@ static int fillonedir(void * __buf, cons
 
 	if (buf->result)
 		return -EINVAL;
+#ifdef CONFIG_RSBAC_FSOBJ_HIDE
+	if (!rsbac_handle_filldir(buf->file, name, namlen, ino))
+		return 0;
+#endif
+
 	d_ino = ino;
 	if (sizeof(d_ino) < sizeof(ino) && d_ino != ino)
 		return -EOVERFLOW;
@@ -92,6 +134,7 @@ static int fillonedir(void * __buf, cons
 		__put_user(0, dirent->d_name + namlen))
 		goto efault;
 	return 0;
+
 efault:
 	buf->result = -EFAULT;
 	return -EFAULT;
@@ -110,6 +153,9 @@ asmlinkage long old_readdir(unsigned int
 
 	buf.result = 0;
 	buf.dirent = dirent;
+#ifdef CONFIG_RSBAC_FSOBJ_HIDE
+	buf.file = file;
+#endif
 
 	error = vfs_readdir(file, fillonedir, &buf);
 	if (error >= 0)
@@ -136,6 +182,9 @@ struct linux_dirent {
 struct getdents_callback {
 	struct linux_dirent __user * current_dir;
 	struct linux_dirent __user * previous;
+#ifdef CONFIG_RSBAC_FSOBJ_HIDE
+	struct file * file;
+#endif
 	int count;
 	int error;
 };
@@ -151,6 +200,10 @@ static int filldir(void * __buf, const c
 	buf->error = -EINVAL;	/* only used if we fail.. */
 	if (reclen > buf->count)
 		return -EINVAL;
+#ifdef CONFIG_RSBAC_FSOBJ_HIDE
+	if (!rsbac_handle_filldir(buf->file, name, namlen, ino))
+		return 0;
+#endif
 	d_ino = ino;
 	if (sizeof(d_ino) < sizeof(ino) && d_ino != ino)
 		return -EOVERFLOW;
@@ -175,6 +228,7 @@ static int filldir(void * __buf, const c
 	buf->current_dir = dirent;
 	buf->count -= reclen;
 	return 0;
+
 efault:
 	buf->error = -EFAULT;
 	return -EFAULT;
@@ -198,6 +252,9 @@ asmlinkage long sys_getdents(unsigned in
 
 	buf.current_dir = dirent;
 	buf.previous = NULL;
+#ifdef CONFIG_RSBAC_FSOBJ_HIDE
+	buf.file = file;
+#endif
 	buf.count = count;
 	buf.error = 0;
 
@@ -224,6 +281,9 @@ struct getdents_callback64 {
 	struct linux_dirent64 __user * previous;
 	int count;
 	int error;
+#ifdef CONFIG_RSBAC_FSOBJ_HIDE
+	struct file * file;
+#endif
 };
 
 static int filldir64(void * __buf, const char * name, int namlen, loff_t offset,
@@ -236,6 +296,12 @@ static int filldir64(void * __buf, const
 	buf->error = -EINVAL;	/* only used if we fail.. */
 	if (reclen > buf->count)
 		return -EINVAL;
+
+#ifdef CONFIG_RSBAC_FSOBJ_HIDE
+	if (!rsbac_handle_filldir(buf->file, name, namlen, ino))
+		return 0;
+#endif
+
 	dirent = buf->previous;
 	if (dirent) {
 		if (__put_user(offset, &dirent->d_off))
@@ -259,6 +325,7 @@ static int filldir64(void * __buf, const
 	buf->current_dir = dirent;
 	buf->count -= reclen;
 	return 0;
+
 efault:
 	buf->error = -EFAULT;
 	return -EFAULT;
@@ -282,6 +349,9 @@ asmlinkage long sys_getdents64(unsigned 
 
 	buf.current_dir = dirent;
 	buf.previous = NULL;
+#ifdef CONFIG_RSBAC_FSOBJ_HIDE
+	buf.file = file;
+#endif
 	buf.count = count;
 	buf.error = 0;
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/reiserfs/namei.c linux-2.6.23.14-rsbac-1.3.7/fs/reiserfs/namei.c
--- trunk/fs/reiserfs/namei.c	2008-02-13 16:25:25.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/reiserfs/namei.c	2008-02-13 13:24:53.000000000 +0100
@@ -17,6 +17,7 @@
 #include <linux/reiserfs_acl.h>
 #include <linux/reiserfs_xattr.h>
 #include <linux/quotaops.h>
+#include <rsbac/hooks.h>
 
 #define INC_DIR_INODE_NLINK(i) if (i->i_nlink != 1) { inc_nlink(i); if (i->i_nlink >= REISERFS_LINK_MAX) i->i_nlink=1; }
 #define DEC_DIR_INODE_NLINK(i) if (i->i_nlink != 1) drop_nlink(i);
@@ -997,6 +998,12 @@ static int reiserfs_unlink(struct inode 
 	 * count so we don't race
 	 */
 	savelink = inode->i_nlink;
+	
+#ifdef CONFIG_RSBAC_SECDEL
+	/* Clear content and sync */
+	if(inode->i_nlink == 1)
+		rsbac_sec_del(dentry, TRUE);
+#endif
 
 	retval =
 	    reiserfs_cut_from_item(&th, &path, &(de.de_entry_key), dir, NULL,
@@ -1369,6 +1376,12 @@ static int reiserfs_rename(struct inode 
 			journal_end(&th, old_dir->i_sb, jbegin_count);
 			reiserfs_write_unlock(old_dir->i_sb);
 			return -EIO;
+#ifdef CONFIG_RSBAC_SECDEL
+		} else {
+			/* Clear content and sync */
+			if(new_dentry_inode && (new_dentry_inode->i_nlink == 1))
+				rsbac_sec_del(new_dentry, TRUE);
+#endif
 		}
 
 		copy_item_head(&new_entry_ih, get_ih(&new_entry_path));
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/reiserfs/xattr.c linux-2.6.23.14-rsbac-1.3.7/fs/reiserfs/xattr.c
--- trunk/fs/reiserfs/xattr.c	2008-02-13 16:25:25.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/reiserfs/xattr.c	2008-02-13 13:24:52.000000000 +0100
@@ -1185,6 +1185,10 @@ static struct dentry_operations xattr_lo
 	.d_compare = xattr_lookup_poison,
 };
 
+#ifdef CONFIG_RSBAC
+struct dentry * rsbac_lookup_one_len(const char * name, struct dentry * base, int len);
+#endif
+
 /* We need to take a copy of the mount flags since things like
  * MS_RDONLY don't get set until *after* we're called.
  * mount_flags != mount_options */
@@ -1212,8 +1216,13 @@ int reiserfs_xattr_init(struct super_blo
 	/* If we don't have the privroot located yet - go find it */
 	if (reiserfs_xattrs(s) && !REISERFS_SB(s)->priv_root) {
 		struct dentry *dentry;
+#ifdef CONFIG_RSBAC
+		dentry = rsbac_lookup_one_len(PRIVROOT_NAME, s->s_root,
+						strlen(PRIVROOT_NAME));
+#else
 		dentry = lookup_one_len(PRIVROOT_NAME, s->s_root,
 					strlen(PRIVROOT_NAME));
+#endif
 		if (!IS_ERR(dentry)) {
 			if (!(mount_flags & MS_RDONLY) && !dentry->d_inode) {
 				struct inode *inode = dentry->d_parent->d_inode;
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/stat.c linux-2.6.23.14-rsbac-1.3.7/fs/stat.c
--- trunk/fs/stat.c	2008-02-13 16:25:30.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/stat.c	2008-02-13 13:25:01.000000000 +0100
@@ -18,6 +18,11 @@
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
 
+#ifdef CONFIG_RSBAC
+#include <net/sock.h>
+#include <rsbac/hooks.h>
+#endif
+
 void generic_fillattr(struct inode *inode, struct kstat *stat)
 {
 	stat->dev = inode->i_sb->s_dev;
@@ -30,6 +35,16 @@ void generic_fillattr(struct inode *inod
 	stat->atime = inode->i_atime;
 	stat->mtime = inode->i_mtime;
 	stat->ctime = inode->i_ctime;
+#ifdef CONFIG_RSBAC_SYM_REDIR
+#ifdef CONFIG_RSBAC_SYM_REDIR_MAC_CAT
+	if (S_ISLNK(inode->i_mode))
+		stat->size = i_size_read(inode) + 85;
+#else
+	if (S_ISLNK(inode->i_mode))
+		stat->size = i_size_read(inode) + 20;
+#endif
+	else
+#endif
 	stat->size = i_size_read(inode);
 	stat->blocks = inode->i_blocks;
 	stat->blksize = (1 << inode->i_blkbits);
@@ -42,10 +57,53 @@ int vfs_getattr(struct vfsmount *mnt, st
 	struct inode *inode = dentry->d_inode;
 	int retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	retval = security_inode_getattr(mnt, dentry);
 	if (retval)
 		return retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "[sys_stat() etc.]: calling ADF\n");
+	rsbac_target_id.file.device = inode->i_sb->s_dev;
+        rsbac_target_id.file.inode  = inode->i_ino;
+        rsbac_target_id.file.dentry_p = dentry;
+        if (S_ISDIR(inode->i_mode))
+          rsbac_target = T_DIR;
+        else if (S_ISFIFO(inode->i_mode))
+          rsbac_target = T_FIFO;
+	else if (S_ISLNK(inode->i_mode))
+	  rsbac_target = T_SYMLINK;
+	else if (S_ISSOCK(inode->i_mode)) {
+		if(inode->i_sb->s_magic == SOCKFS_MAGIC) {
+		  rsbac_target = T_IPC;
+		  rsbac_target_id.ipc.type = I_anonunix;
+		  rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+	        } else {
+		  rsbac_target = T_UNIXSOCK;
+		  rsbac_target_id.unixsock.device = inode->i_sb->s_dev;
+		  rsbac_target_id.unixsock.inode  = inode->i_ino;
+		  rsbac_target_id.unixsock.dentry_p = dentry;
+		}
+	} else
+		rsbac_target = T_FILE;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              rsbac_target,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value)) {
+		return -EPERM;
+	}
+	#endif
+
 	if (inode->i_op->getattr)
 		return inode->i_op->getattr(mnt, dentry, stat);
 
@@ -297,6 +355,12 @@ asmlinkage long sys_readlinkat(int dfd, 
 	struct nameidata nd;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (bufsiz <= 0)
 		return -EINVAL;
 
@@ -308,6 +372,25 @@ asmlinkage long sys_readlinkat(int dfd, 
 		if (inode->i_op && inode->i_op->readlink) {
 			error = security_inode_readlink(nd.dentry);
 			if (!error) {
+                                /* RSBAC */
+                                #ifdef CONFIG_RSBAC
+                                rsbac_pr_debug(aef, "calling ADF\n");
+                                rsbac_target_id.file.device = nd.dentry->d_sb->s_dev;
+                                rsbac_target_id.file.inode  = inode->i_ino;
+                                rsbac_target_id.file.dentry_p = nd.dentry;
+                                rsbac_attribute_value.dummy = 0;
+                                if (!rsbac_adf_request(R_GET_STATUS_DATA,
+                                                       current->pid,
+                                                       T_SYMLINK,
+                                                       rsbac_target_id,
+                                                       A_none,
+                                                       rsbac_attribute_value))
+                                  {
+                                    path_release(&nd);
+                                    return -EPERM;
+                                  }
+                                #endif /* CONFIG_RSBAC */
+
 				touch_atime(nd.mnt, nd.dentry);
 				error = inode->i_op->readlink(nd.dentry, buf, bufsiz);
 			}
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/sysfs/file.c linux-2.6.23.14-rsbac-1.3.7/fs/sysfs/file.c
--- trunk/fs/sysfs/file.c	2008-02-13 16:25:48.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/sysfs/file.c	2008-02-13 13:25:37.000000000 +0100
@@ -13,6 +13,8 @@
 
 #include "sysfs.h"
 
+#include <rsbac/hooks.h>
+
 #define to_sattr(a) container_of(a,struct subsys_attribute, attr)
 
 /*
@@ -246,6 +248,11 @@ static int sysfs_open_file(struct inode 
 	struct sysfs_ops * ops = NULL;
 	int error;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	/* need attr_sd for attr and ops, its parent for kobj */
 	if (!sysfs_get_active_two(attr_sd))
 		return -ENODEV;
@@ -275,6 +282,22 @@ static int sysfs_open_file(struct inode 
 	if (file->f_mode & FMODE_WRITE) {
 		if (!(inode->i_mode & S_IWUGO) || !ops->store)
 			goto err_out;
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                rsbac_pr_debug(aef, "[sysfs_open_file()]: calling ADF\n");
+                rsbac_target_id.scd = ST_sysfs;
+                rsbac_attribute_value.dummy = 0;
+                if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                                      current->pid,
+                                      T_SCD,
+                                      rsbac_target_id,
+                                      A_owner,
+                                      rsbac_attribute_value))
+                  {
+                    error = -EPERM;
+                    goto err_out;
+                  }
+                #endif
 	}
 
 	/* File needs read support.
@@ -284,6 +307,23 @@ static int sysfs_open_file(struct inode 
 	if (file->f_mode & FMODE_READ) {
 		if (!(inode->i_mode & S_IRUGO) || !ops->show)
 			goto err_out;
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                rsbac_pr_debug(aef, "[sysfs_open_file()]: calling ADF\n");
+                rsbac_target_id.scd = ST_sysfs;
+                rsbac_attribute_value.dummy = 0;
+                if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                                      current->pid,
+                                      T_SCD,
+                                      rsbac_target_id,
+                                      A_owner,
+                                      rsbac_attribute_value))
+                  {
+                    error = -EPERM;
+                    goto err_out;
+                  }
+                #endif
 	}
 
 	/* No error? Great, allocate a buffer for the file, and store it
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/utimes.c linux-2.6.23.14-rsbac-1.3.7/fs/utimes.c
--- trunk/fs/utimes.c	2008-02-13 16:25:15.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/utimes.c	2008-02-13 13:24:33.000000000 +0100
@@ -8,6 +8,7 @@
 #include <linux/utime.h>
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
+#include <rsbac/hooks.h>
 
 #ifdef __ARCH_WANT_SYS_UTIME
 
@@ -51,6 +52,12 @@ long do_utimes(int dfd, char __user *fil
 	struct iattr newattrs;
 	struct file *f = NULL;
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	error = -EINVAL;
 	if (flags & ~AT_SYMLINK_NOFOLLOW)
 		goto out;
@@ -105,7 +112,9 @@ long do_utimes(int dfd, char __user *fil
 		error = -EACCES;
                 if (IS_IMMUTABLE(inode))
                         goto dput_and_out;
-
+#ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+		if(!rsbac_dac_part_disabled(dentry))
+#endif
 		if (!is_owner_or_cap(inode)) {
 			if (f) {
 				if (!(f->f_mode & FMODE_WRITE))
@@ -117,6 +126,34 @@ long do_utimes(int dfd, char __user *fil
 			}
 		}
 	}
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target = T_FILE;
+	if (S_ISDIR(inode->i_mode))
+		rsbac_target = T_DIR;
+	else if (S_ISFIFO(inode->i_mode))
+		rsbac_target = T_FIFO;
+	else if (S_ISLNK(inode->i_mode))
+		rsbac_target = T_SYMLINK;
+	else if (S_ISSOCK(inode->i_mode))
+		rsbac_target = T_UNIXSOCK;
+	rsbac_target_id.file.device = inode->i_sb->s_dev;
+	rsbac_target_id.file.inode  = inode->i_ino;
+	rsbac_target_id.file.dentry_p = dentry;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_ACCESS_DATA,
+				current->pid,
+				rsbac_target,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		error = -EPERM;
+		goto dput_and_out;
+	}
+#endif
+
 	mutex_lock(&inode->i_mutex);
 	error = notify_change(dentry, &newattrs);
 	mutex_unlock(&inode->i_mutex);
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/vfat/namei.c linux-2.6.23.14-rsbac-1.3.7/fs/vfat/namei.c
--- trunk/fs/vfat/namei.c	2008-02-13 16:25:47.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/vfat/namei.c	2008-02-13 13:25:34.000000000 +0100
@@ -24,6 +24,8 @@
 #include <linux/smp_lock.h>
 #include <linux/buffer_head.h>
 #include <linux/namei.h>
+#include <linux/security.h>
+#include <rsbac/hooks.h>
 
 static int vfat_revalidate(struct dentry *dentry, struct nameidata *nd)
 {
@@ -805,6 +807,12 @@ static int vfat_unlink(struct inode *dir
 	if (err)
 		goto out;
 
+	/* RSBAC vfat_unlink */
+#ifdef CONFIG_RSBAC_SECDEL
+	/* Clear content and sync */
+	rsbac_sec_del(dentry, TRUE);
+#endif
+
 	err = fat_remove_entries(dir, &sinfo);	/* and releases bh */
 	if (err)
 		goto out;
@@ -900,7 +908,14 @@ static int vfat_rename(struct inode *old
 			if (err)
 				goto out;
 		}
+#ifdef CONFIG_RSBAC_SECDEL
+		/* Clear content and sync */
+		else
+			if(new_inode->i_nlink == 1)
+				rsbac_sec_del(new_dentry, TRUE);
+#endif
 		new_i_pos = MSDOS_I(new_inode)->i_pos;
+
 		fat_detach(new_inode);
 	} else {
 		err = vfat_add_entry(new_dir, &new_dentry->d_name, is_dir, 0,
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/xattr.c linux-2.6.23.14-rsbac-1.3.7/fs/xattr.c
--- trunk/fs/xattr.c	2008-02-13 16:25:26.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/xattr.c	2008-02-13 13:24:53.000000000 +0100
@@ -19,6 +19,7 @@
 #include <linux/audit.h>
 #include <asm/uaccess.h>
 
+#include <rsbac/hooks.h>
 
 /*
  * Check permissions for extended attribute access.  This is a bit complicated
@@ -74,6 +75,13 @@ vfs_setxattr(struct dentry *dentry, char
 	struct inode *inode = dentry->d_inode;
 	int error;
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+
 	error = xattr_permission(inode, name, MAY_WRITE);
 	if (error)
 		return error;
@@ -82,6 +90,31 @@ vfs_setxattr(struct dentry *dentry, char
 	error = security_inode_setxattr(dentry, name, value, size, flags);
 	if (error)
 		goto out;
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[sys_*setxattr()]: calling ADF\n");
+	rsbac_target = T_FILE;
+	if (S_ISDIR(inode->i_mode))
+		rsbac_target = T_DIR;
+	else if (S_ISFIFO(inode->i_mode))
+		rsbac_target = T_FIFO;
+	else if (S_ISLNK(inode->i_mode))
+		rsbac_target = T_SYMLINK;
+	else if (S_ISSOCK(inode->i_mode))
+		rsbac_target = T_UNIXSOCK;
+	rsbac_target_id.file.device = dentry->d_sb->s_dev;
+	rsbac_target_id.file.inode  = inode->i_ino;
+	rsbac_target_id.file.dentry_p = dentry;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_PERMISSIONS_DATA,
+				current->pid,
+				rsbac_target,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value)) {
+		error = -EPERM;
+		goto out;
+	}
+#endif
 	error = -EOPNOTSUPP;
 	if (inode->i_op->setxattr) {
 		error = inode->i_op->setxattr(dentry, name, value, size, flags);
@@ -110,6 +143,12 @@ vfs_getxattr(struct dentry *dentry, char
 	struct inode *inode = dentry->d_inode;
 	int error;
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	error = xattr_permission(inode, name, MAY_READ);
 	if (error)
 		return error;
@@ -118,6 +157,33 @@ vfs_getxattr(struct dentry *dentry, char
 	if (error)
 		return error;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[sys_*getxattr()]: calling ADF\n");
+	rsbac_target = T_FILE;
+	if (S_ISDIR(inode->i_mode))
+		rsbac_target = T_DIR;
+	else if (S_ISFIFO(inode->i_mode))
+		rsbac_target = T_FIFO;
+	else if (S_ISLNK(inode->i_mode))
+		rsbac_target = T_SYMLINK;
+	else if (S_ISSOCK(inode->i_mode))
+		rsbac_target = T_UNIXSOCK;
+	rsbac_target_id.file.device = dentry->d_sb->s_dev;
+	rsbac_target_id.file.inode  = inode->i_ino;
+	rsbac_target_id.file.dentry_p = dentry;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_GET_PERMISSIONS_DATA,
+				current->pid,
+				rsbac_target,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		error = -EPERM;
+		return error;
+	}
+#endif
+
 	if (inode->i_op->getxattr)
 		error = inode->i_op->getxattr(dentry, name, value, size);
 	else
@@ -144,7 +210,36 @@ ssize_t
 vfs_listxattr(struct dentry *d, char *list, size_t size)
 {
 	ssize_t error;
-
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[sys_*listxattr()]: calling ADF\n");
+	rsbac_target = T_FILE;
+	if (S_ISDIR(d->d_inode->i_mode))
+		rsbac_target = T_DIR;
+	else if (S_ISFIFO(d->d_inode->i_mode))
+		rsbac_target = T_FIFO;
+	else if (S_ISLNK(d->d_inode->i_mode))
+		rsbac_target = T_SYMLINK;
+	else if (S_ISSOCK(d->d_inode->i_mode))
+		rsbac_target = T_UNIXSOCK;
+	rsbac_target_id.file.device = d->d_sb->s_dev;
+	rsbac_target_id.file.inode  = d->d_inode->i_ino;
+	rsbac_target_id.file.dentry_p = d;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_GET_PERMISSIONS_DATA,
+				current->pid,
+				rsbac_target,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))	{
+		return -EPERM;
+	}
+#endif
 	error = security_inode_listxattr(d);
 	if (error)
 		return error;
@@ -166,6 +261,12 @@ vfs_removexattr(struct dentry *dentry, c
 	struct inode *inode = dentry->d_inode;
 	int error;
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (!inode->i_op->removexattr)
 		return -EOPNOTSUPP;
 
@@ -177,6 +278,33 @@ vfs_removexattr(struct dentry *dentry, c
 	if (error)
 		return error;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[sys_*removexattr()]: calling ADF\n");
+	rsbac_target = T_FILE;
+	if (S_ISDIR(inode->i_mode))
+		rsbac_target = T_DIR;
+	else if (S_ISFIFO(inode->i_mode))
+		rsbac_target = T_FIFO;
+	else if (S_ISLNK(inode->i_mode))
+		rsbac_target = T_SYMLINK;
+	else if (S_ISSOCK(inode->i_mode))
+		rsbac_target = T_UNIXSOCK;
+	rsbac_target_id.file.device = dentry->d_sb->s_dev;
+	rsbac_target_id.file.inode  = inode->i_ino;
+	rsbac_target_id.file.dentry_p = dentry;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_PERMISSIONS_DATA,
+				current->pid,
+				rsbac_target,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		error = -EPERM;
+		return error;
+	}
+#endif
+
 	mutex_lock(&inode->i_mutex);
 	error = inode->i_op->removexattr(dentry, name);
 	mutex_unlock(&inode->i_mutex);
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/fs/xfs/linux-2.6/xfs_iops.c linux-2.6.23.14-rsbac-1.3.7/fs/xfs/linux-2.6/xfs_iops.c
--- trunk/fs/xfs/linux-2.6/xfs_iops.c	2008-02-13 16:25:18.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/fs/xfs/linux-2.6/xfs_iops.c	2008-02-13 13:24:37.000000000 +0100
@@ -52,6 +52,8 @@
 #include <linux/namei.h>
 #include <linux/security.h>
 
+#include <rsbac/hooks.h>
+
 /*
  * Get a XFS inode from a given vnode.
  */
@@ -443,6 +445,10 @@ xfs_vn_unlink(
 	int		error;
 
 	inode = dentry->d_inode;
+	#ifdef CONFIG_RSBAC_SECDEL
+	if (inode->i_nlink == 1)
+		rsbac_sec_del(dentry, FALSE);
+	#endif
 	dvp = vn_from_inode(dir);
 
 	error = bhv_vop_remove(dvp, dentry, NULL);
@@ -521,6 +527,29 @@ xfs_vn_rename(
 	fvp = vn_from_inode(odir);
 	tvp = vn_from_inode(ndir);
 
+	#ifdef CONFIG_RSBAC_SECDEL
+	/* RSBAC secure delete code. in the event of overwritting existing
+	 * file with sec_del flag set, its blocks will be deallocated so we
+	 * have to overwrite their content. since XFS does all the necesary
+	 * checks on the layer below linux VFS, operating on vnodes
+	 * i decided to implement my own set of checks here, so we can see
+	 * if the existing file is beeing overwritten.
+	 * inspired by ext2/3/4 and jfs code. michal@rsbac.org 
+	 */
+
+	bhv_vnode_t *cvp;
+	if (new_inode) {
+		if (new_inode->i_nlink == 1) {
+			error = bhv_vop_lookup(tvp, ndentry, &cvp, 0, NULL, NULL);
+			if (!error) {
+				VN_RELE(cvp);
+				if(!S_ISDIR(new_inode->i_mode))
+					rsbac_sec_del(ndentry, TRUE);
+			}
+		}
+	}
+	#endif
+	
 	error = bhv_vop_rename(fvp, odentry, tvp, ndentry, NULL);
 	if (likely(!error)) {
 		if (new_inode)
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/include/asm-alpha/unistd.h linux-2.6.23.14-rsbac-1.3.7/include/asm-alpha/unistd.h
--- trunk/include/asm-alpha/unistd.h	2008-02-13 16:23:07.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/include/asm-alpha/unistd.h	2008-02-13 13:20:14.000000000 +0100
@@ -331,7 +331,12 @@
 #define __NR_getdents64			377
 #define __NR_gettid			378
 #define __NR_readahead			379
+/* RSBAC - use old sys_security */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac			380
+#else
 /* 380 is unused */
+#endif
 #define __NR_tkill			381
 #define __NR_setxattr			382
 #define __NR_lsetxattr			383
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/include/asm-arm/unistd.h linux-2.6.23.14-rsbac-1.3.7/include/asm-arm/unistd.h
--- trunk/include/asm-arm/unistd.h	2008-02-13 16:21:39.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/include/asm-arm/unistd.h	2008-02-13 13:18:07.000000000 +0100
@@ -248,7 +248,13 @@
 #define __NR_madvise			(__NR_SYSCALL_BASE+220)
 #define __NR_fcntl64			(__NR_SYSCALL_BASE+221)
 					/* 222 for tux */
+/* RSBAC - we use 223, the old sys_security */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac			(__NR_SYSCALL_BASE+223)
+#else
 					/* 223 is unused */
+#endif
+
 #define __NR_gettid			(__NR_SYSCALL_BASE+224)
 #define __NR_readahead			(__NR_SYSCALL_BASE+225)
 #define __NR_setxattr			(__NR_SYSCALL_BASE+226)
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/include/asm-cris/unistd.h linux-2.6.23.14-rsbac-1.3.7/include/asm-cris/unistd.h
--- trunk/include/asm-cris/unistd.h	2008-02-13 16:20:40.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/include/asm-cris/unistd.h	2008-02-13 13:17:04.000000000 +0100
@@ -227,7 +227,12 @@
 #define __NR_madvise		219
 #define __NR_getdents64		220
 #define __NR_fcntl64		221
+/* RSBAC - we use 223, the old sys_security */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac		223
+#else
 /* 223 is unused */
+#endif
 #define __NR_gettid             224
 #define __NR_readahead          225
 #define __NR_setxattr		226
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/include/asm-i386/unistd.h linux-2.6.23.14-rsbac-1.3.7/include/asm-i386/unistd.h
--- trunk/include/asm-i386/unistd.h	2008-02-13 16:20:19.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/include/asm-i386/unistd.h	2008-02-13 13:16:36.000000000 +0100
@@ -331,6 +331,10 @@
 #define __NR_eventfd		323
 #define __NR_fallocate		324
 
+#ifdef CONFIG_RSBAC /* we use old sys_security */
+#define __NR_rsbac		223
+#endif
+
 #ifdef __KERNEL__
 
 #define NR_syscalls 325
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/include/asm-ia64/unistd.h linux-2.6.23.14-rsbac-1.3.7/include/asm-ia64/unistd.h
--- trunk/include/asm-ia64/unistd.h	2008-02-13 16:19:07.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/include/asm-ia64/unistd.h	2008-02-13 13:14:36.000000000 +0100
@@ -300,6 +300,11 @@
 #define __NR_timerfd			1308
 #define __NR_eventfd			1309
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac			1280
+#endif
+
 #ifdef __KERNEL__
 
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/include/asm-m68k/unistd.h linux-2.6.23.14-rsbac-1.3.7/include/asm-m68k/unistd.h
--- trunk/include/asm-m68k/unistd.h	2008-02-13 16:20:11.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/include/asm-m68k/unistd.h	2008-02-13 13:16:28.000000000 +0100
@@ -324,9 +324,17 @@
 #define __NR_eventfd		319
 #define __NR_fallocate		320
 
-#ifdef __KERNEL__
+/* RSBAC - we use 300 */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac		300
+#endif
 
+#ifdef __KERNEL__
+#ifdef CONFIG_RSBAC
+#define NR_syscalls		301
+#else
 #define NR_syscalls		321
+#endif
 
 #define __ARCH_WANT_IPC_PARSE_VERSION
 #define __ARCH_WANT_OLD_READDIR
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/include/asm-m68knommu/unistd.h linux-2.6.23.14-rsbac-1.3.7/include/asm-m68knommu/unistd.h
--- trunk/include/asm-m68knommu/unistd.h	2008-02-13 16:18:52.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/include/asm-m68knommu/unistd.h	2008-02-13 13:14:24.000000000 +0100
@@ -325,9 +325,17 @@
 #define __NR_eventfd		319
 #define __NR_fallocate		320
 
-#ifdef __KERNEL__
+/* RSBAC - we use 300 */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac		300
+#endif
 
+#ifdef __KERNEL__
+#ifdef CONFIG_RSBAC
+#define NR_syscalls		301
+#else
 #define NR_syscalls		321
+#endif
 
 #define __ARCH_WANT_IPC_PARSE_VERSION
 #define __ARCH_WANT_OLD_READDIR
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/include/asm-mips/unistd.h linux-2.6.23.14-rsbac-1.3.7/include/asm-mips/unistd.h
--- trunk/include/asm-mips/unistd.h	2008-02-13 16:19:27.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/include/asm-mips/unistd.h	2008-02-13 13:15:26.000000000 +0100
@@ -241,7 +241,12 @@
 #define __NR_madvise			(__NR_Linux + 218)
 #define __NR_getdents64			(__NR_Linux + 219)
 #define __NR_fcntl64			(__NR_Linux + 220)
+/* RSBAC - we use 221, the old sys_security */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac			(__NR_Linux + 221)
+#else
 #define __NR_reserved221		(__NR_Linux + 221)
+#endif
 #define __NR_gettid			(__NR_Linux + 222)
 #define __NR_readahead			(__NR_Linux + 223)
 #define __NR_setxattr			(__NR_Linux + 224)
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/include/asm-parisc/unistd.h linux-2.6.23.14-rsbac-1.3.7/include/asm-parisc/unistd.h
--- trunk/include/asm-parisc/unistd.h	2008-02-13 16:19:56.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/include/asm-parisc/unistd.h	2008-02-13 13:16:18.000000000 +0100
@@ -798,7 +798,12 @@
 #define __NR_timerfd		(__NR_Linux + 303)
 #define __NR_eventfd		(__NR_Linux + 304)
 
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac		(__NR_Linux + 305)
+#define __NR_Linux_syscalls     (__NR_rsbac + 1)
+#else
 #define __NR_Linux_syscalls	(__NR_eventfd + 1)
+#endif
 
 
 #define __IGNORE_select		/* newselect */
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/include/asm-powerpc/systbl.h linux-2.6.23.14-rsbac-1.3.7/include/asm-powerpc/systbl.h
--- trunk/include/asm-powerpc/systbl.h	2008-02-13 16:21:19.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/include/asm-powerpc/systbl.h	2008-02-13 13:17:42.000000000 +0100
@@ -227,7 +227,11 @@ SYSCALL_SPU(fremovexattr)
 COMPAT_SYS_SPU(futex)
 COMPAT_SYS_SPU(sched_setaffinity)
 COMPAT_SYS_SPU(sched_getaffinity)
+#ifdef CONFIG_RSBAC
+SYSCALL(rsbac)
+#else
 SYSCALL(ni_syscall)
+#endif
 SYSCALL(ni_syscall)
 SYS32ONLY(sendfile64)
 COMPAT_SYS_SPU(io_setup)
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/include/asm-powerpc/unistd.h linux-2.6.23.14-rsbac-1.3.7/include/asm-powerpc/unistd.h
--- trunk/include/asm-powerpc/unistd.h	2008-02-13 16:21:14.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/include/asm-powerpc/unistd.h	2008-02-13 13:17:38.000000000 +0100
@@ -238,6 +238,10 @@
 #define __NR_futex		221
 #define __NR_sched_setaffinity	222
 #define __NR_sched_getaffinity	223
+/* RSBAC - we use 224, the old sys_security */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac		224
+#endif
 /* 224 currently unused */
 #define __NR_tuxcall		225
 #ifndef __powerpc64__
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/include/asm-s390/unistd.h linux-2.6.23.14-rsbac-1.3.7/include/asm-s390/unistd.h
--- trunk/include/asm-s390/unistd.h	2008-02-13 16:23:22.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/include/asm-s390/unistd.h	2008-02-13 13:20:34.000000000 +0100
@@ -258,6 +258,13 @@
 #define __NR_eventfd		318
 #define NR_syscalls 319
 
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac		350
+#define NR_syscalls 351
+#else
+#define NR_syscalls 319
+#endif
+
 /* 
  * There are some system calls that are not present on 64 bit, some
  * have a different name although they do the same (e.g. __NR_chown32
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/include/asm-sh/unistd.h linux-2.6.23.14-rsbac-1.3.7/include/asm-sh/unistd.h
--- trunk/include/asm-sh/unistd.h	2008-02-13 16:21:00.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/include/asm-sh/unistd.h	2008-02-13 13:17:26.000000000 +0100
@@ -231,7 +231,12 @@
 #define __NR_madvise		219
 #define __NR_getdents64		220
 #define __NR_fcntl64		221
+/* RSBAC - we use 250 */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac		223
+#else
 /* 223 is unused */
+#endif
 #define __NR_gettid		224
 #define __NR_readahead		225
 #define __NR_setxattr		226
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/include/asm-sparc/unistd.h linux-2.6.23.14-rsbac-1.3.7/include/asm-sparc/unistd.h
--- trunk/include/asm-sparc/unistd.h	2008-02-13 16:19:14.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/include/asm-sparc/unistd.h	2008-02-13 13:14:47.000000000 +0100
@@ -179,7 +179,14 @@
 #define __NR_sched_get_affinity 161 /* Linux specific, getfh under SunOS           */
 #define __NR_getdomainname      162 /* SunOS Specific                              */
 #define __NR_setdomainname      163 /* Common                                      */
+
+/* RSBAC - we use 164, which seems to be unused */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac		164
+#else
 /* #define __NR_utrap_install   164    Linux sparc64 specific			   */
+#endif
+
 #define __NR_quotactl           165 /* Common                                      */
 #define __NR_set_tid_address    166 /* Linux specific, exportfs under SunOS        */
 #define __NR_mount              167 /* Common                                      */
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/include/asm-v850/unistd.h linux-2.6.23.14-rsbac-1.3.7/include/asm-v850/unistd.h
--- trunk/include/asm-v850/unistd.h	2008-02-13 16:20:45.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/include/asm-v850/unistd.h	2008-02-13 13:17:08.000000000 +0100
@@ -203,6 +203,9 @@
 #define __NR_pivot_root		200
 #define __NR_gettid		201
 #define __NR_tkill		202
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac		230
+#endif
 
 #ifdef __KERNEL__
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/include/asm-x86_64/ia32_unistd.h linux-2.6.23.14-rsbac-1.3.7/include/asm-x86_64/ia32_unistd.h
--- trunk/include/asm-x86_64/ia32_unistd.h	2008-02-13 16:20:29.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/include/asm-x86_64/ia32_unistd.h	2008-02-13 13:16:46.000000000 +0100
@@ -15,4 +15,8 @@
 #define __NR_ia32_sigreturn	119
 #define __NR_ia32_rt_sigreturn	173
 
+#ifdef CONFIG_RSBAC
+#define __NR_ia32_rsbac __NR_ia32_security
+#endif
+
 #endif /* _ASM_X86_64_IA32_UNISTD_H_ */
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/include/asm-x86_64/unistd.h linux-2.6.23.14-rsbac-1.3.7/include/asm-x86_64/unistd.h
--- trunk/include/asm-x86_64/unistd.h	2008-02-13 16:20:27.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/include/asm-x86_64/unistd.h	2008-02-13 13:16:44.000000000 +0100
@@ -428,7 +428,13 @@ __SYSCALL(__NR_afs_syscall, sys_ni_sysca
 __SYSCALL(__NR_tuxcall, sys_ni_syscall)
 
 #define __NR_security			185
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac			185 /* reserved for security */
+__SYSCALL(__NR_rsbac, sys_rsbac)
+#else
 __SYSCALL(__NR_security, sys_ni_syscall)
+#endif
 
 #define __NR_gettid		186
 __SYSCALL(__NR_gettid, sys_gettid)
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/include/linux/sched.h linux-2.6.23.14-rsbac-1.3.7/include/linux/sched.h
--- trunk/include/linux/sched.h	2008-02-13 16:22:42.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/include/linux/sched.h	2008-02-13 13:19:45.000000000 +0100
@@ -27,6 +27,9 @@
 #define CLONE_NEWUTS		0x04000000	/* New utsname group? */
 #define CLONE_NEWIPC		0x08000000	/* New ipcs */
 #define CLONE_NEWUSER		0x10000000	/* New user namespace */
+#ifdef CONFIG_RSBAC
+#define CLONE_KTHREAD 		0x20000000 	/* clone a kernel thread */
+#endif
 
 /*
  * Scheduling policies
@@ -89,6 +92,10 @@ struct sched_param {
 
 #include <asm/processor.h>
 
+#if defined(CONFIG_RSBAC_CAP_LOG_MISSING) || defined(CONFIG_RSBAC_JAIL_LOG_MISSING)
+#include <rsbac/log_cap.h>
+#endif
+
 struct exec_domain;
 struct futex_pi_state;
 struct bio;
@@ -97,7 +104,11 @@ struct bio;
  * List of flags we want to share for kernel threads,
  * if only because they are not used by them anyway.
  */
+#ifdef CONFIG_RSBAC
+#define CLONE_KERNEL	(CLONE_FS | CLONE_FILES | CLONE_SIGHAND | CLONE_KTHREAD)
+#else
 #define CLONE_KERNEL	(CLONE_FS | CLONE_FILES | CLONE_SIGHAND)
+#endif
 
 /*
  * These are the constant used to fake the fixed-point load-average
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/init/do_mounts.c linux-2.6.23.14-rsbac-1.3.7/init/do_mounts.c
--- trunk/init/do_mounts.c	2008-02-13 16:25:05.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/init/do_mounts.c	2008-02-13 13:24:17.000000000 +0100
@@ -18,6 +18,15 @@
 
 #include "do_mounts.h"
 
+/* RSBAC: including rsbac_init declaration */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#include <rsbac/debug.h>
+#ifdef CONFIG_BLK_DEV_INITRD
+#include <linux/initrd.h>
+#endif
+#endif
+
 extern int get_filesystem_list(char * buf);
 
 int __initdata rd_doload;	/* 1 = load RAM disk, 0 = don't load */
@@ -470,6 +479,14 @@ void __init prepare_namespace(void)
 out:
 	sys_mount(".", "/", NULL, MS_MOVE, NULL);
 	sys_chroot(".");
+
+        /* RSBAC: OK, most stuff initialized and root mounted: Init RSBAC. */
+#ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_INIT_DELAY
+        if(rsbac_no_delay_init)
+#endif
+        rsbac_init(ROOT_DEV);
+#endif
 	security_sb_post_mountroot();
 }
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/init/main.c linux-2.6.23.14-rsbac-1.3.7/init/main.c
--- trunk/init/main.c	2008-02-13 16:25:05.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/init/main.c	2008-02-13 13:24:17.000000000 +0100
@@ -62,6 +62,10 @@
 #include <asm/sections.h>
 #include <asm/cacheflush.h>
 
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 #ifdef CONFIG_X86_LOCAL_APIC
 #include <asm/smp.h>
 #endif
@@ -632,6 +636,9 @@ asmlinkage void __init start_kernel(void
 	unnamed_dev_init();
 	key_init();
 	security_init();
+#ifdef CONFIG_RSBAC
+	rsbac_kthreads_init();
+#endif
 	vfs_caches_init(num_physpages);
 	radix_tree_init();
 	signals_init();
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/ipc/msg.c linux-2.6.23.14-rsbac-1.3.7/ipc/msg.c
--- trunk/ipc/msg.c	2008-02-13 16:27:00.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/ipc/msg.c	2008-02-13 13:27:47.000000000 +0100
@@ -40,6 +40,7 @@
 #include <asm/current.h>
 #include <asm/uaccess.h>
 #include "util.h"
+#include <rsbac/hooks.h>
 
 /*
  * one msg_receiver structure for each sleeping receiver:
@@ -141,6 +142,12 @@ static int newque (struct ipc_namespace 
 	struct msg_queue *msq;
 	int id, retval;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	msq = ipc_rcu_alloc(sizeof(*msq));
 	if (!msq)
 		return -ENOMEM;
@@ -148,6 +155,23 @@ static int newque (struct ipc_namespace 
 	msq->q_perm.mode = msgflg & S_IRWXUGO;
 	msq->q_perm.key = key;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[sys_msgget()]: calling ADF\n");
+	rsbac_target_id.ipc.type = I_msg;
+	rsbac_target_id.ipc.id.id_nr = 0;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_CREATE,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		ipc_rcu_putref(msq);
+		return -EPERM;
+	}
+#endif
+
 	msq->q_perm.security = NULL;
 	retval = security_msg_queue_alloc(msq);
 	if (retval) {
@@ -171,6 +195,26 @@ static int newque (struct ipc_namespace 
 	INIT_LIST_HEAD(&msq->q_messages);
 	INIT_LIST_HEAD(&msq->q_receivers);
 	INIT_LIST_HEAD(&msq->q_senders);
+
+        /* RSBAC: notify ADF of new message queue */
+        #ifdef CONFIG_RSBAC
+        rsbac_target_id.ipc.type = I_msg;
+        rsbac_target_id.ipc.id.id_nr = id;
+        rsbac_new_target_id.dummy = 0;
+        if (rsbac_adf_set_attr(R_CREATE,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               T_NONE,
+                               rsbac_new_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            rsbac_printk(KERN_WARNING
+                   "newque() [sys_msgget()]: rsbac_adf_set_attr() returned error");
+          }
+        #endif
+
 	msg_unlock(msq);
 
 	return msq->q_id;
@@ -390,6 +434,13 @@ asmlinkage long sys_msgctl(int msqid, in
 	int err, version;
 	struct ipc_namespace *ns;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (msqid < 0 || cmd < 0)
 		return -EINVAL;
 
@@ -533,6 +584,58 @@ asmlinkage long sys_msgctl(int msqid, in
 		if (setbuf.qbytes > ns->msg_ctlmnb && !capable(CAP_SYS_RESOURCE))
 			goto out_unlock_up;
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                rsbac_target_id.ipc.type = I_msg;
+                rsbac_target_id.ipc.id.id_nr = msqid;
+                if (ipcp->uid != setbuf.uid)
+                  {
+                    rsbac_pr_debug(aef, "calling ADF\n");
+                    rsbac_attribute_value.owner = setbuf.uid;
+                    if (!rsbac_adf_request(R_CHANGE_OWNER,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           A_owner,
+                                           rsbac_attribute_value))
+                      {
+                        err = -EPERM;
+                        goto out_unlock_up;
+                      }
+                  }
+                if (ipcp->gid != setbuf.gid)
+                  {
+                    rsbac_pr_debug(aef, "calling ADF\n");
+                    rsbac_attribute_value.group = setbuf.gid;
+                    if (!rsbac_adf_request(R_CHANGE_GROUP,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           A_group,
+                                           rsbac_attribute_value))
+                      {
+                        err = -EPERM;
+                        goto out_unlock_up;
+                      }
+                  }
+                if (ipcp->mode != ((ipcp->mode & ~S_IRWXUGO) | 
+                                  (S_IRWXUGO & setbuf.mode)) )
+                  {
+                    rsbac_pr_debug(aef, "calling ADF\n");
+                    rsbac_attribute_value.mode = (S_IRWXUGO & setbuf.mode);
+                    if (!rsbac_adf_request(R_ALTER,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           A_mode,
+                                           rsbac_attribute_value))
+                      {
+                        err = -EPERM;
+                        goto out_unlock_up;
+                      }
+                  }
+                #endif
+
 		msq->q_qbytes = setbuf.qbytes;
 
 		ipcp->uid = setbuf.uid;
@@ -552,7 +655,42 @@ asmlinkage long sys_msgctl(int msqid, in
 		break;
 	}
 	case IPC_RMID:
+#ifdef CONFIG_RSBAC
+		rsbac_target_id.ipc.type = I_msg;
+		rsbac_target_id.ipc.id.id_nr = msqid;
+		rsbac_pr_debug(aef, "calling ADF\n");
+		rsbac_attribute_value.dummy = 0;
+		if (!rsbac_adf_request(R_DELETE,
+					current->pid,
+					T_IPC,
+					rsbac_target_id,
+					A_none,
+					rsbac_attribute_value))
+		{
+			err = -EPERM;
+			goto out_unlock_up;
+		}
+#endif
+
 		freeque(ns, msq, msqid);
+
+		/* RSBAC: notify ADF of deleted message queue */
+#ifdef CONFIG_RSBAC
+		rsbac_new_target_id.dummy = 0;
+		if (rsbac_adf_set_attr(R_DELETE,
+					current->pid,
+					T_IPC,
+					rsbac_target_id,
+					T_NONE,
+					rsbac_new_target_id,
+					A_none,
+					rsbac_attribute_value))
+		{
+			rsbac_printk(KERN_WARNING
+					"sys_msgctl(): rsbac_adf_set_attr() returned error");
+		}
+#endif
+
 		break;
 	}
 	err = 0;
@@ -632,6 +770,13 @@ long do_msgsnd(int msqid, long mtype, vo
 	int err;
 	struct ipc_namespace *ns;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	ns = current->nsproxy->ipc_ns;
 
 	if (msgsz > ns->msg_ctlmax || (long) msgsz < 0 || msqid < 0)
@@ -639,6 +784,22 @@ long do_msgsnd(int msqid, long mtype, vo
 	if (mtype < 1)
 		return -EINVAL;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.ipc.type   = I_msg;
+	rsbac_target_id.ipc.id.id_nr  = msqid;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_SEND,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
 	msg = load_msg(mtext, msgsz);
 	if (IS_ERR(msg))
 		return PTR_ERR(msg);
@@ -707,6 +868,22 @@ long do_msgsnd(int msqid, long mtype, vo
 		atomic_inc(&msg_hdrs);
 	}
 
+        #ifdef CONFIG_RSBAC
+        rsbac_new_target_id.dummy = 0;
+        if (rsbac_adf_set_attr(R_SEND,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               T_NONE,
+                               rsbac_new_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            rsbac_printk(KERN_WARNING
+                   "sys_msgsnd(): rsbac_adf_set_attr() returned error");
+          }
+        #endif
+
 	err = 0;
 	msg = NULL;
 
@@ -755,11 +932,35 @@ long do_msgrcv(int msqid, long *pmtype, 
 	int mode;
 	struct ipc_namespace *ns;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (msqid < 0 || (long) msgsz < 0)
 		return -EINVAL;
 	mode = convert_mode(&msgtyp, msgflg);
 	ns = current->nsproxy->ipc_ns;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.ipc.type   = I_msg;
+        rsbac_target_id.ipc.id.id_nr  = msqid;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_RECEIVE,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	msq = msg_lock(ns, msqid);
 	if (msq == NULL)
 		return -EINVAL;
@@ -807,6 +1008,23 @@ long do_msgrcv(int msqid, long *pmtype, 
 				msg = ERR_PTR(-E2BIG);
 				goto out_unlock;
 			}
+	                /* RSBAC: notify ADF of opened ipc */
+	                #ifdef CONFIG_RSBAC
+	                rsbac_new_target_id.dummy = 0;
+	                if (rsbac_adf_set_attr(R_RECEIVE,
+	                                       current->pid,
+	                                       T_IPC,
+	                                       rsbac_target_id,
+	                                       T_NONE,
+	                                       rsbac_new_target_id,
+	                                       A_none,
+	                                       rsbac_attribute_value))
+	                  {
+	                    rsbac_printk(KERN_WARNING
+	                           "sys_msgrcv(): rsbac_adf_set_attr() returned error");
+	                  }
+	                #endif
+
 			list_del(&msg->m_list);
 			msq->q_qnum--;
 			msq->q_rtime = get_seconds();
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/ipc/sem.c linux-2.6.23.14-rsbac-1.3.7/ipc/sem.c
--- trunk/ipc/sem.c	2008-02-13 16:27:00.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/ipc/sem.c	2008-02-13 13:27:47.000000000 +0100
@@ -85,6 +85,7 @@
 
 #include <asm/uaccess.h>
 #include "util.h"
+#include <rsbac/hooks.h>
 
 #define sem_ids(ns)	(*((ns)->ids[IPC_SEM_IDS]))
 
@@ -213,6 +214,13 @@ static int newary (struct ipc_namespace 
 	struct sem_array *sma;
 	int size;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_IPC_SEM
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!nsems)
 		return -EINVAL;
 	if (ns->used_sems + nsems > ns->sc_semmns)
@@ -228,6 +236,24 @@ static int newary (struct ipc_namespace 
 	sma->sem_perm.mode = (semflg & S_IRWXUGO);
 	sma->sem_perm.key = key;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_IPC_SEM
+        rsbac_pr_debug(aef, "[sys_semget()]: calling ADF\n");
+        rsbac_target_id.ipc.type = I_sem;
+        rsbac_target_id.ipc.id.id_nr = 0;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_CREATE,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            ipc_rcu_putref(sma);
+            return -EPERM;
+          }
+        #endif
+
 	sma->sem_perm.security = NULL;
 	retval = security_sem_alloc(sma);
 	if (retval) {
@@ -252,6 +278,21 @@ static int newary (struct ipc_namespace 
 	sma->sem_ctime = get_seconds();
 	sem_unlock(sma);
 
+/* RSBAC: notify ADF of new shm */
+#ifdef CONFIG_RSBAC_IPC_SEM
+	rsbac_target_id.ipc.id.id_nr = sma->sem_id;
+	rsbac_new_target_id.dummy = 0;
+	if (rsbac_adf_set_attr(R_CREATE,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				T_NONE,
+				rsbac_new_target_id,
+				A_none,
+				rsbac_attribute_value))
+		rsbac_printk(KERN_WARNING
+		"newary() [sys_semget()]: rsbac_adf_set_attr() returned error\n");
+#endif
 	return sma->sem_id;
 }
 
@@ -642,6 +683,13 @@ static int semctl_main(struct ipc_namesp
 	ushort* sem_io = fast_sem_io;
 	int nsems;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_IPC_SEM
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	sma = sem_lock(ns, semid);
 	if(sma==NULL)
 		return -EINVAL;
@@ -688,12 +736,51 @@ static int semctl_main(struct ipc_namesp
 			}
 		}
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC_IPC_SEM
+                rsbac_target_id.ipc.type = I_sem;
+                rsbac_target_id.ipc.id.id_nr = semid;
+                rsbac_pr_debug(aef, "[sys_semctl()]: calling ADF\n");
+                rsbac_attribute_value.dummy = 0;
+                if (!rsbac_adf_request(R_READ,
+                                       current->pid,
+                                       T_IPC,
+                                       rsbac_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    err = -EPERM;
+                    goto out_unlock;
+                  }
+                #endif
+
 		for (i = 0; i < sma->sem_nsems; i++)
 			sem_io[i] = sma->sem_base[i].semval;
 		sem_unlock(sma);
 		err = 0;
 		if(copy_to_user(array, sem_io, nsems*sizeof(ushort)))
 			err = -EFAULT;
+
+                /* RSBAC: notify ADF of read sem */
+                #ifdef CONFIG_RSBAC_IPC_SEM
+                if(!err)
+                  {
+                    rsbac_new_target_id.dummy = 0;
+                    if (rsbac_adf_set_attr(R_READ,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           T_NONE,
+                                           rsbac_new_target_id,
+                                           A_none,
+                                           rsbac_attribute_value))
+                      {
+                        rsbac_printk(KERN_WARNING
+                               "semctl_main() [sys_semctl()]: rsbac_adf_set_attr() returned error");
+                      }
+                  }
+                #endif
+
 		goto out_free;
 	}
 	case SETALL:
@@ -722,6 +809,26 @@ static int semctl_main(struct ipc_namesp
 			goto out_free;
 		}
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC_IPC_SEM
+                rsbac_target_id.ipc.type = I_sem;
+                rsbac_target_id.ipc.id.id_nr = semid;
+                rsbac_pr_debug(aef, "[sys_semctl()]: calling ADF\n");
+                rsbac_attribute_value.dummy = 0;
+                if (!rsbac_adf_request(R_WRITE,
+                                       current->pid,
+                                       T_IPC,
+                                       rsbac_target_id,
+                                       A_none,
+                                       rsbac_attribute_value)) {
+			err = -EPERM;
+			ipc_lock_by_ptr(&sma->sem_perm);
+			ipc_rcu_putref(sma);
+			sem_unlock(sma);
+			goto out_free;
+                  }
+                #endif
+
 		for (i = 0; i < nsems; i++) {
 			if (sem_io[i] > SEMVMX) {
 				ipc_lock_by_ptr(&sma->sem_perm);
@@ -745,6 +852,24 @@ static int semctl_main(struct ipc_namesp
 			for (i = 0; i < nsems; i++)
 				un->semadj[i] = 0;
 		sma->sem_ctime = get_seconds();
+
+                /* RSBAC: notify ADF of written sem */
+                #ifdef CONFIG_RSBAC_IPC_SEM
+                rsbac_new_target_id.dummy = 0;
+                if (rsbac_adf_set_attr(R_WRITE,
+                                       current->pid,
+                                       T_IPC,
+                                       rsbac_target_id,
+                                       T_NONE,
+                                       rsbac_new_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    rsbac_printk(KERN_WARNING
+                           "semctl_main() [sys_semctl()]: rsbac_adf_set_attr() returned error");
+                  }
+                #endif
+
 		/* maybe some queued-up processes were waiting for this */
 		update_queue(sma);
 		err = 0;
@@ -792,6 +917,24 @@ static int semctl_main(struct ipc_namesp
 		if (val > SEMVMX || val < 0)
 			goto out_unlock;
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC_IPC_SEM
+                rsbac_target_id.ipc.type = I_sem;
+                rsbac_target_id.ipc.id.id_nr = semid;
+                rsbac_pr_debug(aef, "[sys_semctl()]: calling ADF\n");
+                rsbac_attribute_value.dummy = 0;
+                if (!rsbac_adf_request(R_WRITE,
+                                       current->pid,
+                                       T_IPC,
+                                       rsbac_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    err = -EPERM;
+                    goto out_unlock;
+                  }
+                #endif
+
 		for (un = sma->undo; un; un = un->id_next)
 			un->semadj[semnum] = 0;
 		curr->semval = val;
@@ -859,6 +1002,13 @@ static int semctl_down(struct ipc_namesp
 	struct sem_setbuf uninitialized_var(setbuf);
 	struct kern_ipc_perm *ipcp;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_IPC_SEM
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if(cmd == IPC_SET) {
 		if(copy_semid_from_user (&setbuf, arg.buf, version))
 			return -EFAULT;
@@ -894,10 +1044,96 @@ static int semctl_down(struct ipc_namesp
 
 	switch(cmd){
 	case IPC_RMID:
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC_IPC_SEM
+                rsbac_target_id.ipc.type = I_sem;
+                rsbac_target_id.ipc.id.id_nr = semid;
+                rsbac_pr_debug(aef, "[sys_semctl()]: calling ADF\n");
+                rsbac_attribute_value.dummy = 0;
+                if (!rsbac_adf_request(R_DELETE,
+                                       current->pid,
+                                       T_IPC,
+                                       rsbac_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    err = -EPERM;
+                    goto out_unlock;
+                  }
+                #endif
+
 		freeary(ns, sma, semid);
+
+                /* RSBAC: notify ADF of deleted sem */
+                #ifdef CONFIG_RSBAC_IPC_SEM
+                rsbac_new_target_id.dummy = 0;
+                if (rsbac_adf_set_attr(R_DELETE,
+                                       current->pid,
+                                       T_IPC,
+                                       rsbac_target_id,
+                                       T_NONE,
+                                       rsbac_new_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    rsbac_printk(KERN_WARNING
+                           "semctl_down() [sys_semctl()]: rsbac_adf_set_attr() returned error");
+                  }
+                #endif
+
 		err = 0;
 		break;
 	case IPC_SET:
+#ifdef CONFIG_RSBAC_IPC_SEM
+		rsbac_target_id.ipc.type = I_sem;
+		rsbac_target_id.ipc.id.id_nr = semid;
+		if (ipcp->uid != setbuf.uid)
+		{
+			rsbac_pr_debug(aef, "calling ADF\n");
+			rsbac_attribute_value.owner = setbuf.uid;
+			if (!rsbac_adf_request(R_CHANGE_OWNER,
+						current->pid,
+						T_IPC,
+						rsbac_target_id,
+						A_owner,
+						rsbac_attribute_value))
+			{
+				err = -EPERM;
+				goto out_unlock;
+			}
+		}
+		if (ipcp->gid != setbuf.gid)
+		{
+			rsbac_pr_debug(aef, "calling ADF\n");
+			rsbac_attribute_value.group = setbuf.gid;
+			if (!rsbac_adf_request(R_CHANGE_GROUP,
+						current->pid,
+						T_IPC,
+						rsbac_target_id,
+						A_group,
+						rsbac_attribute_value))
+			{
+				err = -EPERM;
+				goto out_unlock;
+			}
+		}
+		if (ipcp->mode != ((ipcp->mode & ~S_IRWXUGO) | 
+					(S_IRWXUGO & setbuf.mode)) )
+		{
+			rsbac_pr_debug(aef, "calling ADF\n");
+			rsbac_attribute_value.mode = (S_IRWXUGO & setbuf.mode);
+			if (!rsbac_adf_request(R_ALTER,
+						current->pid,
+						T_IPC,
+						rsbac_target_id,
+						A_mode,
+						rsbac_attribute_value))
+			{
+				err = -EPERM;
+				goto out_unlock;
+			}
+		}
+#endif
 		ipcp->uid = setbuf.uid;
 		ipcp->gid = setbuf.gid;
 		ipcp->mode = (ipcp->mode & ~S_IRWXUGO)
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/ipc/shm.c linux-2.6.23.14-rsbac-1.3.7/ipc/shm.c
--- trunk/ipc/shm.c	2008-02-13 16:27:00.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/ipc/shm.c	2008-02-13 13:27:47.000000000 +0100
@@ -43,6 +43,8 @@
 
 #include "util.h"
 
+#include <rsbac/hooks.h>
+
 struct shm_file_data {
 	int id;
 	struct ipc_namespace *ns;
@@ -89,13 +91,35 @@ static void __shm_init_ns(struct ipc_nam
 
 static void do_shm_rmid(struct ipc_namespace *ns, struct shmid_kernel *shp)
 {
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
 	if (shp->shm_nattch){
 		shp->shm_perm.mode |= SHM_DEST;
 		/* Do not find it any more */
 		shp->shm_perm.key = IPC_PRIVATE;
 		shm_unlock(shp);
-	} else
+	} else {
 		shm_destroy(ns, shp);
+			/* RSBAC: notify ADF of deleted shm */
+#ifdef CONFIG_RSBAC
+			rsbac_new_target_id.dummy = 0;
+			if (rsbac_adf_set_attr(R_DELETE,
+						current->pid,
+						T_IPC,
+						rsbac_target_id,
+						T_NONE,
+						rsbac_new_target_id,
+						A_none,
+						rsbac_attribute_value))
+			{
+				rsbac_printk(KERN_WARNING
+						"sys_shmctl(): rsbac_adf_set_attr() returned error");
+			}
+#endif
+	}
 }
 
 int shm_init_ns(struct ipc_namespace *ns)
@@ -183,6 +207,11 @@ static void shm_open(struct vm_area_stru
  */
 static void shm_destroy(struct ipc_namespace *ns, struct shmid_kernel *shp)
 {
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        #endif
+
 	ns->shm_tot -= (shp->shm_segsz + PAGE_SIZE - 1) >> PAGE_SHIFT;
 	shm_rmid(ns, shp->id);
 	shm_unlock(shp);
@@ -193,6 +222,15 @@ static void shm_destroy(struct ipc_names
 						shp->mlock_user);
 	fput (shp->shm_file);
 	security_shm_free(shp);
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ACI remove_target()\n");
+        rsbac_target_id.ipc.type   = I_shm;
+        rsbac_target_id.ipc.id.id_nr  = shp->id;
+        rsbac_remove_target(T_IPC, rsbac_target_id);
+        #endif
+
 	ipc_rcu_putref(shp);
 }
 
@@ -209,6 +247,28 @@ static void shm_close(struct vm_area_str
 	struct shmid_kernel *shp;
 	struct ipc_namespace *ns = sfd->ns;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[sys_shmdt() et al.]: calling ADF\n");
+	rsbac_target_id.ipc.type   = I_shm;
+	rsbac_target_id.ipc.id.id_nr  = sfd->id;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_CLOSE,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		rsbac_printk(KERN_WARNING
+				"shm_close() [sys_shmdt() et al.]: rsbac_adf_request() for CLOSE returned NOT_GRANTED\n");
+	}
+#endif
+
 	mutex_lock(&shm_ids(ns).mutex);
 	/* remove from the list of attaches of the shm segment */
 	shp = shm_lock(ns, sfd->id);
@@ -345,6 +405,13 @@ static int newseg (struct ipc_namespace 
 	char name[13];
 	int id;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (size < SHMMIN || size > ns->shm_ctlmax)
 		return -EINVAL;
 
@@ -355,6 +422,24 @@ static int newseg (struct ipc_namespace 
 	if (!shp)
 		return -ENOMEM;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "[sys_shmget()]: calling ADF\n");
+        rsbac_target_id.ipc.type = I_shm;
+        rsbac_target_id.ipc.id.id_nr = 0;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_CREATE,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            ipc_rcu_putref(shp);
+            return -EPERM;
+          }
+        #endif
+
 	shp->shm_perm.key = key;
 	shp->shm_perm.mode = (shmflg & S_IRWXUGO);
 	shp->mlock_user = NULL;
@@ -407,6 +492,24 @@ static int newseg (struct ipc_namespace 
 
 	ns->shm_tot += numpages;
 	shm_unlock(shp);
+        #ifdef CONFIG_RSBAC
+        rsbac_target_id.ipc.id.id_nr = shp->id;
+        rsbac_new_target_id.ipc.type = I_shm;
+        rsbac_new_target_id.ipc.id.id_nr = shp->id;
+        if (rsbac_adf_set_attr(R_CREATE,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               T_IPC,
+                               rsbac_new_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            rsbac_printk(KERN_WARNING
+                   "newseg() [sys_shmget()]: rsbac_adf_set_attr() returned error");
+          }
+        #endif
+
 	return shp->id;
 
 no_id:
@@ -584,6 +687,12 @@ asmlinkage long sys_shmctl (int shmid, i
 	int err, version;
 	struct ipc_namespace *ns;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (cmd < 0 || shmid < 0) {
 		err = -EINVAL;
 		goto out;
@@ -765,6 +874,23 @@ asmlinkage long sys_shmctl (int shmid, i
 		if (err)
 			goto out_unlock_up;
 
+#ifdef CONFIG_RSBAC
+		rsbac_target_id.ipc.type = I_shm;
+		rsbac_target_id.ipc.id.id_nr = shmid;
+		rsbac_pr_debug(aef, "calling ADF\n");
+		rsbac_attribute_value.dummy = 0;
+		if (!rsbac_adf_request(R_DELETE,
+					current->pid,
+					T_IPC,
+					rsbac_target_id,
+					A_none,
+					rsbac_attribute_value))
+		{
+			err = -EPERM;
+			goto out_unlock_up;
+		}
+#endif
+
 		do_shm_rmid(ns, shp);
 		mutex_unlock(&shm_ids(ns).mutex);
 		goto out;
@@ -801,6 +927,58 @@ asmlinkage long sys_shmctl (int shmid, i
 		if (err)
 			goto out_unlock_up;
 		
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                rsbac_target_id.ipc.type = I_shm;
+                rsbac_target_id.ipc.id.id_nr = shmid;
+                if (shp->shm_perm.uid != setbuf.uid)
+                  {
+                    rsbac_pr_debug(aef, "calling ADF\n");
+                    rsbac_attribute_value.owner = setbuf.uid;
+                    if (!rsbac_adf_request(R_CHANGE_OWNER,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           A_owner,
+                                           rsbac_attribute_value))
+                      {
+                        err = -EPERM;
+                        goto out_unlock_up;
+                      }
+                  }
+                if (shp->shm_perm.gid != setbuf.gid)
+                  {
+                    rsbac_pr_debug(aef, "calling ADF\n");
+                    rsbac_attribute_value.group = setbuf.gid;
+                    if (!rsbac_adf_request(R_CHANGE_GROUP,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           A_group,
+                                           rsbac_attribute_value))
+                      {
+                        err = -EPERM;
+                        goto out_unlock_up;
+                      }
+                  }
+                if (shp->shm_perm.mode != ((shp->shm_perm.mode & ~S_IRWXUGO) | 
+                                           (S_IRWXUGO & setbuf.mode)) )
+                  {
+                    rsbac_pr_debug(aef, "calling ADF\n");
+                    rsbac_attribute_value.mode = (S_IRWXUGO & setbuf.mode);
+                    if (!rsbac_adf_request(R_ALTER,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           A_mode,
+                                           rsbac_attribute_value))
+                      {
+                        err = -EPERM;
+                        goto out_unlock_up;
+                      }
+                  }
+                #endif
+
 		shp->shm_perm.uid = setbuf.uid;
 		shp->shm_perm.gid = setbuf.gid;
 		shp->shm_perm.mode = (shp->shm_perm.mode & ~S_IRWXUGO)
@@ -849,6 +1027,13 @@ long do_shmat(int shmid, char __user *sh
 	struct path path;
 	mode_t f_mode;
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_adf_request_t     rsbac_request = R_NONE;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	err = -EINVAL;
 	if (shmid < 0)
 		goto out;
@@ -905,6 +1090,27 @@ long do_shmat(int shmid, char __user *sh
 	if (err)
 		goto out_unlock;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef,  "calling ADF\n");
+	if ((shmflg & SHM_RDONLY))
+		rsbac_request = R_READ_OPEN;
+	else
+		rsbac_request = R_READ_WRITE_OPEN;
+	rsbac_target_id.ipc.type   = I_shm;
+	rsbac_target_id.ipc.id.id_nr  = shp->id;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(rsbac_request,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		err = -EPERM;
+		goto out_unlock;
+	}
+#endif
+
 	path.dentry = dget(shp->shm_file->f_path.dentry);
 	path.mnt    = mntget(shp->shm_file->f_path.mnt);
 	shp->shm_nattch++;
@@ -968,6 +1174,25 @@ out_nattch:
 	mutex_unlock(&shm_ids(ns).mutex);
 
 out:
+/* RSBAC: notify ADF of attached shm */
+#ifdef CONFIG_RSBAC
+	if(!err) {
+		rsbac_new_target_id.dummy = 0;
+		if (rsbac_adf_set_attr(rsbac_request,
+					current->pid,
+					T_IPC,
+					rsbac_target_id,
+					T_NONE,
+					rsbac_new_target_id,
+					A_none,
+					rsbac_attribute_value))
+		{
+			rsbac_printk(KERN_WARNING
+					"sys_shmat(): rsbac_adf_set_attr() returned error");
+		}
+	}
+#endif
+
 	return err;
 
 out_unlock:
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/kernel/capability.c linux-2.6.23.14-rsbac-1.3.7/kernel/capability.c
--- trunk/kernel/capability.c	2008-02-13 16:18:42.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/kernel/capability.c	2008-02-13 13:14:11.000000000 +0100
@@ -14,6 +14,8 @@
 #include <linux/syscalls.h>
 #include <asm/uaccess.h>
 
+#include <rsbac/hooks.h>
+
 unsigned securebits = SECUREBITS_DEFAULT; /* systemwide security settings */
 kernel_cap_t cap_bset = CAP_INIT_EFF_SET;
 
@@ -24,7 +26,13 @@ EXPORT_SYMBOL(cap_bset);
  * This lock protects task->cap_* for all tasks including current.
  * Locking rule: acquire this prior to tasklist_lock.
  */
+
+/* RSBAC: Setting caps from outside, need the lock */
+#if defined(CONFIG_RSBAC_CAP) || defined(CONFIG_RSBAC_JAIL)
+DEFINE_SPINLOCK(task_capability_lock);
+#else
 static DEFINE_SPINLOCK(task_capability_lock);
+#endif
 
 /*
  * For sys_getproccap() and sys_setproccap(), any of the three
@@ -49,6 +57,12 @@ asmlinkage long sys_capget(cap_user_head
      struct task_struct *target;
      struct __user_cap_data_struct data;
 
+     /* RSBAC */
+     #ifdef CONFIG_RSBAC
+     union rsbac_target_id_t       rsbac_target_id;
+     union rsbac_attribute_value_t rsbac_attribute_value;
+     #endif
+
      if (get_user(version, &header->version))
 	     return -EFAULT;
 
@@ -82,6 +96,25 @@ out:
      read_unlock(&tasklist_lock); 
      spin_unlock(&task_capability_lock);
 
+     /* RSBAC */
+     #ifdef CONFIG_RSBAC
+     if(!ret)
+       {
+         rsbac_pr_debug(aef, "calling ADF\n");
+         rsbac_target_id.process = pid;
+	 rsbac_attribute_value.dummy = 0;
+         if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+           {
+             ret = -EPERM;
+           }
+       }
+     #endif
+
      if (!ret && copy_to_user(dataptr, &data, sizeof data))
           return -EFAULT; 
 
@@ -178,6 +211,13 @@ asmlinkage long sys_capset(cap_user_head
      int ret;
      pid_t pid;
 
+     /* RSBAC */
+     #ifdef CONFIG_RSBAC
+     kernel_cap_t cinheritable, cpermitted, ceffective;
+     union rsbac_target_id_t       rsbac_target_id;
+     union rsbac_attribute_value_t rsbac_attribute_value;
+     #endif
+
      if (get_user(version, &header->version))
 	     return -EFAULT; 
 
@@ -198,6 +238,32 @@ asmlinkage long sys_capset(cap_user_head
 	 copy_from_user(&permitted, &data->permitted, sizeof(permitted)))
 	     return -EFAULT; 
 
+     /* RSBAC */
+     #ifdef CONFIG_RSBAC
+     spin_lock(&task_capability_lock);
+     cinheritable = current->cap_effective;
+     cpermitted = current->cap_inheritable;
+     ceffective = current->cap_permitted;
+     spin_unlock(&task_capability_lock);
+
+     if (!cap_issubset(effective, ceffective) 
+	     || !cap_issubset(permitted, cpermitted) 
+	     || !cap_issubset(inheritable, cinheritable)) {
+     rsbac_pr_debug(aef, "calling ADF\n");
+     rsbac_target_id.scd = ST_capability;
+     rsbac_attribute_value.dummy = 0;
+     if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                           current->pid,
+                           T_SCD,
+                           rsbac_target_id,
+                           A_none,
+                           rsbac_attribute_value))
+       {
+         return -EPERM;
+       }
+     }
+     #endif
+
      spin_lock(&task_capability_lock);
      read_lock(&tasklist_lock);
 
@@ -242,6 +308,10 @@ int __capable(struct task_struct *t, int
 		t->flags |= PF_SUPERPRIV;
 		return 1;
 	}
+#if defined(CONFIG_RSBAC_CAP_LOG_MISSING) || defined(CONFIG_RSBAC_JAIL_LOG_MISSING)
+	else
+		rsbac_log_missing_cap(cap);
+#endif
 	return 0;
 }
 EXPORT_SYMBOL(__capable);
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/kernel/exit.c linux-2.6.23.14-rsbac-1.3.7/kernel/exit.c
--- trunk/kernel/exit.c	2008-02-13 16:18:41.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/kernel/exit.c	2008-02-13 13:14:09.000000000 +0100
@@ -51,6 +51,8 @@
 #include <asm/pgtable.h>
 #include <asm/mmu_context.h>
 
+#include <rsbac/hooks.h>
+
 extern void sem_exit (void);
 
 static void exit_mm(struct task_struct * tsk);
@@ -887,6 +889,12 @@ fastcall NORET_TYPE void do_exit(long co
 	struct task_struct *tsk = current;
 	int group_dead;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	profile_task_exit(tsk);
 
 	WARN_ON(atomic_read(&tsk->fs_excl));
@@ -991,6 +999,26 @@ fastcall NORET_TYPE void do_exit(long co
 	proc_exit_connector(tsk);
 	exit_task_namespaces(tsk);
 	exit_notify(tsk);
+
+#ifdef CONFIG_RSBAC
+	if (tsk->pid)
+	{
+		rsbac_pr_debug(aef, "[sys_exit()]: calling ADF\n");
+		rsbac_target_id.process = tsk->pid;
+		rsbac_attribute_value.dummy = 0;
+		if (!rsbac_adf_request(R_TERMINATE,
+					current->pid,
+					T_PROCESS,
+					rsbac_target_id,
+					A_none,
+					rsbac_attribute_value))
+		{
+			rsbac_printk(KERN_WARNING
+					"do_exit() [sys_exit()]: ADF request for TERMINATE returned NOT_GRANTED!\n");
+		}
+	}
+#endif
+
 #ifdef CONFIG_NUMA
 	mpol_free(tsk->mempolicy);
 	tsk->mempolicy = NULL;
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/kernel/fork.c linux-2.6.23.14-rsbac-1.3.7/kernel/fork.c
--- trunk/kernel/fork.c	2008-02-13 16:18:45.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/kernel/fork.c	2008-02-13 13:14:13.000000000 +0100
@@ -58,6 +58,8 @@
 #include <asm/cacheflush.h>
 #include <asm/tlbflush.h>
 
+#include <rsbac/hooks.h>
+
 /*
  * Protected counters by write_lock_irq(&tasklist_lock)
  */
@@ -1374,8 +1376,36 @@ long do_fork(unsigned long clone_flags,
 	struct pid *pid = alloc_pid();
 	long nr;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	enum  rsbac_attribute_t       rsbac_attribute;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (!pid)
 		return -EAGAIN;
+	
+#ifdef CONFIG_RSBAC
+	rsbac_attribute = A_none;
+	rsbac_attribute_value.dummy = 0;
+	if(current->pid)
+	{
+		rsbac_pr_debug(aef, "[sys_fork(),sys_clone(),sys_vfork]: calling ADF\n");
+		rsbac_target_id.process = current->pid;
+		if (!rsbac_adf_request(R_CLONE,
+					current->pid,
+					T_PROCESS,
+					rsbac_target_id,
+					rsbac_attribute,
+					rsbac_attribute_value))
+		{
+			free_pid(pid);
+			return -EPERM;
+		}
+	}
+#endif
+
 	nr = pid->nr;
 	if (unlikely(current->ptrace)) {
 		trace = fork_traceflag (clone_flags);
@@ -1404,6 +1434,34 @@ long do_fork(unsigned long clone_flags,
 			set_tsk_thread_flag(p, TIF_SIGPENDING);
 		}
 
+                /* RSBAC: notify ADF of forked process */
+                #ifdef CONFIG_RSBAC
+		if (clone_flags & CLONE_KTHREAD) {
+			rsbac_attribute = A_kernel_thread;
+			rsbac_attribute_value.kernel_thread = 1;
+			rsbac_mark_kthread(p->pid);
+			rsbac_kthread_notify(p->pid);
+		}
+
+                if(current->pid)
+                  {
+                    rsbac_pr_debug(aef, "[sys_fork(),sys_clone(),sys_vfork()]: calling ADF_set_attr\n");
+                    rsbac_new_target_id.process = p->pid;
+                    if (rsbac_adf_set_attr(R_CLONE,
+                                           current->pid,
+                                           T_PROCESS,
+                                           rsbac_target_id,
+                                           T_PROCESS,
+                                           rsbac_new_target_id,
+                                           rsbac_attribute,
+                                           rsbac_attribute_value))
+                      {
+                        rsbac_printk(KERN_WARNING
+                               "do_fork() [sys_fork(), sys_clone()]: rsbac_adf_set_attr() returned error!\n");
+                      }
+                  }
+                #endif
+
 		if (!(clone_flags & CLONE_STOPPED))
 			wake_up_new_task(p, clone_flags);
 		else
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/kernel/kallsyms.c linux-2.6.23.14-rsbac-1.3.7/kernel/kallsyms.c
--- trunk/kernel/kallsyms.c	2008-02-13 16:18:43.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/kernel/kallsyms.c	2008-02-13 13:14:11.000000000 +0100
@@ -24,6 +24,8 @@
 
 #include <asm/sections.h>
 
+#include <rsbac/hooks.h>
+
 #ifdef CONFIG_KALLSYMS_ALL
 #define all_var 1
 #else
@@ -457,6 +459,28 @@ static int kallsyms_open(struct inode *i
 	struct kallsym_iter *iter;
 	int ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_target_id.scd = ST_ksyms;
+        rsbac_attribute_value.dummy = 0;
+        rsbac_pr_debug(aef, "calling ADF\n");
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_SCD,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	iter = kmalloc(sizeof(*iter), GFP_KERNEL);
 	if (!iter)
 		return -ENOMEM;
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/kernel/kexec.c linux-2.6.23.14-rsbac-1.3.7/kernel/kexec.c
--- trunk/kernel/kexec.c	2008-02-13 16:18:46.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/kernel/kexec.c	2008-02-13 13:14:16.000000000 +0100
@@ -29,6 +29,8 @@
 #include <asm/system.h>
 #include <asm/semaphore.h>
 
+#include <rsbac/hooks.h>
+
 /* Per cpu memory for storing cpu states in case of system crash. */
 note_buf_t* crash_notes;
 
@@ -921,10 +923,30 @@ asmlinkage long sys_kexec_load(unsigned 
 	int locked;
 	int result;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t		rsbac_target_id;
+	union rsbac_attribute_value_t	rsbac_attribute_value;
+#endif
+
 	/* We only trust the superuser with rebooting the system. */
 	if (!capable(CAP_SYS_BOOT))
 		return -EPERM;
 
+#ifdef CONFIG_RSBAC
+	rsbac_target_id.scd = ST_kexec;
+	rsbac_attribute_value.dummy = 0;
+	rsbac_pr_debug(aef, "calling ADF\n");
+	if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+	
 	/*
 	 * Verify we have a legal set of flags
 	 * This leaves us room for future extensions.
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/kernel/kmod.c linux-2.6.23.14-rsbac-1.3.7/kernel/kmod.c
--- trunk/kernel/kmod.c	2008-02-13 16:18:47.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/kernel/kmod.c	2008-02-13 13:14:16.000000000 +0100
@@ -37,6 +37,10 @@
 #include <linux/suspend.h>
 #include <asm/uaccess.h>
 
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 extern int max_threads;
 
 static struct workqueue_struct *khelper_wq;
@@ -202,6 +206,11 @@ static int wait_for_helper(void *data)
 	allow_signal(SIGCHLD);
 
 	pid = kernel_thread(____call_usermodehelper, sub_info, SIGCHLD);
+	
+#ifdef CONFIG_RSBAC
+	rsbac_kthread_notify(pid);
+#endif
+
 	if (pid < 0) {
 		sub_info->retval = pid;
 	} else {
@@ -247,10 +256,19 @@ static void __call_usermodehelper(struct
 	 * until that is done.  */
 	if (wait == UMH_WAIT_PROC || wait == UMH_NO_WAIT)
 		pid = kernel_thread(wait_for_helper, sub_info,
+#ifdef CONFIG_RSBAC
+				    CLONE_FS | CLONE_FILES | CLONE_KTHREAD | SIGCHLD);
+#else
 				    CLONE_FS | CLONE_FILES | SIGCHLD);
+#endif
 	else
 		pid = kernel_thread(____call_usermodehelper, sub_info,
+#ifdef CONFIG_RSBAC
+				    CLONE_VFORK | CLONE_KTHREAD | SIGCHLD);
+	rsbac_kthread_notify(pid);
+#else
 				    CLONE_VFORK | SIGCHLD);
+#endif
 
 	switch (wait) {
 	case UMH_NO_WAIT:
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/kernel/kthread.c linux-2.6.23.14-rsbac-1.3.7/kernel/kthread.c
--- trunk/kernel/kthread.c	2008-02-13 16:18:46.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/kernel/kthread.c	2008-02-13 13:14:15.000000000 +0100
@@ -15,6 +15,10 @@
 #include <linux/mutex.h>
 #include <asm/semaphore.h>
 
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 static DEFINE_SPINLOCK(kthread_create_lock);
 static LIST_HEAD(kthread_create_list);
 struct task_struct *kthreadd_task;
@@ -91,9 +95,14 @@ static void create_kthread(struct kthrea
 
 	/* We want our own signal handler (we take no signals by default). */
 	pid = kernel_thread(kthread, create, CLONE_FS | CLONE_FILES | SIGCHLD);
+
 	if (pid < 0) {
 		create->result = ERR_PTR(pid);
 	} else {
+#ifdef CONFIG_RSBAC
+		rsbac_kthread_notify(pid);
+#endif
+
 		wait_for_completion(&create->started);
 		read_lock(&tasklist_lock);
 		create->result = find_task_by_pid(pid);
@@ -147,6 +156,10 @@ struct task_struct *kthread_create(int (
 			  namefmt, args);
 		va_end(args);
 	}
+#ifdef CONFIG_RSBAC
+	rsbac_kthread_notify(create.result->pid);
+#endif
+
 	return create.result;
 }
 EXPORT_SYMBOL(kthread_create);
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/kernel/module.c linux-2.6.23.14-rsbac-1.3.7/kernel/module.c
--- trunk/kernel/module.c	2008-02-13 16:18:44.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/kernel/module.c	2008-02-13 13:14:13.000000000 +0100
@@ -46,6 +46,8 @@
 #include <asm/cacheflush.h>
 #include <linux/license.h>
 
+#include <rsbac/hooks.h>
+
 extern int module_sysfs_initialized;
 
 #if 0
@@ -660,6 +662,12 @@ sys_delete_module(const char __user *nam
 	char name[MODULE_NAME_LEN];
 	int ret, forced = 0;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
 
@@ -667,6 +675,21 @@ sys_delete_module(const char __user *nam
 		return -EFAULT;
 	name[MODULE_NAME_LEN-1] = '\0';
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.dummy = 0;
+	rsbac_attribute_value.mod_name = name;
+	if (!rsbac_adf_request(R_REMOVE_FROM_KERNEL,
+				current->pid,
+				T_NONE,
+				rsbac_target_id,
+				A_mod_name,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
 	if (mutex_lock_interruptible(&module_mutex) != 0)
 		return -EINTR;
 
@@ -1978,10 +2001,32 @@ sys_init_module(void __user *umod,
 	struct module *mod;
 	int ret = 0;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	/* Must have permission */
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.dummy = 0;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_ADD_TO_KERNEL,
+                               current->pid,
+                               T_NONE,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	/* Only one module load at a time, please */
 	if (mutex_lock_interruptible(&module_mutex) != 0)
 		return -EINTR;
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/kernel/printk.c linux-2.6.23.14-rsbac-1.3.7/kernel/printk.c
--- trunk/kernel/printk.c	2008-02-13 16:18:45.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/kernel/printk.c	2008-02-13 13:14:14.000000000 +0100
@@ -34,6 +34,8 @@
 
 #include <asm/uaccess.h>
 
+#include <rsbac/hooks.h>
+
 #define __LOG_BUF_LEN	(1 << CONFIG_LOG_BUF_SHIFT)
 
 /* printk's without a loglevel use this.. */
@@ -184,10 +186,58 @@ int do_syslog(int type, char __user *buf
 	char c;
 	int error = 0;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_SYSLOG
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = security_syslog(type);
 	if (error)
 		return error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_SYSLOG
+        rsbac_pr_debug(aef, "[sys_syslog()]: calling ADF\n");
+        rsbac_target_id.scd = ST_syslog;
+        rsbac_attribute_value.dummy = 0;
+        switch(type)
+          {
+            case 2:
+            case 3:
+              if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                                    current->pid,
+                                    T_SCD,
+                                    rsbac_target_id,
+                                    A_none,
+                                    rsbac_attribute_value))
+                {
+                  error = -EPERM;
+                  goto out;
+                }
+              break;
+            case 4:
+            case 5:
+            case 6:
+            case 7:
+            case 8:
+              if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                                    current->pid,
+                                    T_SCD,
+                                    rsbac_target_id,
+                                    A_none,
+                                    rsbac_attribute_value))
+                {
+                  error = -EPERM;
+                  goto out;
+                }
+              break;
+
+            default:
+              break;
+          }
+        #endif
+
 	switch (type) {
 	case 0:		/* Close log */
 		break;
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/kernel/ptrace.c linux-2.6.23.14-rsbac-1.3.7/kernel/ptrace.c
--- trunk/kernel/ptrace.c	2008-02-13 16:18:47.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/kernel/ptrace.c	2008-02-13 13:14:16.000000000 +0100
@@ -23,6 +23,8 @@
 #include <asm/pgtable.h>
 #include <asm/uaccess.h>
 
+#include <rsbac/hooks.h>
+
 /*
  * ptrace a task: make the debugger its new parent and
  * move it to the ptrace list.
@@ -403,12 +405,31 @@ int ptrace_traceme(void)
 {
 	int ret = -EPERM;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	/*
 	 * Are we already being traced?
 	 */
 	task_lock(current);
 	if (!(current->ptrace & PT_PTRACED)) {
 		ret = security_ptrace(current->parent, current);
+#ifdef CONFIG_RSBAC
+		rsbac_pr_debug(aef, "[sys_ptrace] calling ADF\n");
+		rsbac_target_id.process = current->pid;
+		rsbac_attribute_value.trace_request = PTRACE_TRACEME;
+		if (!rsbac_adf_request(R_TRACE,
+					current->pid,
+					T_PROCESS,
+					rsbac_target_id,
+					A_trace_request,
+					rsbac_attribute_value))
+		{
+			ret = -EPERM;
+		}
+#endif
 		/*
 		 * Set the ptrace bit in the process ptrace flags.
 		 */
@@ -456,6 +477,11 @@ asmlinkage long sys_ptrace(long request,
 	struct task_struct *child;
 	long ret;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	/*
 	 * This lock_kernel fixes a subtle race with suid exec
 	 */
@@ -465,6 +491,24 @@ asmlinkage long sys_ptrace(long request,
 		goto out;
 	}
 
+#ifdef CONFIG_RSBAC
+	if (request != PTRACE_DETACH) {
+		rsbac_pr_debug(aef, "[sys_ptrace] calling ADF\n");
+		rsbac_target_id.process = pid;
+		rsbac_attribute_value.trace_request = request;
+		if (!rsbac_adf_request(R_TRACE,
+					current->pid,
+					T_PROCESS,
+					rsbac_target_id,
+					A_trace_request,
+					rsbac_attribute_value))
+		{
+			ret = -EPERM;
+			goto out;
+		}
+	}
+#endif
+
 	child = ptrace_get_task_struct(pid);
 	if (IS_ERR(child)) {
 		ret = PTR_ERR(child);
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/kernel/sched.c linux-2.6.23.14-rsbac-1.3.7/kernel/sched.c
--- trunk/kernel/sched.c	2008-02-13 16:18:46.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/kernel/sched.c	2008-02-13 13:14:15.000000000 +0100
@@ -64,6 +64,8 @@
 
 #include <asm/tlb.h>
 
+#include <rsbac/hooks.h>
+
 /*
  * Scheduler clock - returns current time in nanosec units.
  * This is default implementation.
@@ -1448,7 +1450,6 @@ static int try_to_wake_up(struct task_st
 #ifdef CONFIG_SMP
 	if (unlikely(task_running(rq, p)))
 		goto out_activate;
-
 	new_cpu = cpu;
 
 	schedstat_inc(rq, ttwu_cnt);
@@ -1464,7 +1465,6 @@ static int try_to_wake_up(struct task_st
 			break;
 		}
 	}
-
 	if (unlikely(!cpu_isset(this_cpu, p->cpus_allowed)))
 		goto out_set_cpu;
 
@@ -4062,6 +4062,10 @@ int can_nice(const struct task_struct *p
 asmlinkage long sys_nice(int increment)
 {
 	long nice, retval;
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
 
 	/*
 	 * Setpriority might change our priority at the same moment.
@@ -4082,6 +4086,23 @@ asmlinkage long sys_nice(int increment)
 	if (increment < 0 && !can_nice(current, nice))
 		return -EPERM;
 
+#ifdef CONFIG_RSBAC
+	if (increment < 0) {
+		rsbac_pr_debug(aef, "calling ADF\n");
+		rsbac_target_id.scd = ST_priority;
+		rsbac_attribute_value.priority = nice;
+		if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+					current->pid,
+					T_SCD,
+					rsbac_target_id,
+					A_none,
+					rsbac_attribute_value))
+		{
+			return -EPERM;
+		}
+	}
+#endif
+
 	retval = security_task_setnice(current, nice);
 	if (retval)
 		return retval;
@@ -4242,6 +4263,7 @@ recheck:
 	retval = security_task_setscheduler(p, policy, param);
 	if (retval)
 		return retval;
+
 	/*
 	 * make sure no PI-waiters arrive (or leave) while we are
 	 * changing the priority of the task:
@@ -4295,11 +4317,43 @@ do_sched_setscheduler(pid_t pid, int pol
 	struct task_struct *p;
 	int retval;
 
+	/* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!param || pid < 0)
 		return -EINVAL;
 	if (copy_from_user(&lparam, param, sizeof(struct sched_param)))
 		return -EFAULT;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "[sys_sched_setscheduler, sys_sched_setparam]: calling ADF\n");
+        if(!pid || (pid == current->pid))
+          {
+            rsbac_target = T_SCD;
+            rsbac_target_id.scd = ST_priority;
+          }
+        else
+          {
+            rsbac_target = T_PROCESS;
+            rsbac_target_id.process = pid;
+          }
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	rcu_read_lock();
 	retval = -ESRCH;
 	p = find_process_by_pid(pid);
@@ -4404,6 +4458,12 @@ out_unlock:
 
 long sched_setaffinity(pid_t pid, cpumask_t new_mask)
 {
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	cpumask_t cpus_allowed;
 	struct task_struct *p;
 	int retval;
@@ -4418,6 +4478,33 @@ long sched_setaffinity(pid_t pid, cpumas
 		return -ESRCH;
 	}
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "[sys_sched_setaffinity]: calling ADF\n");
+        if(p == current)
+          {
+            rsbac_target = T_SCD;
+            rsbac_target_id.scd = ST_priority;
+          }
+        else
+          {
+            rsbac_target = T_PROCESS;
+            rsbac_target_id.process = p->pid;
+          }
+          rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+	    read_unlock(&tasklist_lock);
+	    mutex_unlock(&sched_hotcpu_mutex);
+            return -EPERM;
+          }
+        #endif
+
 	/*
 	 * It is not safe to call set_cpus_allowed with the
 	 * tasklist_lock held.  We will bump the task_struct's
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/kernel/signal.c linux-2.6.23.14-rsbac-1.3.7/kernel/signal.c
--- trunk/kernel/signal.c	2008-02-13 16:18:46.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/kernel/signal.c	2008-02-13 13:14:16.000000000 +0100
@@ -33,6 +33,8 @@
 #include <asm/siginfo.h>
 #include "audit.h"	/* audit_signal_info() */
 
+#include <rsbac/hooks.h>
+
 /*
  * SLAB caches for signal bits.
  */
@@ -528,6 +530,13 @@ static int check_kill_permission(int sig
 				 struct task_struct *t)
 {
 	int error = -EINVAL;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!valid_signal(sig))
 		return error;
 
@@ -544,6 +553,25 @@ static int check_kill_permission(int sig
 		return error;
 	}
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[group_send_sig_info(), sys_tgkill(),sys_tkill()]: calling ADF\n");
+	rsbac_target_id.process = t->pid;
+	rsbac_attribute_value.dummy = 0;
+	if(   (!info || ((unsigned long)info != 1 &&
+					(unsigned long)info != 2 && SI_FROMUSER(info)))
+			&& (   (sig != SIGCONT)
+				|| (process_session(current) != process_session(t))
+			   )
+			&& !rsbac_adf_request(R_SEND_SIGNAL,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value)
+	  )
+		return -EPERM;
+#endif
+
 	return security_task_kill(t, info, sig, 0);
 }
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/kernel/sys.c linux-2.6.23.14-rsbac-1.3.7/kernel/sys.c
--- trunk/kernel/sys.c	2008-02-13 16:18:46.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/kernel/sys.c	2008-02-13 13:14:15.000000000 +0100
@@ -43,6 +43,8 @@
 #include <asm/io.h>
 #include <asm/unistd.h>
 
+#include <rsbac/hooks.h>
+
 #ifndef SET_UNALIGN_CTL
 # define SET_UNALIGN_CTL(a,b)	(-EINVAL)
 #endif
@@ -656,6 +658,7 @@ static int set_one_prio(struct task_stru
 		error = no_nice;
 		goto out;
 	}
+
 	if (error == -ESRCH)
 		error = 0;
 	set_user_nice(p, niceval);
@@ -670,6 +673,12 @@ asmlinkage long sys_setpriority(int whic
 	int error = -EINVAL;
 	struct pid *pgrp;
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (which > PRIO_USER || which < PRIO_PROCESS)
 		goto out;
 
@@ -680,6 +689,43 @@ asmlinkage long sys_setpriority(int whic
 	if (niceval > 19)
 		niceval = 19;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        if(   (niceval < (current->static_prio - MAX_RT_PRIO - 20))
+           || (   (which == PRIO_PROCESS)
+               && (who != 0)
+               && (who != current->pid)
+              )
+           || (   (which == PRIO_PGRP)
+               && (who != 0)
+               && (who != process_group(current))
+              )
+          )
+          {
+            rsbac_pr_debug(aef, "calling ADF\n");
+            if(niceval < (current->static_prio - MAX_RT_PRIO - 20))
+              {
+                rsbac_target = T_SCD;
+                rsbac_target_id.scd = ST_priority;
+              }
+            else
+              {
+                rsbac_target = T_PROCESS;
+                rsbac_target_id.process = who;
+              }
+            rsbac_attribute_value.priority = niceval;
+            if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                                   current->pid,
+                                   rsbac_target,
+                                   rsbac_target_id,
+                                   A_priority,
+                                   rsbac_attribute_value))
+              {
+                return -EPERM;
+              }
+          }
+        #endif
+
 	read_lock(&tasklist_lock);
 	switch (which) {
 		case PRIO_PROCESS:
@@ -897,6 +943,12 @@ asmlinkage long sys_reboot(int magic1, i
 {
 	char buffer[256];
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	/* We only trust the superuser with rebooting the system. */
 	if (!capable(CAP_SYS_BOOT))
 		return -EPERM;
@@ -915,6 +967,21 @@ asmlinkage long sys_reboot(int magic1, i
 	if ((cmd == LINUX_REBOOT_CMD_POWER_OFF) && !pm_power_off)
 		cmd = LINUX_REBOOT_CMD_HALT;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.dummy = 0;
+	rsbac_attribute_value.reboot_cmd = cmd;
+	if (!rsbac_adf_request(R_SHUTDOWN,
+				current->pid,
+				T_NONE,
+				rsbac_target_id,
+				A_reboot_cmd,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
 	lock_kernel();
 	switch (cmd) {
 	case LINUX_REBOOT_CMD_RESTART:
@@ -1024,18 +1091,65 @@ asmlinkage long sys_setregid(gid_t rgid,
 		return retval;
 
 	if (rgid != (gid_t) -1) {
-		if ((old_rgid == rgid) ||
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                union rsbac_target_id_t       rsbac_target_id;
+                union rsbac_attribute_value_t rsbac_attribute_value;
+
+                rsbac_pr_debug(aef, "calling ADF\n");
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.long_dummy = 0;
+                rsbac_attribute_value.group = rgid;
+                #endif
+
+		if (((old_rgid == rgid) ||
 		    (current->egid==rgid) ||
 		    capable(CAP_SETGID))
+                    /* RSBAC */
+                    #ifdef CONFIG_RSBAC
+                    && rsbac_adf_request(R_CHANGE_GROUP,
+                                         current->pid,
+                                         T_PROCESS,
+                                         rsbac_target_id,
+                                         A_group,
+                                         rsbac_attribute_value)
+                    #endif
+                   )
 			new_rgid = rgid;
 		else
 			return -EPERM;
 	}
 	if (egid != (gid_t) -1) {
-		if ((old_rgid == egid) ||
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC_DAC_GROUP
+                union rsbac_target_id_t       rsbac_target_id;
+                union rsbac_attribute_value_t rsbac_attribute_value;
+
+                rsbac_pr_debug(aef, "calling ADF\n");
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.long_dummy = 0;
+                rsbac_attribute_value.group = egid;
+                #endif
+
+		if (((old_rgid == egid) ||
 		    (current->egid == egid) ||
 		    (current->sgid == egid) ||
 		    capable(CAP_SETGID))
+                    #ifdef CONFIG_RSBAC_DAC_GROUP
+                    && rsbac_adf_request(R_CHANGE_DAC_EFF_GROUP,
+                                         current->pid,
+                                         T_PROCESS,
+                                         rsbac_target_id,
+                                         A_group,
+                                         rsbac_attribute_value)
+                    && rsbac_adf_request(R_CHANGE_DAC_FS_GROUP,
+                                         current->pid,
+                                         T_PROCESS,
+                                         rsbac_target_id,
+                                         A_group,
+                                         rsbac_attribute_value)
+                    #endif
+                   )
 			new_egid = egid;
 		else
 			return -EPERM;
@@ -1065,17 +1179,72 @@ asmlinkage long sys_setgid(gid_t gid)
 	int old_egid = current->egid;
 	int retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	retval = security_task_setgid(gid, (gid_t)-1, (gid_t)-1, LSM_SETID_ID);
 	if (retval)
 		return retval;
 
-	if (capable(CAP_SETGID)) {
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.process = current->pid;
+        rsbac_attribute_value.group = gid;
+        #endif
+
+	if ((capable(CAP_SETGID))
+            /* RSBAC */
+            #ifdef CONFIG_RSBAC
+            && rsbac_adf_request(R_CHANGE_GROUP,
+                                 current->pid,
+                                 T_PROCESS,
+                                 rsbac_target_id,
+                                 A_group,
+                                 rsbac_attribute_value)
+            #ifdef CONFIG_RSBAC_DAC_GROUP
+            && rsbac_adf_request(R_CHANGE_DAC_EFF_GROUP,
+                                 current->pid,
+                                 T_PROCESS,
+                                 rsbac_target_id,
+                                 A_group,
+                                 rsbac_attribute_value)
+            && rsbac_adf_request(R_CHANGE_DAC_FS_GROUP,
+                                 current->pid,
+                                 T_PROCESS,
+                                 rsbac_target_id,
+                                 A_group,
+                                 rsbac_attribute_value)
+            #endif
+            #endif
+           )
+	{
 		if (old_egid != gid) {
 			set_dumpable(current->mm, suid_dumpable);
 			smp_wmb();
 		}
 		current->gid = current->egid = current->sgid = current->fsgid = gid;
-	} else if ((gid == current->gid) || (gid == current->sgid)) {
+	} else if (((gid == current->gid) || (gid == current->sgid))
+                 /* RSBAC */
+                 #ifdef CONFIG_RSBAC_DAC_GROUP
+                 && rsbac_adf_request(R_CHANGE_DAC_EFF_GROUP,
+                                      current->pid,
+                                      T_PROCESS,
+                                      rsbac_target_id,
+                                      A_group,
+                                      rsbac_attribute_value)
+                 && rsbac_adf_request(R_CHANGE_DAC_FS_GROUP,
+                                      current->pid,
+                                      T_PROCESS,
+                                      rsbac_target_id,
+                                      A_group,
+                                      rsbac_attribute_value)
+                 #endif
+                )
+	{
 		if (old_egid != gid) {
 			set_dumpable(current->mm, suid_dumpable);
 			smp_wmb();
@@ -1135,10 +1304,58 @@ asmlinkage long sys_setreuid(uid_t ruid,
 	int old_ruid, old_euid, old_suid, new_ruid, new_euid;
 	int retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	retval = security_task_setuid(ruid, euid, (uid_t)-1, LSM_SETID_RE);
 	if (retval)
 		return retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        if(ruid != (uid_t) -1)
+          {
+            rsbac_pr_debug(aef, "calling ADF\n");
+            rsbac_target_id.process = current->pid;
+            rsbac_attribute_value.long_dummy = 0;
+            rsbac_attribute_value.owner = ruid;
+            if(!rsbac_adf_request(R_CHANGE_OWNER,
+                                  current->pid,
+                                  T_PROCESS,
+                                  rsbac_target_id,
+                                  A_owner,
+                                  rsbac_attribute_value))
+              return -EPERM;
+          }
+        #ifdef CONFIG_RSBAC_DAC_OWNER
+        if(euid != (uid_t) -1)
+          {
+            rsbac_pr_debug(aef, "calling ADF for euid\n");
+            rsbac_target_id.process = current->pid;
+            rsbac_attribute_value.long_dummy = 0;
+            rsbac_attribute_value.owner = euid;
+            if(!rsbac_adf_request(R_CHANGE_DAC_EFF_OWNER,
+                                  current->pid,
+                                  T_PROCESS,
+                                  rsbac_target_id,
+                                  A_owner,
+                                  rsbac_attribute_value))
+              return -EPERM;
+            if(!rsbac_adf_request(R_CHANGE_DAC_FS_OWNER,
+                                  current->pid,
+                                  T_PROCESS,
+                                  rsbac_target_id,
+                                  A_owner,
+                                  rsbac_attribute_value))
+              return -EPERM;
+          }
+        #endif
+        #endif
+
 	new_ruid = old_ruid = current->uid;
 	new_euid = old_euid = current->euid;
 	old_suid = current->suid;
@@ -1176,7 +1393,62 @@ asmlinkage long sys_setreuid(uid_t ruid,
 	key_fsuid_changed(current);
 	proc_id_connector(current, PROC_EVENT_UID);
 
-	return security_task_post_setuid(old_ruid, old_euid, old_suid, LSM_SETID_RE);
+	retval = security_task_post_setuid(old_ruid, old_euid, old_suid, LSM_SETID_RE);
+
+        /* RSBAC: notify ADF of changed process owner */
+        #ifdef CONFIG_RSBAC
+        if(ruid != (uid_t) -1)
+	  {
+            rsbac_set_audit_uid(old_ruid);
+            rsbac_attribute_value.owner = current->uid;
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(R_CHANGE_OWNER,
+                                   current->pid,
+                                   T_PROCESS,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_owner,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sys_setreuid(): rsbac_adf_set_attr() returned error");
+              }
+          }
+        #ifdef CONFIG_RSBAC_DAC_OWNER
+        if(euid != (uid_t) -1)
+	  {
+            rsbac_attribute_value.owner = current->euid;
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(R_CHANGE_DAC_EFF_OWNER,
+                                   current->pid,
+                                   T_PROCESS,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_owner,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sys_setreuid(): rsbac_adf_set_attr() for euid returned error");
+              }
+            if (rsbac_adf_set_attr(R_CHANGE_DAC_FS_OWNER,
+                                   current->pid,
+                                   T_PROCESS,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_owner,
+                                   rsbac_attribute_value))
+              {
+                printk(KERN_WARNING
+                       "sys_setreuid(): rsbac_adf_set_attr() for fsuid returned error");
+              }
+          }
+        #endif
+        #endif
+
+        return retval;
 }
 
 
@@ -1198,10 +1470,56 @@ asmlinkage long sys_setuid(uid_t uid)
 	int old_ruid, old_suid, new_suid;
 	int retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        #ifdef CONFIG_RSBAC_FAKE_ROOT_UID
+        if(!uid && rsbac_uid_faked())
+          return 0;
+        #endif
+
 	retval = security_task_setuid(uid, (uid_t)-1, (uid_t)-1, LSM_SETID_ID);
 	if (retval)
 		return retval;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.process = current->pid;
+	rsbac_attribute_value.long_dummy = 0;
+	rsbac_attribute_value.owner = uid;
+	if(!rsbac_adf_request(R_CHANGE_OWNER,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_owner,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#ifdef CONFIG_RSBAC_DAC_OWNER
+	rsbac_pr_debug(aef, "calling ADF for euid\n");
+	if(!rsbac_adf_request(R_CHANGE_DAC_EFF_OWNER,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_owner,
+				rsbac_attribute_value))
+		return -EPERM;
+	rsbac_pr_debug(aef, "calling ADF for fsuid\n");
+	if(!rsbac_adf_request(R_CHANGE_DAC_FS_OWNER,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_owner,
+				rsbac_attribute_value))
+		return -EPERM;
+#endif
+#endif
+
 	old_ruid = current->uid;
 	old_suid = current->suid;
 	new_suid = old_suid;
@@ -1223,7 +1541,55 @@ asmlinkage long sys_setuid(uid_t uid)
 	key_fsuid_changed(current);
 	proc_id_connector(current, PROC_EVENT_UID);
 
-	return security_task_post_setuid(old_ruid, old_euid, old_suid, LSM_SETID_ID);
+	retval = security_task_post_setuid(old_ruid, old_euid, old_suid, LSM_SETID_ID);
+
+        /* RSBAC: notify ADF of changed process owner */
+        #ifdef CONFIG_RSBAC
+        rsbac_set_audit_uid(old_ruid);
+        rsbac_new_target_id.dummy = 0;
+        if (rsbac_adf_set_attr(R_CHANGE_OWNER,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               T_NONE,
+                               rsbac_new_target_id,
+                               A_owner,
+                               rsbac_attribute_value))
+          {
+            rsbac_printk(KERN_WARNING
+                   "sys_setuid(): rsbac_adf_set_attr() returned error");
+          }
+        #ifdef CONFIG_RSBAC_DAC_OWNER
+        rsbac_new_target_id.dummy = 0;
+        if (rsbac_adf_set_attr(R_CHANGE_DAC_EFF_OWNER,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               T_NONE,
+                               rsbac_new_target_id,
+                               A_owner,
+                               rsbac_attribute_value))
+          {
+            rsbac_printk(KERN_WARNING
+                   "sys_setuid(): rsbac_adf_set_attr() for euid returned error");
+          }
+        rsbac_new_target_id.dummy = 0;
+        if (rsbac_adf_set_attr(R_CHANGE_DAC_FS_OWNER,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               T_NONE,
+                               rsbac_new_target_id,
+                               A_owner,
+                               rsbac_attribute_value))
+          {
+            rsbac_printk(KERN_WARNING
+                   "sys_setuid(): rsbac_adf_set_attr() for fsuid returned error");
+          }
+        #endif
+        #endif
+
+        return retval;
 }
 
 
@@ -1238,6 +1604,13 @@ asmlinkage long sys_setresuid(uid_t ruid
 	int old_suid = current->suid;
 	int retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	retval = security_task_setuid(ruid, euid, suid, LSM_SETID_RES);
 	if (retval)
 		return retval;
@@ -1253,6 +1626,49 @@ asmlinkage long sys_setresuid(uid_t ruid
 		    (suid != current->euid) && (suid != current->suid))
 			return -EPERM;
 	}
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        if(ruid != (uid_t) -1)
+          {
+            rsbac_pr_debug(aef, "calling ADF\n");
+            rsbac_target_id.process = current->pid;
+            rsbac_attribute_value.long_dummy = 0;
+            rsbac_attribute_value.owner = ruid;
+            if(!rsbac_adf_request(R_CHANGE_OWNER,
+                                  current->pid,
+                                  T_PROCESS,
+                                  rsbac_target_id,
+                                  A_owner,
+                                  rsbac_attribute_value))
+              return -EPERM;
+          }
+        #ifdef CONFIG_RSBAC_DAC_OWNER
+        if(euid != (uid_t) -1)
+          {
+            rsbac_pr_debug(aef, "calling ADF for euid\n");
+            rsbac_target_id.process = current->pid;
+            rsbac_attribute_value.long_dummy = 0;
+            rsbac_attribute_value.owner = euid;
+            if(!rsbac_adf_request(R_CHANGE_DAC_EFF_OWNER,
+                                  current->pid,
+                                  T_PROCESS,
+                                  rsbac_target_id,
+                                  A_owner,
+                                  rsbac_attribute_value))
+              return -EPERM;
+            rsbac_pr_debug(aef, "calling ADF for fsuid\n");
+            if(!rsbac_adf_request(R_CHANGE_DAC_FS_OWNER,
+                                  current->pid,
+                                  T_PROCESS,
+                                  rsbac_target_id,
+                                  A_owner,
+                                  rsbac_attribute_value))
+              return -EPERM;
+          }
+        #endif
+        #endif
+
 	if (ruid != (uid_t) -1) {
 		if (ruid != current->uid && set_user(ruid, euid != current->euid) < 0)
 			return -EAGAIN;
@@ -1271,7 +1687,62 @@ asmlinkage long sys_setresuid(uid_t ruid
 	key_fsuid_changed(current);
 	proc_id_connector(current, PROC_EVENT_UID);
 
-	return security_task_post_setuid(old_ruid, old_euid, old_suid, LSM_SETID_RES);
+	retval = security_task_post_setuid(old_ruid, old_euid, old_suid, LSM_SETID_RES);
+
+        /* RSBAC: notify ADF of changed process owner */
+        #ifdef CONFIG_RSBAC
+        if(ruid != (uid_t) -1)
+	  {
+            rsbac_set_audit_uid(old_ruid);
+            rsbac_new_target_id.dummy = 0;
+            rsbac_attribute_value.owner = current->uid;
+            if (rsbac_adf_set_attr(R_CHANGE_OWNER,
+                                   current->pid,
+                                   T_PROCESS,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_owner,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sys_setresuid(): rsbac_adf_set_attr() returned error");
+              }
+          }
+        #ifdef CONFIG_RSBAC_DAC_OWNER
+        if(euid != (uid_t) -1)
+	  {
+            rsbac_new_target_id.dummy = 0;
+            rsbac_attribute_value.owner = current->euid;
+            if (rsbac_adf_set_attr(R_CHANGE_DAC_EFF_OWNER,
+                                   current->pid,
+                                   T_PROCESS,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_owner,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sys_setreuid(): rsbac_adf_set_attr() for euid returned error\n");
+              }
+            if (rsbac_adf_set_attr(R_CHANGE_DAC_FS_OWNER,
+                                   current->pid,
+                                   T_PROCESS,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_owner,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sys_setreuid(): rsbac_adf_set_attr() for fsuid returned error\n");
+              }
+          }
+        #endif
+        #endif
+
+        return retval;
 }
 
 asmlinkage long sys_getresuid(uid_t __user *ruid, uid_t __user *euid, uid_t __user *suid)
@@ -1292,6 +1763,12 @@ asmlinkage long sys_setresgid(gid_t rgid
 {
 	int retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	retval = security_task_setgid(rgid, egid, sgid, LSM_SETID_RES);
 	if (retval)
 		return retval;
@@ -1307,7 +1784,46 @@ asmlinkage long sys_setresgid(gid_t rgid
 		    (sgid != current->egid) && (sgid != current->sgid))
 			return -EPERM;
 	}
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        if(rgid != (gid_t) -1)
+          {
+            rsbac_pr_debug(aef, "calling ADF\n");
+            rsbac_target_id.process = current->pid;
+            rsbac_attribute_value.group = rgid;
+            if(!rsbac_adf_request(R_CHANGE_GROUP,
+                                  current->pid,
+                                  T_PROCESS,
+                                  rsbac_target_id,
+                                  A_group,
+                                  rsbac_attribute_value))
+               return -EPERM;
+          }
+        #endif
+
 	if (egid != (gid_t) -1) {
+	        /* RSBAC */
+                #ifdef CONFIG_RSBAC_DAC_GROUP
+                rsbac_pr_debug(aef, "calling ADF\n");
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.group = egid;
+                if(!rsbac_adf_request(R_CHANGE_DAC_EFF_GROUP,
+                                      current->pid,
+                                      T_PROCESS,
+                                      rsbac_target_id,
+                                      A_group,
+                                      rsbac_attribute_value))
+                  return -EPERM;
+                if(!rsbac_adf_request(R_CHANGE_DAC_FS_GROUP,
+                                      current->pid,
+                                      T_PROCESS,
+                                      rsbac_target_id,
+                                      A_group,
+                                      rsbac_attribute_value))
+                  return -EPERM;
+                #endif
+
 		if (egid != current->egid) {
 			set_dumpable(current->mm, suid_dumpable);
 			smp_wmb();
@@ -1347,10 +1863,31 @@ asmlinkage long sys_setfsuid(uid_t uid)
 {
 	int old_fsuid;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_DAC_OWNER
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	old_fsuid = current->fsuid;
 	if (security_task_setuid(uid, (uid_t)-1, (uid_t)-1, LSM_SETID_FS))
 		return old_fsuid;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_DAC_OWNER
+        rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.process = current->pid;
+        rsbac_attribute_value.owner = uid;
+        if (!rsbac_adf_request(R_CHANGE_DAC_FS_OWNER,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_owner,
+                               rsbac_attribute_value))
+          return old_fsuid;
+        #endif
+
 	if (uid == current->uid || uid == current->euid ||
 	    uid == current->suid || uid == current->fsuid || 
 	    capable(CAP_SETUID)) {
@@ -1364,6 +1901,24 @@ asmlinkage long sys_setfsuid(uid_t uid)
 	key_fsuid_changed(current);
 	proc_id_connector(current, PROC_EVENT_UID);
 
+        #ifdef CONFIG_RSBAC_DAC_OWNER
+        rsbac_target_id.process = current->pid;
+        rsbac_new_target_id.dummy = 0;
+        rsbac_attribute_value.owner = uid;
+        if (rsbac_adf_set_attr(R_CHANGE_DAC_FS_OWNER,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               T_NONE,
+                               rsbac_new_target_id,
+                               A_owner,
+                               rsbac_attribute_value))
+          {
+            rsbac_printk(KERN_WARNING
+                   "sys_setfsuid(): rsbac_adf_set_attr() returned error\n");
+          }
+        #endif
+
 	security_task_post_setuid(old_fsuid, (uid_t)-1, (uid_t)-1, LSM_SETID_FS);
 
 	return old_fsuid;
@@ -1376,10 +1931,30 @@ asmlinkage long sys_setfsgid(gid_t gid)
 {
 	int old_fsgid;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_DAC_GROUP
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	old_fsgid = current->fsgid;
 	if (security_task_setgid(gid, (gid_t)-1, (gid_t)-1, LSM_SETID_FS))
 		return old_fsgid;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_DAC_GROUP
+        rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.process = current->pid;
+        rsbac_attribute_value.group = gid;
+        if (!rsbac_adf_request(R_CHANGE_DAC_FS_GROUP,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_group,
+                               rsbac_attribute_value))
+          return old_fsgid;
+        #endif
+
 	if (gid == current->gid || gid == current->egid ||
 	    gid == current->sgid || gid == current->fsgid || 
 	    capable(CAP_SETGID)) {
@@ -1450,6 +2025,12 @@ asmlinkage long sys_setpgid(pid_t pid, p
 	struct task_struct *group_leader = current->group_leader;
 	int err = -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!pid)
 		pid = group_leader->pid;
 	if (!pgid)
@@ -1457,6 +2038,22 @@ asmlinkage long sys_setpgid(pid_t pid, p
 	if (pgid < 0)
 		return -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	/* From this point forward we keep holding onto the tasklist lock
 	 * so that our parent does not change from under us. -DaveM
 	 */
@@ -1521,12 +2118,35 @@ asmlinkage long sys_getpgid(pid_t pid)
 		int retval;
 		struct task_struct *p;
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                union rsbac_target_id_t       rsbac_target_id;
+                union rsbac_attribute_value_t rsbac_attribute_value;
+                #endif
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                rsbac_pr_debug(aef, "calling ADF\n");
+                rsbac_target_id.process = pid;
+                rsbac_attribute_value.dummy = 0;
+                if (!rsbac_adf_request(R_GET_STATUS_DATA,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    return -EPERM;
+                  }
+                #endif
+
 		read_lock(&tasklist_lock);
 		p = find_task_by_pid(pid);
 
 		retval = -ESRCH;
 		if (p) {
 			retval = security_task_getpgid(p);
+
 			if (!retval)
 				retval = process_group(p);
 		}
@@ -1553,12 +2173,35 @@ asmlinkage long sys_getsid(pid_t pid)
 		int retval;
 		struct task_struct *p;
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                union rsbac_target_id_t       rsbac_target_id;
+                union rsbac_attribute_value_t rsbac_attribute_value;
+                #endif
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                rsbac_pr_debug(aef, "calling ADF\n");
+                rsbac_target_id.process = pid;
+                rsbac_attribute_value.dummy = 0;
+                if (!rsbac_adf_request(R_GET_STATUS_DATA,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    return -EPERM;
+                  }
+                #endif
+
 		read_lock(&tasklist_lock);
 		p = find_task_by_pid(pid);
 
 		retval = -ESRCH;
 		if (p) {
 			retval = security_task_getsid(p);
+
 			if (!retval)
 				retval = process_session(p);
 		}
@@ -1816,6 +2459,13 @@ asmlinkage long sys_setgroups(int gidset
 	struct group_info *group_info;
 	int retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        int i;
+        #endif
+
 	if (!capable(CAP_SETGID))
 		return -EPERM;
 	if ((unsigned)gidsetsize > NGROUPS_MAX)
@@ -1830,6 +2480,29 @@ asmlinkage long sys_setgroups(int gidset
 		return retval;
 	}
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        if(gidsetsize > 0)
+          {
+            rsbac_pr_debug(aef, "calling ADF\n");
+            rsbac_target_id.process = current->pid;
+            for(i=0; i < gidsetsize; i++)
+              {
+                rsbac_attribute_value.group = group_info->blocks[i / NGROUPS_PER_BLOCK][i];
+                if(!rsbac_adf_request(R_CHANGE_GROUP,
+                                      current->pid,
+                                      T_PROCESS,
+                                      rsbac_target_id,
+                                      A_group,
+                                      rsbac_attribute_value))
+                  {
+                    put_group_info(group_info);
+                    return -EPERM;
+                  }
+	      }
+          }
+        #endif
+
 	retval = set_current_groups(group_info);
 	put_group_info(group_info);
 
@@ -1879,10 +2552,33 @@ asmlinkage long sys_sethostname(char __u
 	int errno;
 	char tmp[__NEW_UTS_LEN];
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+	
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.scd = ST_host_id;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                               current->pid,
+                               T_SCD,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	down_write(&uts_sem);
 	errno = -EFAULT;
 	if (!copy_from_user(tmp, name, len)) {
@@ -1924,11 +2620,33 @@ asmlinkage long sys_setdomainname(char _
 	int errno;
 	char tmp[__NEW_UTS_LEN];
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+	
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.scd = ST_net_id;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                               current->pid,
+                               T_SCD,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	down_write(&uts_sem);
 	errno = -EFAULT;
 	if (!copy_from_user(tmp, name, len)) {
@@ -1983,6 +2701,12 @@ asmlinkage long sys_setrlimit(unsigned i
 	unsigned long it_prof_secs;
 	int retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (resource >= RLIM_NLIMITS)
 		return -EINVAL;
 	if (copy_from_user(&new_rlim, rlim, sizeof(*rlim)))
@@ -2000,6 +2724,21 @@ asmlinkage long sys_setrlimit(unsigned i
 	if (retval)
 		return retval;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.scd = ST_rlimit;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
 	if (resource == RLIMIT_CPU && new_rlim.rlim_cur == 0) {
 		/*
 		 * The caller is asking for an immediate RLIMIT_CPU
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/kernel/sysctl.c linux-2.6.23.14-rsbac-1.3.7/kernel/sysctl.c
--- trunk/kernel/sysctl.c	2008-02-13 16:18:44.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/kernel/sysctl.c	2008-02-13 13:14:13.000000000 +0100
@@ -50,6 +50,7 @@
 #include <asm/uaccess.h>
 #include <asm/processor.h>
 
+#include <rsbac/hooks.h>
 #ifdef CONFIG_X86
 #include <asm/nmi.h>
 #include <asm/stacktrace.h>
@@ -1377,9 +1378,46 @@ static int test_perm(int mode, int op)
 int sysctl_perm(ctl_table *table, int op)
 {
 	int error;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = security_sysctl(table, op);
 	if (error)
 		return error;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        if(op & 002) /* write access */
+          {
+            switch(table->ctl_name)
+              {
+                case KERN_NODENAME:
+                  rsbac_target_id.scd = ST_host_id;
+                  break;
+                case KERN_DOMAINNAME:
+                  rsbac_target_id.scd = ST_net_id;
+                  break;
+                default:
+                  rsbac_target_id.scd = ST_sysctl;
+              }
+            rsbac_attribute_value.dummy = 0;
+            rsbac_pr_debug(aef, "[sysctl() etc.]: calling ADF\n");
+            if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                                  current->pid,
+                                  T_SCD,
+                                  rsbac_target_id,
+                                  A_none,
+                                  rsbac_attribute_value))
+              {
+                return -EPERM;
+              }
+          }
+        #endif
+
 	return test_perm(table->mode, op);
 }
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/kernel/time/ntp.c linux-2.6.23.14-rsbac-1.3.7/kernel/time/ntp.c
--- trunk/kernel/time/ntp.c	2008-02-13 16:18:42.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/kernel/time/ntp.c	2008-02-13 13:14:10.000000000 +0100
@@ -17,6 +17,7 @@
 #include <linux/capability.h>
 #include <asm/div64.h>
 #include <asm/timex.h>
+#include <rsbac/hooks.h>
 
 /*
  * Timekeeping variables
@@ -243,10 +244,29 @@ int do_adjtimex(struct timex *txc)
 	s64 freq_adj, temp64;
 	int result;
 
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	/* In order to modify anything, you gotta be super-user! */
 	if (txc->modes && !capable(CAP_SYS_TIME))
 		return -EPERM;
 
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.scd = ST_time_strucs;
+        rsbac_attribute_value.dummy = 0;
+        if (   txc->modes
+            && !rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                                  current->pid,
+                                  T_SCD,
+                                  rsbac_target_id,
+                                  A_none,
+                                  rsbac_attribute_value))
+	  return -EPERM;
+        #endif
+
 	/* Now we validate the data before disabling interrupts */
 
 	if ((txc->modes & ADJ_OFFSET_SINGLESHOT) == ADJ_OFFSET_SINGLESHOT)
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/kernel/time.c linux-2.6.23.14-rsbac-1.3.7/kernel/time.c
--- trunk/kernel/time.c	2008-02-13 16:18:43.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/kernel/time.c	2008-02-13 13:14:11.000000000 +0100
@@ -39,6 +39,8 @@
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
 
+#include <rsbac/hooks.h>
+
 /* 
  * The timezone where the local system is located.  Used as a default by some
  * programs who obtain this value by using gettimeofday.
@@ -82,9 +84,31 @@ asmlinkage long sys_stime(time_t __user 
 	struct timespec tv;
 	int err;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (get_user(tv.tv_sec, tptr))
 		return -EFAULT;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.scd = ST_clock;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                               current->pid,
+                               T_SCD,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	tv.tv_nsec = 0;
 
 	err = security_settime(&tv, NULL);
@@ -153,6 +177,11 @@ int do_sys_settimeofday(struct timespec 
 	static int firsttime = 1;
 	int error = 0;
 
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (tv && !timespec_valid(tv))
 		return -EINVAL;
 
@@ -160,6 +189,21 @@ int do_sys_settimeofday(struct timespec 
 	if (error)
 		return error;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[sys_settimeofday()]: calling ADF\n");
+	rsbac_target_id.scd = ST_clock;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
 	if (tz) {
 		/* SMP safe, global irq locking makes it work. */
 		sys_tz = *tz;
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/kernel/timer.c linux-2.6.23.14-rsbac-1.3.7/kernel/timer.c
--- trunk/kernel/timer.c	2008-02-13 16:18:47.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/kernel/timer.c	2008-02-13 13:14:16.000000000 +0100
@@ -43,6 +43,8 @@
 #include <asm/timex.h>
 #include <asm/io.h>
 
+#include <rsbac/hooks.h>
+
 u64 jiffies_64 __cacheline_aligned_in_smp = INITIAL_JIFFIES;
 
 EXPORT_SYMBOL(jiffies_64);
@@ -975,14 +977,22 @@ asmlinkage long sys_getppid(void)
 
 asmlinkage long sys_getuid(void)
 {
+        #ifdef CONFIG_RSBAC_FAKE_ROOT_UID
+        return rsbac_fake_uid();
+        #else
 	/* Only we change this so SMP safe */
 	return current->uid;
+	#endif
 }
 
 asmlinkage long sys_geteuid(void)
 {
+        #ifdef CONFIG_RSBAC_FAKE_ROOT_UID
+        return rsbac_fake_euid();
+        #else
 	/* Only we change this so SMP safe */
 	return current->euid;
+	#endif
 }
 
 asmlinkage long sys_getgid(void)
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/kernel/uid16.c linux-2.6.23.14-rsbac-1.3.7/kernel/uid16.c
--- trunk/kernel/uid16.c	2008-02-13 16:18:44.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/kernel/uid16.c	2008-02-13 13:14:13.000000000 +0100
@@ -17,6 +17,8 @@
 
 #include <asm/uaccess.h>
 
+#include <rsbac/hooks.h>
+
 asmlinkage long sys_chown16(const char __user * filename, old_uid_t user, old_gid_t group)
 {
 	long ret = sys_chown(filename, low2highuid(user), low2highgid(group));
@@ -210,12 +212,20 @@ asmlinkage long sys_setgroups16(int gids
 
 asmlinkage long sys_getuid16(void)
 {
+        #ifdef CONFIG_RSBAC_FAKE_ROOT_UID
+        return high2lowuid(rsbac_fake_uid());
+        #else
 	return high2lowuid(current->uid);
+	#endif
 }
 
 asmlinkage long sys_geteuid16(void)
 {
+        #ifdef CONFIG_RSBAC_FAKE_ROOT_UID
+        return high2lowuid(rsbac_fake_euid());
+        #else
 	return high2lowuid(current->euid);
+	#endif
 }
 
 asmlinkage long sys_getgid16(void)
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/mm/mlock.c linux-2.6.23.14-rsbac-1.3.7/mm/mlock.c
--- trunk/mm/mlock.c	2008-02-13 16:26:57.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/mm/mlock.c	2008-02-13 13:27:45.000000000 +0100
@@ -9,7 +9,9 @@
 #include <linux/mman.h>
 #include <linux/mm.h>
 #include <linux/mempolicy.h>
+#include <linux/security.h>
 #include <linux/syscalls.h>
+#include <rsbac/hooks.h>
 #include <linux/sched.h>
 #include <linux/module.h>
 
@@ -138,9 +140,31 @@ asmlinkage long sys_mlock(unsigned long 
 	unsigned long lock_limit;
 	int error = -ENOMEM;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!can_do_mlock())
 		return -EPERM;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_target_id.scd = ST_mlock;
+        rsbac_attribute_value.dummy = 0;
+        rsbac_pr_debug(aef, "calling ADF\n");
+        if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                              current->pid,
+                              T_SCD,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	down_write(&current->mm->mmap_sem);
 	len = PAGE_ALIGN(len + (start & ~PAGE_MASK));
 	start &= PAGE_MASK;
@@ -200,6 +224,12 @@ asmlinkage long sys_mlockall(int flags)
 	unsigned long lock_limit;
 	int ret = -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!flags || (flags & ~(MCL_CURRENT | MCL_FUTURE)))
 		goto out;
 
@@ -207,6 +237,22 @@ asmlinkage long sys_mlockall(int flags)
 	if (!can_do_mlock())
 		goto out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_target_id.scd = ST_mlock;
+        rsbac_attribute_value.dummy = 0;
+        rsbac_pr_debug(aef, "calling ADF\n");
+        if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                              current->pid,
+                              T_SCD,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	down_write(&current->mm->mmap_sem);
 
 	lock_limit = current->signal->rlim[RLIMIT_MEMLOCK].rlim_cur;
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/mm/mmap.c linux-2.6.23.14-rsbac-1.3.7/mm/mmap.c
--- trunk/mm/mmap.c	2008-02-13 16:26:59.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/mm/mmap.c	2008-02-13 13:27:46.000000000 +0100
@@ -29,6 +29,7 @@
 #include <asm/uaccess.h>
 #include <asm/cacheflush.h>
 #include <asm/tlb.h>
+#include <rsbac/hooks.h>
 #include <asm/mmu_context.h>
 
 #ifndef arch_mmap_check
@@ -900,6 +901,13 @@ unsigned long do_mmap_pgoff(struct file 
 	int accountable = 1;
 	unsigned long reqprot = prot;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	/*
 	 * Does the application expect PROT_READ to imply PROT_EXEC?
 	 *
@@ -1024,6 +1032,37 @@ unsigned long do_mmap_pgoff(struct file 
 	if (error)
 		return error;
 
+#ifdef CONFIG_RSBAC
+	if(prot & PROT_EXEC)
+	{
+		rsbac_pr_debug(aef, "[do_mmap() [sys_mmap()]]: calling ADF\n");
+		if(file)
+		{
+			rsbac_target = T_FILE;
+			rsbac_target_id.file.device = file->f_dentry->d_inode->i_sb->s_dev;
+			rsbac_target_id.file.inode  = file->f_dentry->d_inode->i_ino;
+			rsbac_target_id.file.dentry_p = file->f_dentry;
+		}
+		else
+		{
+			rsbac_target = T_NONE;
+			rsbac_target_id.dummy = 0;
+		}
+		rsbac_attribute_value.prot_bits = prot;
+		if (!rsbac_adf_request(R_MAP_EXEC,
+					current->pid,
+					rsbac_target,
+					rsbac_target_id,
+					A_prot_bits,
+					rsbac_attribute_value))
+		{
+			rsbac_pr_debug(aef, "[do_mmap() [sys_mmap()]]: request not granted, my PID: %i\n",
+					current->pid);
+			return -EPERM;
+		}
+	}
+#endif
+
 	return mmap_region(file, addr, len, flags, vm_flags, pgoff,
 			   accountable);
 }
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/mm/mprotect.c linux-2.6.23.14-rsbac-1.3.7/mm/mprotect.c
--- trunk/mm/mprotect.c	2008-02-13 16:26:59.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/mm/mprotect.c	2008-02-13 13:27:46.000000000 +0100
@@ -25,6 +25,7 @@
 #include <asm/pgtable.h>
 #include <asm/cacheflush.h>
 #include <asm/tlbflush.h>
+#include <rsbac/hooks.h>
 
 static void change_pte_range(struct mm_struct *mm, pmd_t *pmd,
 		unsigned long addr, unsigned long end, pgprot_t newprot,
@@ -221,6 +222,15 @@ sys_mprotect(unsigned long start, size_t
 	struct vm_area_struct *vma, *prev;
 	int error = -EINVAL;
 	const int grows = prot & (PROT_GROWSDOWN|PROT_GROWSUP);
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        int need_notify = FALSE;
+        #endif
+
 	prot &= ~(PROT_GROWSDOWN|PROT_GROWSUP);
 	if (grows == (PROT_GROWSDOWN|PROT_GROWSUP)) /* can't be both */
 		return -EINVAL;
@@ -289,6 +299,38 @@ sys_mprotect(unsigned long start, size_t
 		if (error)
 			goto out;
 
+#ifdef CONFIG_RSBAC
+		if(   (prot & PROT_EXEC)
+		   && !(vma->vm_flags & PROT_EXEC)
+		  ) {
+			rsbac_pr_debug(aef, "calling ADF\n");
+			if(vma->vm_file) {
+		                rsbac_target = T_FILE;
+				rsbac_target_id.file.device = vma->vm_file->f_dentry->d_inode->i_sb->s_dev;
+				rsbac_target_id.file.inode = vma->vm_file->f_dentry->d_inode->i_ino;
+				rsbac_target_id.file.dentry_p = vma->vm_file->f_dentry;
+			}
+			else {
+				rsbac_target = T_NONE;
+				rsbac_target_id.dummy = 0;
+			}
+			rsbac_attribute_value.prot_bits = prot;
+			if(!rsbac_adf_request(R_MAP_EXEC,
+						  current->pid,
+						  rsbac_target,
+						  rsbac_target_id,
+						  A_prot_bits,
+						  rsbac_attribute_value)) 
+			{
+				rsbac_pr_debug(aef, "request NOT_GRANTED\n");
+				error = -EPERM;
+				goto out;
+			}
+			else
+			  need_notify = TRUE;
+		}
+#endif
+
 		tmp = vma->vm_end;
 		if (tmp > end)
 			tmp = end;
@@ -310,5 +352,29 @@ sys_mprotect(unsigned long start, size_t
 	}
 out:
 	up_write(&current->mm->mmap_sem);
+
+        /* RSBAC: notify ADF of mapped segment */
+        #ifdef CONFIG_RSBAC
+        if(need_notify && !error)
+          {
+            union rsbac_target_id_t rsbac_new_target_id;
+
+            rsbac_pr_debug(aef, "calling ADF_set_attr\n");
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(R_MAP_EXEC,
+                                   current->pid,
+                                   rsbac_target,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sys_mprotect: rsbac_adf_set_attr() returned error\n");
+              }
+          }
+        #endif
+
 	return error;
 }
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/mm/swapfile.c linux-2.6.23.14-rsbac-1.3.7/mm/swapfile.c
--- trunk/mm/swapfile.c	2008-02-13 16:26:59.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/mm/swapfile.c	2008-02-13 13:27:46.000000000 +0100
@@ -31,6 +31,7 @@
 #include <asm/pgtable.h>
 #include <asm/tlbflush.h>
 #include <linux/swapops.h>
+#include <rsbac/hooks.h>
 
 DEFINE_SPINLOCK(swap_lock);
 unsigned int nr_swapfiles;
@@ -1183,9 +1184,32 @@ asmlinkage long sys_swapoff(const char _
 	int i, type, prev;
 	int err;
 	
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF\n");
+        rsbac_target_id.scd = ST_swap;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                               current->pid,
+                               T_SCD,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	pathname = getname(specialfile);
 	err = PTR_ERR(pathname);
 	if (IS_ERR(pathname))
@@ -1197,6 +1221,44 @@ asmlinkage long sys_swapoff(const char _
 	if (IS_ERR(victim))
 		goto out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF for DEV / FILE\n");
+        if(S_ISBLK(victim->f_dentry->d_inode->i_mode))
+          {
+            rsbac_target = T_DEV;
+            rsbac_target_id.dev.type = D_block;
+            rsbac_target_id.dev.major = RSBAC_MAJOR(victim->f_dentry->d_inode->i_rdev);
+            rsbac_target_id.dev.minor = RSBAC_MINOR(victim->f_dentry->d_inode->i_rdev);
+          }
+        else
+        if(S_ISREG(victim->f_dentry->d_inode->i_mode))
+          {
+            rsbac_target = T_FILE;
+            rsbac_target_id.file.device = victim->f_dentry->d_sb->s_dev;
+            rsbac_target_id.file.inode  = victim->f_dentry->d_inode->i_ino;
+            rsbac_target_id.file.dentry_p = victim->f_dentry;
+          }
+        else
+          {
+            rsbac_target = T_NONE;
+            rsbac_target_id.dummy = 0;
+          }
+        rsbac_attribute_value.dummy = 0;
+        if(   (rsbac_target != T_NONE)
+           && !rsbac_adf_request(R_REMOVE_FROM_KERNEL,
+                                 current->pid,
+                                 rsbac_target,
+                                 rsbac_target_id,
+                                 A_none,
+                                 rsbac_attribute_value)
+	  )
+          {
+            err = -EPERM;
+            goto out_dput;
+          }
+        #endif
+
 	mapping = victim->f_mapping;
 	prev = -1;
 	spin_lock(&swap_lock);
@@ -1433,8 +1495,28 @@ asmlinkage long sys_swapon(const char __
 	struct inode *inode = NULL;
 	int did_down = 0;
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
+
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.scd = ST_swap;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+		return -EPERM;
+#endif
+
 	spin_lock(&swap_lock);
 	p = swap_info;
 	for (type = 0 ; type < nr_swapfiles ; type++,p++)
@@ -1491,6 +1573,44 @@ asmlinkage long sys_swapon(const char __
 			goto bad_swap;
 	}
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "calling ADF for DEV / FILE\n");
+        if(S_ISBLK(inode->i_mode))
+          {
+            rsbac_target = T_DEV;
+            rsbac_target_id.dev.type = D_block;
+            rsbac_target_id.dev.major = RSBAC_MAJOR(inode->i_rdev);
+            rsbac_target_id.dev.minor = RSBAC_MINOR(inode->i_rdev);
+          }
+        else
+        if(S_ISREG(inode->i_mode))
+          {
+            rsbac_target = T_FILE;
+            rsbac_target_id.file.device = swap_file->f_dentry->d_sb->s_dev;
+            rsbac_target_id.file.inode  = inode->i_ino;
+            rsbac_target_id.file.dentry_p = swap_file->f_dentry;
+          }
+        else
+          {
+            rsbac_target = T_NONE;
+            rsbac_target_id.dummy = 0;
+          }
+        rsbac_attribute_value.dummy = 0;
+        if(   (rsbac_target != T_NONE)
+           && !rsbac_adf_request(R_ADD_TO_KERNEL,
+                                 current->pid,
+                                 rsbac_target,
+                                 rsbac_target_id,
+                                 A_none,
+                                 rsbac_attribute_value)
+	  )
+          {
+            error = -EPERM;
+            goto bad_swap;
+          }
+        #endif
+
 	error = -EINVAL;
 	if (S_ISBLK(inode->i_mode)) {
 		bdev = I_BDEV(inode);
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/net/bridge/br_if.c linux-2.6.23.14-rsbac-1.3.7/net/bridge/br_if.c
--- trunk/net/bridge/br_if.c	2008-02-13 16:23:56.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/net/bridge/br_if.c	2008-02-13 13:21:41.000000000 +0100
@@ -23,6 +23,10 @@
 #include <linux/if_ether.h>
 #include <net/sock.h>
 
+#include <linux/security.h>
+
+#include <rsbac/hooks.h>
+
 #include "br_private.h"
 
 /*
@@ -366,6 +370,12 @@ int br_add_if(struct net_bridge *br, str
 	struct net_bridge_port *p;
 	int err = 0;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (dev->flags & IFF_LOOPBACK || dev->type != ARPHRD_ETHER)
 		return -EINVAL;
 
@@ -375,6 +385,34 @@ int br_add_if(struct net_bridge *br, str
 	if (dev->br_port != NULL)
 		return -EBUSY;
 
+#ifdef CONFIG_RSBAC_NET_DEV
+	rsbac_pr_debug(aef, "calling ADF\n");
+	strncpy(rsbac_target_id.netdev, dev->name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+#ifndef CONFIG_RSBAC_NET_DEV_VIRT
+	{
+		char * p = rsbac_target_id.netdev;
+		while(*p) {
+			if(*p == ':') {
+				*p=' ';
+				break;
+			}
+			p++;
+		}
+	}
+#endif
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+			current->pid,
+			T_NETDEV,
+			rsbac_target_id,
+			A_none,
+			rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
 	p = new_nbp(br, dev);
 	if (IS_ERR(p))
 		return PTR_ERR(p);
@@ -425,10 +463,45 @@ err0:
 int br_del_if(struct net_bridge *br, struct net_device *dev)
 {
 	struct net_bridge_port *p = dev->br_port;
+	
+#ifdef CONFIG_RSBAC_NET
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
 
 	if (!p || p->br != br)
 		return -EINVAL;
 
+#ifdef CONFIG_RSBAC_NET_DEV
+	rsbac_pr_debug(aef, "calling ADF\n");
+	strncpy(rsbac_target_id.netdev, dev->name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+#ifndef CONFIG_RSBAC_NET_DEV_VIRT
+	{
+		char * p = rsbac_target_id.netdev;
+		while(*p)
+		{
+			if(*p == ':')
+			{
+				*p=' ';
+				break;
+			}
+			p++;
+		}
+	}
+#endif
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_NETDEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
 	del_nbp(p);
 
 	spin_lock_bh(&br->lock);
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/net/core/dev.c linux-2.6.23.14-rsbac-1.3.7/net/core/dev.c
--- trunk/net/core/dev.c	2008-02-13 16:23:32.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/net/core/dev.c	2008-02-13 13:20:55.000000000 +0100
@@ -119,6 +119,8 @@
 #include <linux/ctype.h>
 #include <linux/if_arp.h>
 
+#include <rsbac/hooks.h>
+
 /*
  *	The list of packet types we will receive (as opposed to discard)
  *	and the routines to invoke.
@@ -3140,6 +3142,12 @@ int dev_ioctl(unsigned int cmd, void __u
 	int ret;
 	char *colon;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_DEV
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	/* One special case: SIOCGIFCONF takes ifconf argument
 	   and requires shared lock, because it sleeps writing
 	   to user space.
@@ -3159,10 +3167,20 @@ int dev_ioctl(unsigned int cmd, void __u
 
 	ifr.ifr_name[IFNAMSIZ-1] = 0;
 
+	#ifdef CONFIG_RSBAC_NET_DEV_VIRT
+	strncpy(rsbac_target_id.netdev, ifr.ifr_name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#endif
+
 	colon = strchr(ifr.ifr_name, ':');
 	if (colon)
 		*colon = 0;
 
+	#if defined(CONFIG_RSBAC_NET_DEV) && !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	strncpy(rsbac_target_id.netdev, ifr.ifr_name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#endif
+
 	/*
 	 *	See which interface the caller is talking about.
 	 */
@@ -3182,6 +3200,21 @@ int dev_ioctl(unsigned int cmd, void __u
 		case SIOCGIFMAP:
 		case SIOCGIFINDEX:
 		case SIOCGIFTXQLEN:
+			/* RSBAC */
+			#ifdef CONFIG_RSBAC_NET_DEV
+			rsbac_pr_debug(aef, "calling ADF\n");
+			rsbac_attribute_value.dummy = 0;
+			if (!rsbac_adf_request(R_GET_STATUS_DATA,
+						current->pid,
+						T_NETDEV,
+						rsbac_target_id,
+						A_none,
+						rsbac_attribute_value))
+			  {
+			    return -EPERM;
+			  }
+			#endif
+
 			dev_load(ifr.ifr_name);
 			read_lock(&dev_base_lock);
 			ret = dev_ifsioc(&ifr, cmd);
@@ -3220,6 +3253,22 @@ int dev_ioctl(unsigned int cmd, void __u
 		case SIOCSIFNAME:
 			if (!capable(CAP_NET_ADMIN))
 				return -EPERM;
+
+			/* RSBAC */
+			#ifdef CONFIG_RSBAC_NET_DEV
+			rsbac_pr_debug(aef, "calling ADF\n");
+			rsbac_attribute_value.dummy = 0;
+			if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+						current->pid,
+						T_NETDEV,
+						rsbac_target_id,
+						A_none,
+						rsbac_attribute_value))
+			  {
+			    return -EPERM;
+			  }
+			#endif
+
 			dev_load(ifr.ifr_name);
 			rtnl_lock();
 			ret = dev_ifsioc(&ifr, cmd);
@@ -3258,6 +3307,20 @@ int dev_ioctl(unsigned int cmd, void __u
 		case SIOCBRDELIF:
 			if (!capable(CAP_NET_ADMIN))
 				return -EPERM;
+
+#ifdef CONFIG_RSBAC_NET_DEV
+			rsbac_pr_debug(aef, "calling ADF\n");
+			rsbac_attribute_value.dummy = 0;
+			if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_NETDEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+			{
+				return -EPERM;
+			}
+#endif
 			/* fall through */
 		case SIOCBONDSLAVEINFOQUERY:
 		case SIOCBONDINFOQUERY:
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/net/core/fib_rules.c linux-2.6.23.14-rsbac-1.3.7/net/core/fib_rules.c
--- trunk/net/core/fib_rules.c	2008-02-13 16:23:32.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/net/core/fib_rules.c	2008-02-13 13:20:55.000000000 +0100
@@ -12,6 +12,7 @@
 #include <linux/kernel.h>
 #include <linux/list.h>
 #include <net/fib_rules.h>
+#include <rsbac/hooks.h>
 
 static LIST_HEAD(rules_ops);
 static DEFINE_SPINLOCK(rules_mod_lock);
@@ -202,6 +203,10 @@ static int fib_nl_newrule(struct sk_buff
 	struct fib_rule *rule, *r, *last = NULL;
 	struct nlattr *tb[FRA_MAX+1];
 	int err = -EINVAL, unresolved = 0;
+#ifdef CONFIG_RSBAC_NET
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
 
 	if (nlh->nlmsg_len < nlmsg_msg_size(sizeof(*frh)))
 		goto errout;
@@ -226,6 +231,25 @@ static int fib_nl_newrule(struct sk_buff
 		goto errout;
 	}
 
+#ifdef CONFIG_RSBAC_NET
+#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+		rsbac_printk(KERN_DEBUG "fib_nl_newrule(): calling ADF\n");
+#endif
+	rsbac_target_id.scd = ST_network;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		err = -EPERM;
+		goto errout;
+	}
+#endif
+
 	if (tb[FRA_PRIORITY])
 		rule->pref = nla_get_u32(tb[FRA_PRIORITY]);
 
@@ -338,6 +362,10 @@ static int fib_nl_delrule(struct sk_buff
 	struct fib_rule *rule, *tmp;
 	struct nlattr *tb[FRA_MAX+1];
 	int err = -EINVAL;
+#ifdef CONFIG_RSBAC_NET
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
 
 	if (nlh->nlmsg_len < nlmsg_msg_size(sizeof(*frh)))
 		goto errout;
@@ -356,6 +384,25 @@ static int fib_nl_delrule(struct sk_buff
 	if (err < 0)
 		goto errout;
 
+#ifdef CONFIG_RSBAC_NET
+#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+		rsbac_printk(KERN_DEBUG "fib_nl_delrule(): calling ADF\n");
+#endif
+	rsbac_target_id.scd = ST_network;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		err = -EPERM;
+		goto errout;
+	}
+#endif
+
 	list_for_each_entry(rule, ops->rules_list, list) {
 		if (frh->action && (frh->action != rule->action))
 			continue;
@@ -444,6 +491,28 @@ static int fib_nl_fill_rule(struct sk_bu
 {
 	struct nlmsghdr *nlh;
 	struct fib_rule_hdr *frh;
+#ifdef CONFIG_RSBAC_NET
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC_NET
+#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+		rsbac_printk(KERN_DEBUG "fib_nl_fill_rule(): calling ADF\n");
+#endif
+	rsbac_target_id.scd = ST_network;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+	#endif
 
 	nlh = nlmsg_put(skb, pid, seq, type, sizeof(*frh), flags);
 	if (nlh == NULL)
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/net/ipv4/arp.c linux-2.6.23.14-rsbac-1.3.7/net/ipv4/arp.c
--- trunk/net/ipv4/arp.c	2008-02-13 16:23:50.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/net/ipv4/arp.c	2008-02-13 13:21:29.000000000 +0100
@@ -99,6 +99,7 @@
 #include <linux/net.h>
 #include <linux/rcupdate.h>
 #include <linux/jhash.h>
+#include <linux/security.h>
 #ifdef CONFIG_SYSCTL
 #include <linux/sysctl.h>
 #endif
@@ -122,6 +123,8 @@ struct neigh_table *clip_tbl_hook;
 
 #include <linux/netfilter_arp.h>
 
+#include <rsbac/hooks.h>
+
 /*
  *	Interface to generic neighbour cache.
  */
@@ -1120,15 +1123,29 @@ int arp_ioctl(unsigned int cmd, void __u
 	struct arpreq r;
 	struct net_device *dev = NULL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_DEV
+        enum  rsbac_adf_request_t     rsbac_request = R_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	switch (cmd) {
 		case SIOCDARP:
 		case SIOCSARP:
 			if (!capable(CAP_NET_ADMIN))
 				return -EPERM;
+			#ifdef CONFIG_RSBAC_NET_DEV
+			rsbac_request = R_MODIFY_SYSTEM_DATA;
+			#endif
 		case SIOCGARP:
 			err = copy_from_user(&r, arg, sizeof(struct arpreq));
 			if (err)
 				return -EFAULT;
+			#ifdef CONFIG_RSBAC_NET_DEV
+			if(rsbac_request == R_NONE)
+				rsbac_request = R_GET_STATUS_DATA;
+			#endif
 			break;
 		default:
 			return -EINVAL;
@@ -1155,6 +1172,24 @@ int arp_ioctl(unsigned int cmd, void __u
 		err = -EINVAL;
 		if ((r.arp_flags & ATF_COM) && r.arp_ha.sa_family != dev->type)
 			goto out;
+
+		/* RSBAC */
+		#ifdef CONFIG_RSBAC_NET_DEV
+		rsbac_pr_debug(aef, "calling ADF\n");
+		strncpy(rsbac_target_id.netdev, r.arp_dev, RSBAC_IFNAMSIZ);
+		rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+		rsbac_attribute_value.dummy = 0;
+		if (!rsbac_adf_request(rsbac_request,
+				    current->pid,
+				    T_NETDEV,
+				    rsbac_target_id,
+				    A_none,
+				    rsbac_attribute_value))
+		  {
+		    err = -EPERM;
+		    goto out;
+		  }
+		#endif
 	} else if (cmd == SIOCGARP) {
 		err = -ENODEV;
 		goto out;
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/net/ipv4/devinet.c linux-2.6.23.14-rsbac-1.3.7/net/ipv4/devinet.c
--- trunk/net/ipv4/devinet.c	2008-02-13 16:23:49.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/net/ipv4/devinet.c	2008-02-13 13:21:28.000000000 +0100
@@ -52,6 +52,7 @@
 #include <linux/notifier.h>
 #include <linux/inetdevice.h>
 #include <linux/igmp.h>
+#include <linux/security.h>
 #ifdef CONFIG_SYSCTL
 #include <linux/sysctl.h>
 #endif
@@ -63,6 +64,8 @@
 #include <net/ip_fib.h>
 #include <net/rtnetlink.h>
 
+#include <rsbac/hooks.h>
+
 struct ipv4_devconf ipv4_devconf = {
 	.data = {
 		[NET_IPV4_CONF_ACCEPT_REDIRECTS - 1] = 1,
@@ -449,6 +452,12 @@ static int inet_rtm_deladdr(struct sk_bu
 	struct in_ifaddr *ifa, **ifap;
 	int err = -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_DEV
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	ASSERT_RTNL();
 
 	err = nlmsg_parse(nlh, sizeof(*ifm), tb, IFA_MAX, ifa_ipv4_policy);
@@ -462,6 +471,40 @@ static int inet_rtm_deladdr(struct sk_bu
 		goto errout;
 	}
 
+
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET_DEV
+	rsbac_pr_debug(aef, "calling ADF\n");
+	strncpy(rsbac_target_id.netdev, in_dev->dev->name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#ifndef CONFIG_RSBAC_NET_DEV_VIRT
+	{
+	  char * p = rsbac_target_id.netdev;
+
+	  while(*p)
+	    {
+	      if(*p == ':')
+	        {
+	          *p=' ';
+	          break;
+	        }
+	      p++;
+	    }
+	}
+	#endif
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_BIND,
+				current->pid,
+				T_NETDEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value)) {
+		__in_dev_put(in_dev);
+		err = -EPERM;
+		goto errout;
+	}
+	#endif
+
 	__in_dev_put(in_dev);
 
 	for (ifap = &in_dev->ifa_list; (ifa = *ifap) != NULL;
@@ -496,6 +539,12 @@ static struct in_ifaddr *rtm_to_ifaddr(s
 	struct in_device *in_dev;
 	int err = -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_DEV
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	err = nlmsg_parse(nlh, sizeof(*ifm), tb, IFA_MAX, ifa_ipv4_policy);
 	if (err < 0)
 		goto errout;
@@ -518,6 +567,37 @@ static struct in_ifaddr *rtm_to_ifaddr(s
 		goto errout;
 	}
 
+#ifdef CONFIG_RSBAC_NET_DEV
+	rsbac_pr_debug(aef, "calling ADF\n");
+	strncpy(rsbac_target_id.netdev, in_dev->dev->name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+#ifndef CONFIG_RSBAC_NET_DEV_VIRT
+	{
+		char * p = rsbac_target_id.netdev;
+		while(*p)
+		{
+			if(*p == ':')
+			{
+				*p=' ';
+				break;
+			}
+			p++;
+		}
+	}
+#endif
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_BIND,
+				current->pid,
+				T_NETDEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		err = -EPERM;
+		goto errout;
+	}
+#endif
+
 	ipv4_devconf_setall(in_dev);
 
 	ifa = inet_alloc_ifa();
@@ -612,6 +692,13 @@ int devinet_ioctl(unsigned int cmd, void
 	int ret = -EFAULT;
 	int tryaddrmatch = 0;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_DEV
+        enum  rsbac_adf_request_t     rsbac_request = R_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	/*
 	 *	Fetch the caller's info block into kernel space
 	 */
@@ -620,6 +707,11 @@ int devinet_ioctl(unsigned int cmd, void
 		goto out;
 	ifr.ifr_name[IFNAMSIZ - 1] = 0;
 
+	#ifdef CONFIG_RSBAC_NET_DEV_VIRT
+	strncpy(rsbac_target_id.netdev, ifr.ifr_name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#endif
+
 	/* save original address for comparison */
 	memcpy(&sin_orig, sin, sizeof(*sin));
 
@@ -627,6 +719,11 @@ int devinet_ioctl(unsigned int cmd, void
 	if (colon)
 		*colon = 0;
 
+	#if defined(CONFIG_RSBAC_NET_DEV) && !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	strncpy(rsbac_target_id.netdev, ifr.ifr_name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#endif
+
 #ifdef CONFIG_KMOD
 	dev_load(ifr.ifr_name);
 #endif
@@ -643,12 +740,19 @@ int devinet_ioctl(unsigned int cmd, void
 		tryaddrmatch = (sin_orig.sin_family == AF_INET);
 		memset(sin, 0, sizeof(*sin));
 		sin->sin_family = AF_INET;
+
+		#ifdef CONFIG_RSBAC_NET_DEV
+		rsbac_request = R_GET_STATUS_DATA;
+		#endif
 		break;
 
 	case SIOCSIFFLAGS:
 		ret = -EACCES;
 		if (!capable(CAP_NET_ADMIN))
 			goto out;
+		#ifdef CONFIG_RSBAC_NET_DEV
+		rsbac_request = R_MODIFY_SYSTEM_DATA;
+		#endif
 		break;
 	case SIOCSIFADDR:	/* Set interface address (and family) */
 	case SIOCSIFBRDADDR:	/* Set the broadcast address */
@@ -660,6 +764,9 @@ int devinet_ioctl(unsigned int cmd, void
 		ret = -EINVAL;
 		if (sin->sin_family != AF_INET)
 			goto out;
+		#ifdef CONFIG_RSBAC_NET_DEV
+		rsbac_request = R_BIND;
+		#endif
 		break;
 	default:
 		ret = -EINVAL;
@@ -672,6 +779,22 @@ int devinet_ioctl(unsigned int cmd, void
 	if ((dev = __dev_get_by_name(ifr.ifr_name)) == NULL)
 		goto done;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET_DEV
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(rsbac_request,
+				current->pid,
+				T_NETDEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    ret = -EPERM;
+	    goto done;
+	  }
+	#endif
+
 	if (colon)
 		*colon = ':';
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/net/ipv4/fib_frontend.c linux-2.6.23.14-rsbac-1.3.7/net/ipv4/fib_frontend.c
--- trunk/net/ipv4/fib_frontend.c	2008-02-13 16:23:49.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/net/ipv4/fib_frontend.c	2008-02-13 13:21:28.000000000 +0100
@@ -47,6 +47,8 @@
 #include <net/ip_fib.h>
 #include <net/rtnetlink.h>
 
+#include <rsbac/hooks.h>
+
 #define FFprint(a...) printk(KERN_DEBUG a)
 
 #ifndef CONFIG_IP_MULTIPLE_TABLES
@@ -404,6 +406,12 @@ int ip_rt_ioctl(unsigned int cmd, void _
 	struct rtentry rt;
 	int err;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	switch (cmd) {
 	case SIOCADDRT:		/* Add a route */
 	case SIOCDELRT:		/* Delete a route */
@@ -413,6 +421,22 @@ int ip_rt_ioctl(unsigned int cmd, void _
 		if (copy_from_user(&rt, arg, sizeof(rt)))
 			return -EFAULT;
 
+		/* RSBAC */
+		#ifdef CONFIG_RSBAC_NET
+		rsbac_pr_debug(aef, "calling ADF\n");
+		rsbac_target_id.scd = ST_network;
+		rsbac_attribute_value.dummy = 0;
+		if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+					current->pid,
+					T_SCD,
+					rsbac_target_id,
+					A_none,
+					rsbac_attribute_value))
+		  {
+		    return -EPERM;
+		  }
+		#endif
+
 		rtnl_lock();
 		err = rtentry_to_fib_config(cmd, &rt, &cfg);
 		if (err == 0) {
@@ -531,10 +555,32 @@ static int inet_rtm_delroute(struct sk_b
 	struct fib_table *tb;
 	int err;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	err = rtm_to_fib_config(skb, nlh, &cfg);
 	if (err < 0)
 		goto errout;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.scd = ST_network;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	tb = fib_get_table(cfg.fc_table);
 	if (tb == NULL) {
 		err = -ESRCH;
@@ -552,10 +598,32 @@ static int inet_rtm_newroute(struct sk_b
 	struct fib_table *tb;
 	int err;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	err = rtm_to_fib_config(skb, nlh, &cfg);
 	if (err < 0)
 		goto errout;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.scd = ST_network;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	tb = fib_new_table(cfg.fc_table);
 	if (tb == NULL) {
 		err = -ENOBUFS;
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/net/ipv4/inet_diag.c linux-2.6.23.14-rsbac-1.3.7/net/ipv4/inet_diag.c
--- trunk/net/ipv4/inet_diag.c	2008-02-13 16:23:50.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/net/ipv4/inet_diag.c	2008-02-13 13:21:30.000000000 +0100
@@ -17,6 +17,7 @@
 #include <linux/random.h>
 #include <linux/cache.h>
 #include <linux/init.h>
+#include <linux/security.h>
 #include <linux/time.h>
 
 #include <net/icmp.h>
@@ -34,6 +35,8 @@
 
 #include <linux/inet_diag.h>
 
+#include <rsbac/hooks.h>
+
 static const struct inet_diag_handler **inet_diag_table;
 
 struct inet_diag_entry {
@@ -808,6 +811,11 @@ done:
 
 static int inet_diag_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh)
 {
+#ifdef CONFIG_RSBAC_NET
+	union rsbac_target_id_t rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	int hdrlen = sizeof(struct inet_diag_req);
 
 	if (nlh->nlmsg_type >= INET_DIAG_GETSOCK_MAX ||
@@ -821,6 +829,19 @@ static int inet_diag_rcv_msg(struct sk_b
 		if (nlmsg_attrlen(nlh, hdrlen)) {
 			struct nlattr *attr;
 
+#ifdef CONFIG_RSBAC_NET
+			rsbac_pr_debug(aef, "calling ADF\n");
+			rsbac_target_id.scd = ST_network;
+			rsbac_attribute_value.dummy = 0;
+			if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+			  return -EPERM;
+#endif
+
 			attr = nlmsg_find_attr(nlh, hdrlen,
 					       INET_DIAG_REQ_BYTECODE);
 			if (attr == NULL ||
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/net/ipv4/ipmr.c linux-2.6.23.14-rsbac-1.3.7/net/ipv4/ipmr.c
--- trunk/net/ipv4/ipmr.c	2008-02-13 16:23:46.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/net/ipv4/ipmr.c	2008-02-13 13:21:23.000000000 +0100
@@ -48,6 +48,7 @@
 #include <linux/seq_file.h>
 #include <linux/mroute.h>
 #include <linux/init.h>
+#include <linux/security.h>
 #include <linux/if_ether.h>
 #include <net/ip.h>
 #include <net/protocol.h>
@@ -64,6 +65,8 @@
 #include <net/checksum.h>
 #include <net/netlink.h>
 
+#include <rsbac/hooks.h>
+
 #if defined(CONFIG_IP_PIMSM_V1) || defined(CONFIG_IP_PIMSM_V2)
 #define CONFIG_IP_PIMSM	1
 #endif
@@ -873,8 +876,27 @@ int ip_mroute_setsockopt(struct sock *sk
 	struct mfcctl mfc;
 
 	if (optname != MRT_INIT) {
+#ifdef CONFIG_RSBAC_NET_DEV
+		union rsbac_target_id_t       rsbac_target_id;
+		union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
 		if (sk != mroute_socket && !capable(CAP_NET_ADMIN))
 			return -EACCES;
+
+#ifdef CONFIG_RSBAC_NET_DEV
+		rsbac_pr_debug(aef, "calling ADF\n");
+		rsbac_target_id.scd = ST_network;
+		rsbac_attribute_value.dummy = 0;
+		if (!rsbac_adf_request(R_GET_STATUS_DATA,
+					current->pid,
+					T_SCD,
+					rsbac_target_id,
+					A_none,
+					rsbac_attribute_value))
+		{
+			return -EPERM;
+		}
+#endif
 	}
 
 	switch (optname) {
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/net/ipv4/netfilter/ip_tables.c linux-2.6.23.14-rsbac-1.3.7/net/ipv4/netfilter/ip_tables.c
--- trunk/net/ipv4/netfilter/ip_tables.c	2008-02-13 16:23:47.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/net/ipv4/netfilter/ip_tables.c	2008-02-13 13:21:25.000000000 +0100
@@ -23,10 +23,13 @@
 #include <linux/proc_fs.h>
 #include <linux/err.h>
 #include <linux/cpumask.h>
+#include <linux/security.h>
 
 #include <linux/netfilter/x_tables.h>
 #include <linux/netfilter_ipv4/ip_tables.h>
 
+#include <rsbac/hooks.h>
+
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Netfilter Core Team <coreteam@netfilter.org>");
 MODULE_DESCRIPTION("IPv4 packet filter");
@@ -1206,6 +1209,24 @@ get_entries(struct ipt_get_entries __use
 	struct ipt_get_entries get;
 	struct xt_table *t;
 
+#ifdef CONFIG_RSBAC_NET
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.scd = ST_firewall;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
+
 	if (*len < sizeof(get)) {
 		duprintf("get_entries: %u < %d\n", *len,
 				(unsigned int)sizeof(get));
@@ -1907,9 +1928,30 @@ compat_do_ipt_set_ctl(struct sock *sk,	i
 {
 	int ret;
 
+#ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (!capable(CAP_NET_ADMIN))
 		return -EPERM;
 
+	/* RSBAC */
+#ifdef CONFIG_RSBAC_NET
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.scd = ST_firewall;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+#endif
+
 	switch (cmd) {
 	case IPT_SO_SET_REPLACE:
 		ret = compat_do_replace(user, len);
@@ -2011,6 +2053,25 @@ compat_get_entries(struct compat_ipt_get
 	struct compat_ipt_get_entries get;
 	struct xt_table *t;
 
+#ifdef CONFIG_RSBAC_NET
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+#ifdef CONFIG_RSBAC_NET
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.scd = ST_firewall;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+#endif
 
 	if (*len < sizeof(get)) {
 		duprintf("compat_get_entries: %u < %u\n",
@@ -2084,9 +2145,29 @@ do_ipt_set_ctl(struct sock *sk,	int cmd,
 {
 	int ret;
 
+#ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	if (!capable(CAP_NET_ADMIN))
 		return -EPERM;
 
+#ifdef CONFIG_RSBAC_NET
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.scd = ST_firewall;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+#endif
+
 	switch (cmd) {
 	case IPT_SO_SET_REPLACE:
 		ret = do_replace(user, len);
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/net/ipv4/route.c linux-2.6.23.14-rsbac-1.3.7/net/ipv4/route.c
--- trunk/net/ipv4/route.c	2008-02-13 16:23:49.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/net/ipv4/route.c	2008-02-13 13:21:28.000000000 +0100
@@ -91,6 +91,7 @@
 #include <linux/jhash.h>
 #include <linux/rcupdate.h>
 #include <linux/times.h>
+#include <linux/security.h>
 #include <net/protocol.h>
 #include <net/ip.h>
 #include <net/route.h>
@@ -107,6 +108,8 @@
 #include <linux/sysctl.h>
 #endif
 
+#include <rsbac/hooks.h>
+
 #define RT_FL_TOS(oldflp) \
     ((u32)(oldflp->fl4_tos & (IPTOS_RT_MASK | RTO_ONLINK)))
 
@@ -2562,6 +2565,28 @@ static int inet_rtm_getroute(struct sk_b
 	int err;
 	struct sk_buff *skb;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.scd = ST_network;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	err = nlmsg_parse(nlh, sizeof(*rtm), tb, RTA_MAX, rtm_ipv4_policy);
 	if (err < 0)
 		goto errout;
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/net/sched/cls_api.c linux-2.6.23.14-rsbac-1.3.7/net/sched/cls_api.c
--- trunk/net/sched/cls_api.c	2008-02-13 16:23:29.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/net/sched/cls_api.c	2008-02-13 13:20:51.000000000 +0100
@@ -27,6 +27,8 @@
 #include <net/pkt_sched.h>
 #include <net/pkt_cls.h>
 
+#include <rsbac/hooks.h>
+
 #if 0 /* control */
 #define DPRINTK(format,args...) printk(KERN_DEBUG format,##args)
 #else
@@ -135,6 +137,33 @@ static int tc_ctl_tfilter(struct sk_buff
 	unsigned long fh;
 	int err;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        enum  rsbac_adf_request_t     rsbac_request;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET
+	rsbac_pr_debug(aef, "calling ADF\n");
+	if(n->nlmsg_type == RTM_GETTFILTER)
+	  rsbac_request = R_GET_STATUS_DATA;
+	else
+	  rsbac_request = R_MODIFY_SYSTEM_DATA;
+	rsbac_target_id.scd = ST_network;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(rsbac_request,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 replay:
 	tca = arg;
 	t = NLMSG_DATA(n);
@@ -385,6 +414,28 @@ static int tc_dump_tfilter(struct sk_buf
 	struct Qdisc_class_ops *cops;
 	struct tcf_dump_args arg;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET
+	rsbac_pr_debug(aef, "calling ADF\n");
+	rsbac_target_id.scd = ST_network;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	if (cb->nlh->nlmsg_len < NLMSG_LENGTH(sizeof(*tcm)))
 		return skb->len;
 	if ((dev = dev_get_by_index(tcm->tcm_ifindex)) == NULL)
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/net/sched/sch_api.c linux-2.6.23.14-rsbac-1.3.7/net/sched/sch_api.c
--- trunk/net/sched/sch_api.c	2008-02-13 16:23:30.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/net/sched/sch_api.c	2008-02-13 13:20:52.000000000 +0100
@@ -31,6 +31,8 @@
 #include <net/netlink.h>
 #include <net/pkt_sched.h>
 
+#include <rsbac/hooks.h>
+
 static int qdisc_notify(struct sk_buff *oskb, struct nlmsghdr *n, u32 clid,
 			struct Qdisc *old, struct Qdisc *new);
 static int tclass_notify(struct sk_buff *oskb, struct nlmsghdr *n,
@@ -606,9 +608,45 @@ static int tc_get_qdisc(struct sk_buff *
 	struct Qdisc *p = NULL;
 	int err;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_DEV
+        enum  rsbac_adf_request_t     rsbac_request;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+	#if !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	char * rsbac_colon;
+	#endif
+        #endif
+
 	if ((dev = __dev_get_by_index(tcm->tcm_ifindex)) == NULL)
 		return -ENODEV;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET_DEV
+	rsbac_pr_debug(aef, "calling ADF\n");
+	if(n->nlmsg_type == RTM_DELQDISC)
+	  rsbac_request = R_MODIFY_SYSTEM_DATA;
+	else
+	  rsbac_request = R_GET_STATUS_DATA;
+	strncpy(rsbac_target_id.netdev, dev->name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#if !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	rsbac_colon = strchr(rsbac_target_id.netdev, ':');
+	if(rsbac_colon)
+	  *rsbac_colon = 0;
+	#endif
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(rsbac_request,
+				current->pid,
+				T_NETDEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	if (clid) {
 		if (clid != TC_H_ROOT) {
 			if (TC_H_MAJ(clid) != TC_H_MAJ(TC_H_INGRESS)) {
@@ -666,6 +704,15 @@ static int tc_modify_qdisc(struct sk_buf
 	struct Qdisc *q, *p;
 	int err;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_DEV
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+	#if !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	char * rsbac_colon;
+	#endif
+        #endif
+
 replay:
 	/* Reinit, just in case something touches this. */
 	tcm = NLMSG_DATA(n);
@@ -676,6 +723,28 @@ replay:
 	if ((dev = __dev_get_by_index(tcm->tcm_ifindex)) == NULL)
 		return -ENODEV;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET_DEV
+	rsbac_pr_debug(aef, "tc_modify_qdisc(): calling ADF\n");
+	strncpy(rsbac_target_id.netdev, dev->name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#if !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	rsbac_colon = strchr(rsbac_target_id.netdev, ':');
+	if(rsbac_colon)
+	  *rsbac_colon = 0;
+	#endif
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_NETDEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	if (clid) {
 		if (clid != TC_H_ROOT) {
 			if (clid != TC_H_INGRESS) {
@@ -876,6 +945,14 @@ static int tc_dump_qdisc(struct sk_buff 
 	struct net_device *dev;
 	struct Qdisc *q;
 
+#ifdef CONFIG_RSBAC_NET_DEV
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#if !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	char * rsbac_colon;
+#endif
+#endif
+
 	s_idx = cb->args[0];
 	s_q_idx = q_idx = cb->args[1];
 	read_lock(&dev_base_lock);
@@ -885,6 +962,28 @@ static int tc_dump_qdisc(struct sk_buff 
 			goto cont;
 		if (idx > s_idx)
 			s_q_idx = 0;
+
+#ifdef CONFIG_RSBAC_NET_DEV
+		rsbac_pr_debug(aef, "tc_dump_qdisc(): calling ADF\n");
+		strncpy(rsbac_target_id.netdev, dev->name, RSBAC_IFNAMSIZ);
+		rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+#if !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+		rsbac_colon = strchr(rsbac_target_id.netdev, ':');
+		if(rsbac_colon)
+			*rsbac_colon = 0;
+#endif
+		rsbac_attribute_value.dummy = 0;
+		if (!rsbac_adf_request(R_GET_STATUS_DATA,
+					current->pid,
+					T_NETDEV,
+					rsbac_target_id,
+					A_none,
+					rsbac_attribute_value))
+		{
+			continue;
+		}
+#endif
+
 		q_idx = 0;
 		list_for_each_entry(q, &dev->qdisc_list, list) {
 			if (q_idx < s_q_idx) {
@@ -931,9 +1030,40 @@ static int tc_ctl_tclass(struct sk_buff 
 	u32 qid = TC_H_MAJ(clid);
 	int err;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_DEV
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+	#if !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	char * rsbac_colon;
+	#endif
+        #endif
+
 	if ((dev = __dev_get_by_index(tcm->tcm_ifindex)) == NULL)
 		return -ENODEV;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET_DEV
+	rsbac_pr_debug(aef, "tc_ctl_tclass(): calling ADF\n");
+	strncpy(rsbac_target_id.netdev, dev->name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#if !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	rsbac_colon = strchr(rsbac_target_id.netdev, ':');
+	if(rsbac_colon)
+	  *rsbac_colon = 0;
+	#endif
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_NETDEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	/*
 	   parent == TC_H_UNSPEC - unspecified parent.
 	   parent == TC_H_ROOT   - class is root, which has no parent.
@@ -1112,11 +1242,43 @@ static int tc_dump_tclass(struct sk_buff
 	struct tcmsg *tcm = (struct tcmsg*)NLMSG_DATA(cb->nlh);
 	struct qdisc_dump_args arg;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_DEV
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+	#if !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	char * rsbac_colon;
+	#endif
+        #endif
+
 	if (cb->nlh->nlmsg_len < NLMSG_LENGTH(sizeof(*tcm)))
 		return 0;
 	if ((dev = dev_get_by_index(tcm->tcm_ifindex)) == NULL)
 		return 0;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET_DEV
+	rsbac_pr_debug(aef, "calling ADF\n");
+	strncpy(rsbac_target_id.netdev, dev->name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#if !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	rsbac_colon = strchr(rsbac_target_id.netdev, ':');
+	if(rsbac_colon)
+	  *rsbac_colon = 0;
+	#endif
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_NETDEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    dev_put(dev);
+	    return -EPERM;
+	  }
+	#endif
+
 	s_t = cb->args[0];
 	t = 0;
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/net/socket.c linux-2.6.23.14-rsbac-1.3.7/net/socket.c
--- trunk/net/socket.c	2008-02-13 16:24:08.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/net/socket.c	2008-02-13 13:22:00.000000000 +0100
@@ -85,6 +85,12 @@
 #include <linux/audit.h>
 #include <linux/wireless.h>
 
+#ifdef CONFIG_RSBAC
+#include <net/af_unix.h>
+#include <net/scm.h>
+#include <rsbac/hooks.h>
+#endif
+
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
 
@@ -544,6 +550,114 @@ static inline int __sock_sendmsg(struct 
 	struct sock_iocb *si = kiocb_to_siocb(iocb);
 	int err;
 
+        /* RSBAC  */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        enum  rsbac_attribute_t       rsbac_attribute = A_none;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #if defined(CONFIG_RSBAC)
+        rsbac_pr_debug(aef, "[sys_send(), sys_sendto(), sys_sendmsg()]: calling ADF\n");
+        if(   sock->ops
+           && (sock->ops->family == AF_UNIX)
+          )
+          {
+            if(sock->sk) {
+              if(unix_sk(unix_sk(sock->sk)->peer)) {
+                if(   unix_sk(unix_sk(sock->sk)->peer)->dentry
+                   && unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode
+                  ) {
+	          rsbac_target = T_UNIXSOCK;
+                  rsbac_target_id.unixsock.device = unix_sk(unix_sk(sock->sk)->peer)->dentry->d_sb->s_dev;
+                  rsbac_target_id.unixsock.inode  = unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode->i_ino;
+                  rsbac_target_id.unixsock.dentry_p = unix_sk(unix_sk(sock->sk)->peer)->dentry;
+                } else {
+                  rsbac_target = T_IPC;
+                  rsbac_target_id.ipc.type = I_anonunix;
+                  if(   unix_sk(unix_sk(sock->sk)->peer)->dentry
+                     && unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode
+                     && SOCKET_I(unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode)->file
+                     && SOCKET_I(unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode)->file->f_dentry
+                     && SOCKET_I(unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode)->file->f_dentry->d_inode
+                    )
+			rsbac_target_id.ipc.id.id_nr = SOCKET_I(unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode)->file->f_dentry->d_inode->i_ino;
+		  else
+		    if(sock->file
+		       && sock->file->f_dentry
+		       && sock->file->f_dentry->d_inode
+		      )
+	              rsbac_target_id.ipc.id.id_nr = sock->file->f_dentry->d_inode->i_ino;
+	            else
+	              rsbac_target_id.ipc.id.id_nr = 0;
+                }
+	      } else {
+                if(   unix_sk(sock->sk)->dentry
+                   && unix_sk(sock->sk)->dentry->d_inode
+                  ) {
+	          rsbac_target = T_UNIXSOCK;
+                  rsbac_target_id.unixsock.device = unix_sk(sock->sk)->dentry->d_sb->s_dev;
+                  rsbac_target_id.unixsock.inode  = unix_sk(sock->sk)->dentry->d_inode->i_ino;
+                  rsbac_target_id.unixsock.dentry_p = unix_sk(sock->sk)->dentry;
+                } else {
+                  rsbac_target = T_IPC;
+                  rsbac_target_id.ipc.type = I_anonunix;
+		  if(sock->file
+		     && sock->file->f_dentry
+		     && sock->file->f_dentry->d_inode
+		    )
+	            rsbac_target_id.ipc.id.id_nr = sock->file->f_dentry->d_inode->i_ino;
+	          else
+	            rsbac_target_id.ipc.id.id_nr = 0;
+                }
+	      }
+              if (sock->sk->sk_peercred.pid) {
+	            rsbac_attribute = A_process;
+	            rsbac_attribute_value.process = sock->sk->sk_peercred.pid;
+              } else if(unix_sk(sock->sk)->peer
+                        && unix_sk(sock->sk)->peer->sk_peercred.pid) {
+	            rsbac_attribute = A_process;
+	            rsbac_attribute_value.process = unix_sk(sock->sk)->peer->sk_peercred.pid;
+	      } else {
+	            rsbac_attribute = A_sock_type;
+		    rsbac_attribute_value.sock_type = sock->type;
+	      }
+	    }
+          }
+        #if defined(CONFIG_RSBAC_NET_OBJ)
+        else
+          {
+            #if !defined(CONFIG_RSBAC_NET_OBJ_RW)
+            if(sock->type != SOCK_STREAM)
+            #endif
+            {
+              rsbac_target = T_NETOBJ;
+              rsbac_target_id.netobj.sock_p = sock;
+              rsbac_target_id.netobj.local_addr = NULL;
+              rsbac_target_id.netobj.local_len = 0;
+              rsbac_target_id.netobj.remote_addr = msg->msg_name;
+              rsbac_target_id.netobj.remote_len = msg->msg_namelen;
+              rsbac_attribute = A_sock_type;
+              rsbac_attribute_value.sock_type = sock->type;
+            }
+          }
+        #endif
+        if (   (rsbac_target != T_NONE)
+            && !rsbac_adf_request(R_SEND,
+                                  current->pid,
+                                  rsbac_target,
+                                  rsbac_target_id,
+                                  rsbac_attribute,
+                                  rsbac_attribute_value)
+           )
+              {
+                return -EPERM;
+              }
+        #endif
+
 	si->sock = sock;
 	si->scm = NULL;
 	si->msg = msg;
@@ -553,7 +667,31 @@ static inline int __sock_sendmsg(struct 
 	if (err)
 		return err;
 
-	return sock->ops->sendmsg(iocb, sock, msg, size);
+	err = sock->ops->sendmsg(iocb, sock, msg, size);
+
+        /* RSBAC: notify ADF of sent msg */
+        #ifdef CONFIG_RSBAC
+        if(   !err
+           && (rsbac_target != T_NONE)
+          )
+          {
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(R_SEND,
+                                   current->pid,
+                                   rsbac_target,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   rsbac_attribute,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sock_sendmsg() [sys_send(), sys_sendto(), sys_sendmsg()]: rsbac_adf_set_attr() returned error\n");
+              }
+          }
+        #endif
+
+	return err;
 }
 
 int sock_sendmsg(struct socket *sock, struct msghdr *msg, size_t size)
@@ -625,6 +763,15 @@ static inline int __sock_recvmsg(struct 
 	int err;
 	struct sock_iocb *si = kiocb_to_siocb(iocb);
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        enum  rsbac_attribute_t       rsbac_attribute = A_none;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	si->sock = sock;
 	si->scm = NULL;
 	si->msg = msg;
@@ -635,7 +782,131 @@ static inline int __sock_recvmsg(struct 
 	if (err)
 		return err;
 
-	return sock->ops->recvmsg(iocb, sock, msg, size, flags);
+	err = sock->ops->recvmsg(iocb, sock, msg, size, flags);
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "[sys_recv(), sys_recvfrom(), sys_recvmsg()]: calling ADF\n");
+        if(   sock->ops
+           && (sock->ops->family == AF_UNIX)
+          )
+          {
+            if(sock->sk) {
+              if(unix_sk(unix_sk(sock->sk)->peer)) {
+                if(   unix_sk(unix_sk(sock->sk)->peer)->dentry
+                   && unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode
+                  ) {
+	          rsbac_target = T_UNIXSOCK;
+                  rsbac_target_id.unixsock.device = unix_sk(unix_sk(sock->sk)->peer)->dentry->d_sb->s_dev;
+                  rsbac_target_id.unixsock.inode  = unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode->i_ino;
+                  rsbac_target_id.unixsock.dentry_p = unix_sk(unix_sk(sock->sk)->peer)->dentry;
+                } else {
+                  rsbac_target = T_IPC;
+                  rsbac_target_id.ipc.type = I_anonunix;
+                  if(   unix_sk(unix_sk(sock->sk)->peer)->dentry
+                     && unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode
+                     && SOCKET_I(unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode)->file
+                     && SOCKET_I(unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode)->file->f_dentry
+                     && SOCKET_I(unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode)->file->f_dentry->d_inode
+                    )
+			rsbac_target_id.ipc.id.id_nr = SOCKET_I(unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode)->file->f_dentry->d_inode->i_ino;
+		  else
+		    if(sock->file
+		       && sock->file->f_dentry
+		       && sock->file->f_dentry->d_inode
+		      )
+	              rsbac_target_id.ipc.id.id_nr = sock->file->f_dentry->d_inode->i_ino;
+	            else
+	              rsbac_target_id.ipc.id.id_nr = 0;
+                }
+	      } else {
+                if(   unix_sk(sock->sk)->dentry
+                   && unix_sk(sock->sk)->dentry->d_inode
+                  ) {
+	          rsbac_target = T_UNIXSOCK;
+                  rsbac_target_id.unixsock.device = unix_sk(sock->sk)->dentry->d_sb->s_dev;
+                  rsbac_target_id.unixsock.inode  = unix_sk(sock->sk)->dentry->d_inode->i_ino;
+                  rsbac_target_id.unixsock.dentry_p = unix_sk(sock->sk)->dentry;
+                } else {
+                  rsbac_target = T_IPC;
+                  rsbac_target_id.ipc.type = I_anonunix;
+		  if(sock->file
+		     && sock->file->f_dentry
+		     && sock->file->f_dentry->d_inode
+		    )
+	            rsbac_target_id.ipc.id.id_nr = sock->file->f_dentry->d_inode->i_ino;
+	          else
+	            rsbac_target_id.ipc.id.id_nr = 0;
+                }
+	      }
+              if (sock->sk->sk_peercred.pid) {
+	            rsbac_attribute = A_process;
+	            rsbac_attribute_value.process = sock->sk->sk_peercred.pid;
+	      } else if (si->scm && si->scm->creds.pid) {
+	            rsbac_attribute = A_process;
+	            rsbac_attribute_value.process = si->scm->creds.pid;
+	      } else {
+	            rsbac_attribute = A_sock_type;
+		    rsbac_attribute_value.sock_type = sock->type;
+	      }
+	    }
+          }
+        #if defined(CONFIG_RSBAC_NET_OBJ)
+        else
+          {
+            #if !defined(CONFIG_RSBAC_NET_OBJ_RW)
+            if(sock->type != SOCK_STREAM)
+            #endif
+            {
+              rsbac_target = T_NETOBJ;
+              rsbac_target_id.netobj.sock_p = sock;
+              rsbac_target_id.netobj.local_addr = NULL;
+              rsbac_target_id.netobj.local_len = 0;
+              rsbac_target_id.netobj.remote_addr = msg->msg_name;
+              rsbac_target_id.netobj.remote_len = msg->msg_namelen;
+              rsbac_attribute = A_sock_type;
+              rsbac_attribute_value.sock_type = sock->type;
+            }
+          }
+        #endif
+        if (   (rsbac_target != T_NONE)
+            && !rsbac_adf_request(R_RECEIVE,
+                                   current->pid,
+                                   rsbac_target,
+                                   rsbac_target_id,
+                                   rsbac_attribute,
+                                   rsbac_attribute_value))
+              {
+                /* clear buffer */
+                if(err > 0)
+                  memset(msg->msg_iov->iov_base - err, 0, err);
+                return -EPERM;
+              }
+        #endif
+
+        /* RSBAC: notify ADF of received message */
+        #ifdef CONFIG_RSBAC
+        if(   !err
+           && (rsbac_target != T_NONE)
+          )
+          {
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(R_RECEIVE,
+                                   current->pid,
+                                   rsbac_target,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   rsbac_attribute,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sock_recvmsg() [sys_recv(), sys_recvfrom(), sys_recvmsg()]: rsbac_adf_set_attr() for RECEIVE returned error\n");
+              }
+          }
+        #endif
+
+	return err;
 }
 
 int sock_recvmsg(struct socket *sock, struct msghdr *msg,
@@ -1199,14 +1470,78 @@ asmlinkage long sys_socket(int family, i
 	int retval;
 	struct socket *sock;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union  rsbac_target_id_t       rsbac_target_id;
+        union  rsbac_target_id_t       rsbac_new_target_id;
+        union  rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	retval = sock_create(family, type, protocol, &sock);
 	if (retval < 0)
 		goto out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        if(family == AF_UNIX)
+          {
+            rsbac_target = T_IPC;
+            rsbac_target_id.ipc.type = I_anonunix;
+            rsbac_target_id.ipc.id.id_nr = SOCK_INODE(sock)->i_ino;
+          }
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        else
+          {
+            rsbac_pr_debug(aef, "[sys_socketcall()]: calling ADF\n");
+            rsbac_target = T_NETOBJ;
+            rsbac_target_id.netobj.sock_p = sock;
+            rsbac_target_id.netobj.local_addr = NULL;
+            rsbac_target_id.netobj.local_len = 0;
+            rsbac_target_id.netobj.remote_addr = NULL;
+            rsbac_target_id.netobj.remote_len = 0;
+          }
+        #endif
+        rsbac_attribute_value.sock_type = type;
+        if (   (rsbac_target != T_NONE)
+            && !rsbac_adf_request(R_CREATE,
+                                  current->pid,
+                                  rsbac_target,
+                                  rsbac_target_id,
+                                  A_sock_type,
+                                  rsbac_attribute_value)
+           )
+              {
+                rsbac_pr_debug(aef, "[sys_socketcall()]: ADF returned NOT_GRANTED\n");
+                retval = -EPERM;
+                goto out_release;
+              }
+        #endif
+
 	retval = sock_map_fd(sock);
 	if (retval < 0)
 		goto out_release;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        if(rsbac_target != T_NONE)
+          {
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(R_CREATE,
+                                   current->pid,
+                                   rsbac_target,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_sock_type,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sys_socket() [sys_socketcall()]: rsbac_adf_set_attr() returned error\n");
+              }
+          }
+        #endif
+
 out:
 	/* It may be already another descriptor 8) Not kernel problem. */
 	return retval;
@@ -1227,6 +1562,13 @@ asmlinkage long sys_socketpair(int famil
 	int fd1, fd2, err;
 	struct file *newfile1, *newfile2;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	/*
 	 * Obtain the first socket and check if the underlying protocol
 	 * supports the socketpair call.
@@ -1236,10 +1578,47 @@ asmlinkage long sys_socketpair(int famil
 	if (err < 0)
 		goto out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "[sys_socketcall()]: calling ADF\n");
+        rsbac_target_id.ipc.type = I_anonunix;
+        rsbac_target_id.ipc.id.id_nr = SOCK_INODE(sock1)->i_ino;
+        rsbac_attribute_value.sock_type = type;
+        if (!rsbac_adf_request(R_CREATE,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               A_sock_type,
+                               rsbac_attribute_value))
+          {
+                rsbac_pr_debug(aef, "[sys_socketcall()]: ADF returned NOT_GRANTED\n");
+                err = -EPERM;
+                goto out_release_1;
+          }
+        #endif
+
 	err = sock_create(family, type, protocol, &sock2);
 	if (err < 0)
 		goto out_release_1;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_pr_debug(aef, "[sys_socketcall()]: calling ADF\n");
+        rsbac_target_id.ipc.type = I_anonunix;
+        rsbac_target_id.ipc.id.id_nr = SOCK_INODE(sock2)->i_ino;
+        if (!rsbac_adf_request(R_CREATE,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               A_sock_type,
+                               rsbac_attribute_value))
+          {
+                rsbac_pr_debug(aef, "[sys_socketcall()]: ADF returned NOT_GRANTED\n");
+                err = -EPERM;
+                goto out_release_both;
+          }
+        #endif
+
 	err = sock1->ops->socketpair(sock1, sock2);
 	if (err < 0)
 		goto out_release_both;
@@ -1285,8 +1664,42 @@ asmlinkage long sys_socketpair(int famil
 	err = put_user(fd1, &usockvec[0]);
 	if (!err)
 		err = put_user(fd2, &usockvec[1]);
-	if (!err)
+
+	if (!err) {
+	        /* RSBAC: notify ADF of new anonunix */
+	        #ifdef CONFIG_RSBAC
+	        rsbac_target_id.ipc.id.id_nr = SOCK_INODE(sock1)->i_ino;
+	        rsbac_new_target_id.dummy = 0;
+	        if (rsbac_adf_set_attr(R_CREATE,
+	                               current->pid,
+	                               T_IPC,
+	                               rsbac_target_id,
+	                               T_NONE,
+	                               rsbac_new_target_id,
+	                               A_sock_type,
+	                               rsbac_attribute_value))
+	          {
+	            rsbac_printk(KERN_WARNING
+	                   "sys_socketpair() [sys_socketcall()]: rsbac_adf_set_attr() for sock1 returned error\n");
+	          }
+	        rsbac_target_id.ipc.id.id_nr = SOCK_INODE(sock2)->i_ino;
+	        rsbac_new_target_id.dummy = 0;
+	        if (rsbac_adf_set_attr(R_CREATE,
+	                               current->pid,
+	                               T_IPC,
+	                               rsbac_target_id,
+	                               T_NONE,
+	                               rsbac_new_target_id,
+	                               A_sock_type,
+	                               rsbac_attribute_value))
+	          {
+	            rsbac_printk(KERN_WARNING
+	                   "sys_socketpair() [sys_socketcall()]: rsbac_adf_set_attr() for sock2 returned error\n");
+	          }
+	        #endif
+
 		return 0;
+        }
 
 	sys_close(fd2);
 	sys_close(fd1);
@@ -1325,10 +1738,39 @@ asmlinkage long sys_bind(int fd, struct 
 	char address[MAX_SOCK_ADDR];
 	int err, fput_needed;
 
+#ifdef CONFIG_RSBAC_NET_OBJ
+	union rsbac_target_id_t rsbac_target_id;
+	union rsbac_target_id_t	rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	sock = sockfd_lookup_light(fd, &err, &fput_needed);
 	if (sock) {
 		err = move_addr_to_kernel(umyaddr, addrlen, address);
-		if (err >= 0) {
+		if(err >= 0) {
+                        #ifdef CONFIG_RSBAC_NET_OBJ
+		        if(   sock->ops
+		           && (sock->ops->family != AF_UNIX)) {
+				rsbac_target_id.netobj.sock_p = sock;
+				rsbac_target_id.netobj.local_addr = address;
+				rsbac_target_id.netobj.local_len = addrlen;
+				rsbac_target_id.netobj.remote_addr = NULL;
+				rsbac_target_id.netobj.remote_len = 0;
+				rsbac_attribute_value.sock_type = sock->type;
+				rsbac_pr_debug(aef, "[sys_socketcall()]: calling ADF");
+				if(!rsbac_adf_request(R_BIND,
+							current->pid,
+							T_NETOBJ,
+							rsbac_target_id,
+							A_sock_type,
+							rsbac_attribute_value)) {
+					rsbac_pr_debug(aef, "[sys_socketcall()]: ADF returned NOT_GRANTED\n");
+					fput_light(sock->file, fput_needed);
+					return -EPERM;
+				}
+			}
+                        #endif
+
 			err = security_socket_bind(sock,
 						   (struct sockaddr *)address,
 						   addrlen);
@@ -1336,6 +1778,27 @@ asmlinkage long sys_bind(int fd, struct 
 				err = sock->ops->bind(sock,
 						      (struct sockaddr *)
 						      address, addrlen);
+
+                        /* RSBAC: notify ADF of binding */
+                        #ifdef CONFIG_RSBAC_NET_OBJ
+                        if(   !err
+			   && sock->ops
+		           && (sock->ops->family != AF_UNIX)) {
+                            rsbac_new_target_id.dummy = 0;
+                            if (rsbac_adf_set_attr(R_BIND,
+                                                   current->pid,
+                                                   T_NETOBJ,
+                                                   rsbac_target_id,
+                                                   T_NONE,
+                                                   rsbac_new_target_id,
+                                                   A_sock_type,
+                                                   rsbac_attribute_value))
+                              {
+                                rsbac_printk(KERN_WARNING
+                                       "sys_bind() [sys_socketcall()]: rsbac_adf_set_attr() returned error\n");
+                              }
+                          }
+                        #endif
 		}
 		fput_light(sock->file, fput_needed);
 	}
@@ -1354,9 +1817,60 @@ asmlinkage long sys_listen(int fd, int b
 {
 	struct socket *sock;
 	int err, fput_needed;
-
+	
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target = T_NONE;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+	
 	sock = sockfd_lookup_light(fd, &err, &fput_needed);
 	if (sock) {
+#ifdef CONFIG_RSBAC
+		rsbac_pr_debug(aef, "[sys_socketcall()]: calling ADF\n");
+		if(   sock->ops
+				&& (sock->ops->family == AF_UNIX)
+				&& sock->file
+				&& sock->file->f_dentry
+				&& sock->file->f_dentry->d_inode
+		  )
+		{
+			if (sock->file->f_dentry->d_sb->s_magic == SOCKFS_MAGIC) {
+				rsbac_target = T_IPC;
+				rsbac_target_id.ipc.type = I_anonunix;
+				rsbac_target_id.ipc.id.id_nr = sock->file->f_dentry->d_inode->i_ino;
+			} else {
+				rsbac_target = T_UNIXSOCK;
+				rsbac_target_id.unixsock.device = sock->file->f_dentry->d_sb->s_dev;
+				rsbac_target_id.unixsock.inode  = sock->file->f_dentry->d_inode->i_ino;
+				rsbac_target_id.unixsock.dentry_p = sock->file->f_dentry;
+			}
+		}
+#ifdef CONFIG_RSBAC_NET_OBJ
+		else {
+			rsbac_target = T_NETOBJ;
+			rsbac_target_id.netobj.sock_p = sock;
+			rsbac_target_id.netobj.local_addr = NULL;
+			rsbac_target_id.netobj.local_len = 0;
+			rsbac_target_id.netobj.remote_addr = NULL;
+			rsbac_target_id.netobj.remote_len = 0;
+		}
+#endif
+		rsbac_attribute_value.sock_type = sock->type;
+		if (   (rsbac_target != T_NONE)
+				&& !rsbac_adf_request(R_LISTEN,
+					current->pid,
+					rsbac_target,
+					rsbac_target_id,
+					A_sock_type,
+					rsbac_attribute_value)) {
+			rsbac_pr_debug(aef, "[sys_socketcall()]: ADF returned NOT_GRANTED\n");
+			fput_light(sock->file, fput_needed);
+			return -EPERM;
+		}
+#endif
+
 		if ((unsigned)backlog > sysctl_somaxconn)
 			backlog = sysctl_somaxconn;
 
@@ -1364,6 +1878,24 @@ asmlinkage long sys_listen(int fd, int b
 		if (!err)
 			err = sock->ops->listen(sock, backlog);
 
+
+		/* RSBAC: notify ADF of listened socket */
+#ifdef CONFIG_RSBAC
+		if(!err && (rsbac_target != T_NONE)) {
+			rsbac_new_target_id.dummy = 0;
+			if (rsbac_adf_set_attr(R_LISTEN,
+						current->pid,
+						rsbac_target,
+						rsbac_target_id,
+						T_NONE,
+						rsbac_new_target_id,
+						A_sock_type,
+						rsbac_attribute_value))
+				rsbac_printk(KERN_WARNING
+						"sys_listen() [sys_socketcall()]: rsbac_adf_set_attr() returned error\n");
+		}
+#endif
+
 		fput_light(sock->file, fput_needed);
 	}
 	return err;
@@ -1389,6 +1921,14 @@ asmlinkage long sys_accept(int fd, struc
 	int err, len, newfd, fput_needed;
 	char address[MAX_SOCK_ADDR];
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target = T_NONE;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	enum  rsbac_attribute_t       rsbac_attribute = A_none;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	sock = sockfd_lookup_light(fd, &err, &fput_needed);
 	if (!sock)
 		goto out;
@@ -1425,6 +1965,105 @@ asmlinkage long sys_accept(int fd, struc
 	if (err < 0)
 		goto out_fd;
 
+#ifdef CONFIG_RSBAC
+	rsbac_pr_debug(aef, "[sys_socketcall()]: calling ADF\n");
+	if(   sock->ops
+		&& (sock->ops->family == AF_UNIX)
+	  )
+	  {
+            if(sock->sk) {
+              if(unix_sk(unix_sk(sock->sk)->peer)) {
+                if(   unix_sk(unix_sk(sock->sk)->peer)->dentry
+                   && unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode
+                  ) {
+	          rsbac_target = T_UNIXSOCK;
+                  rsbac_target_id.unixsock.device = unix_sk(unix_sk(sock->sk)->peer)->dentry->d_sb->s_dev;
+                  rsbac_target_id.unixsock.inode  = unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode->i_ino;
+                  rsbac_target_id.unixsock.dentry_p = unix_sk(unix_sk(sock->sk)->peer)->dentry;
+                } else {
+                  rsbac_target = T_IPC;
+                  rsbac_target_id.ipc.type = I_anonunix;
+                  if(   unix_sk(unix_sk(sock->sk)->peer)->dentry
+                     && unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode
+                     && SOCKET_I(unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode)->file
+                     && SOCKET_I(unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode)->file->f_dentry
+                     && SOCKET_I(unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode)->file->f_dentry->d_inode
+                    )
+			rsbac_target_id.ipc.id.id_nr = SOCKET_I(unix_sk(unix_sk(sock->sk)->peer)->dentry->d_inode)->file->f_dentry->d_inode->i_ino;
+		  else
+		    if(sock->file
+		       && sock->file->f_dentry
+		       && sock->file->f_dentry->d_inode
+		      )
+	              rsbac_target_id.ipc.id.id_nr = sock->file->f_dentry->d_inode->i_ino;
+	            else
+	              rsbac_target_id.ipc.id.id_nr = 0;
+                }
+	      } else {
+                if(   unix_sk(sock->sk)->dentry
+                   && unix_sk(sock->sk)->dentry->d_inode
+                  ) {
+	          rsbac_target = T_UNIXSOCK;
+                  rsbac_target_id.unixsock.device = unix_sk(sock->sk)->dentry->d_sb->s_dev;
+                  rsbac_target_id.unixsock.inode  = unix_sk(sock->sk)->dentry->d_inode->i_ino;
+                  rsbac_target_id.unixsock.dentry_p = unix_sk(sock->sk)->dentry;
+                } else {
+                  rsbac_target = T_IPC;
+                  rsbac_target_id.ipc.type = I_anonunix;
+		  if(sock->file
+		     && sock->file->f_dentry
+		     && sock->file->f_dentry->d_inode
+		    )
+	            rsbac_target_id.ipc.id.id_nr = sock->file->f_dentry->d_inode->i_ino;
+	          else
+	            rsbac_target_id.ipc.id.id_nr = 0;
+                }
+	      }
+	    }
+            if (sock->sk
+		    && sock->sk->sk_peercred.pid
+		) {
+	            rsbac_attribute = A_process;
+	            rsbac_attribute_value.process = sock->sk->sk_peercred.pid;
+	    } else {
+	            rsbac_attribute = A_sock_type;
+		    rsbac_attribute_value.sock_type = sock->type;
+	    }
+	  }
+#ifdef CONFIG_RSBAC_NET_OBJ
+	else
+	  {
+		rsbac_target = T_NETOBJ;
+		rsbac_target_id.netobj.sock_p = newsock;
+		rsbac_target_id.netobj.local_addr = NULL;
+		rsbac_target_id.netobj.local_len = 0;
+		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0)
+		{
+			rsbac_target_id.netobj.remote_addr = NULL;
+			rsbac_target_id.netobj.remote_len = 0;
+		}
+		else
+		{
+			rsbac_target_id.netobj.remote_addr = address;
+			rsbac_target_id.netobj.remote_len = len;
+		}
+		rsbac_attribute = A_sock_type;
+		rsbac_attribute_value.sock_type = sock->type;
+	}
+#endif
+	if (   (rsbac_target != T_NONE)
+			&& !rsbac_adf_request(R_ACCEPT,
+				current->pid,
+				rsbac_target,
+				rsbac_target_id,
+				rsbac_attribute,
+				rsbac_attribute_value)) {
+		rsbac_pr_debug(aef, "[sys_socketcall()]: ADF returned NOT_GRANTED\n");
+		err = -EPERM;
+		goto out_fd;
+	}
+#endif
+
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)address,
 					  &len, 2) < 0) {
@@ -1444,6 +2083,23 @@ asmlinkage long sys_accept(int fd, struc
 
 	security_socket_post_accept(sock, newsock);
 
+        /* RSBAC: notify ADF of accepted connection */
+#ifdef CONFIG_RSBAC
+	if(rsbac_target != T_NONE) {
+		rsbac_new_target_id.dummy = 0;
+		if (rsbac_adf_set_attr(R_ACCEPT,
+					current->pid,
+					rsbac_target,
+					rsbac_target_id,
+					T_NONE,
+					rsbac_new_target_id,
+					rsbac_attribute,
+					rsbac_attribute_value))
+			rsbac_printk(KERN_WARNING
+					"sys_accept() [sys_socketcall()]: rsbac_adf_set_attr() returned error\n");
+	}
+#endif
+
 out_put:
 	fput_light(sock->file, fput_needed);
 out:
@@ -1478,6 +2134,12 @@ asmlinkage long sys_connect(int fd, stru
 	char address[MAX_SOCK_ADDR];
 	int err, fput_needed;
 
+#ifdef CONFIG_RSBAC_NET_OBJ
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	sock = sockfd_lookup_light(fd, &err, &fput_needed);
 	if (!sock)
 		goto out;
@@ -1490,8 +2152,58 @@ asmlinkage long sys_connect(int fd, stru
 	if (err)
 		goto out_put;
 
+        /* RSBAC */
+        /* UNIX socket connects get intercepted in unix/af_unix.c */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        if(   sock->ops
+           && (sock->ops->family != AF_UNIX)
+          )
+          {
+            rsbac_pr_debug(aef, "[sys_socketcall()]: calling ADF\n");
+            rsbac_target_id.netobj.sock_p = sock;
+            rsbac_target_id.netobj.local_addr = NULL;
+            rsbac_target_id.netobj.local_len = 0;
+            rsbac_target_id.netobj.remote_addr = address;
+            rsbac_target_id.netobj.remote_len = addrlen;
+            rsbac_attribute_value.sock_type = sock->type;
+            if (!rsbac_adf_request(R_CONNECT,
+                                   current->pid,
+                                   T_NETOBJ,
+                                   rsbac_target_id,
+                                   A_sock_type,
+                                   rsbac_attribute_value))
+              {
+                rsbac_pr_debug(aef, "[sys_socketcall()]: ADF returned NOT_GRANTED\n");
+                err = -EPERM;
+                goto out_put;
+              }
+          }
+        #endif
+
 	err = sock->ops->connect(sock, (struct sockaddr *)address, addrlen,
 				 sock->file->f_flags);
+
+        /* RSBAC: notify ADF of opened socket connection */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        if(!err
+	   && sock->ops
+           && (sock->ops->family != AF_UNIX)
+	  )
+          {
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(R_CONNECT,
+                                   current->pid,
+                                   T_NETOBJ,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_sock_type,
+                                   rsbac_attribute_value))
+		rsbac_printk(KERN_WARNING
+                       "sys_connect() [sys_socketcall()]: rsbac_adf_set_attr() returned error\n");
+          }
+        #endif
+
 out_put:
 	fput_light(sock->file, fput_needed);
 out:
@@ -1510,6 +2222,12 @@ asmlinkage long sys_getsockname(int fd, 
 	char address[MAX_SOCK_ADDR];
 	int len, err, fput_needed;
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target = T_NONE;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	sock = sockfd_lookup_light(fd, &err, &fput_needed);
 	if (!sock)
 		goto out;
@@ -1518,6 +2236,51 @@ asmlinkage long sys_getsockname(int fd, 
 	if (err)
 		goto out_put;
 
+        /* RSBAC */
+        #if defined(CONFIG_RSBAC)
+	rsbac_pr_debug(aef, "calling ADF\n");
+        if(   sock->ops
+           && (sock->ops->family == AF_UNIX)
+           && sock->file
+           && sock->file->f_dentry
+           && sock->file->f_dentry->d_inode
+          )
+          {
+            if (sock->file->f_dentry->d_sb->s_magic == SOCKFS_MAGIC) {
+                  rsbac_target = T_IPC;
+                  rsbac_target_id.ipc.type = I_anonunix;
+                  rsbac_target_id.ipc.id.id_nr = sock->file->f_dentry->d_inode->i_ino;
+            } else {
+	          rsbac_target = T_UNIXSOCK;
+                  rsbac_target_id.unixsock.device = sock->file->f_dentry->d_sb->s_dev;
+                  rsbac_target_id.unixsock.inode  = sock->file->f_dentry->d_inode->i_ino;
+                  rsbac_target_id.unixsock.dentry_p = sock->file->f_dentry;
+            }
+          }
+	#ifdef CONFIG_RSBAC_NET_OBJ
+	else
+          {
+	    rsbac_target = T_NETOBJ;
+            rsbac_target_id.netobj.sock_p = sock;
+            rsbac_target_id.netobj.local_addr = NULL;
+            rsbac_target_id.netobj.local_len = 0;
+            rsbac_target_id.netobj.remote_addr = NULL;
+            rsbac_target_id.netobj.remote_len = 0;
+	  }
+	#endif
+	rsbac_attribute_value.sock_type = sock->type;
+	if (   (rsbac_target != T_NONE)
+	    && !rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				rsbac_target,
+				rsbac_target_id,
+				A_sock_type,
+				rsbac_attribute_value)) {
+		err = -EPERM;
+		goto out_put;
+	}
+	#endif
+
 	err = sock->ops->getname(sock, (struct sockaddr *)address, &len, 0);
 	if (err)
 		goto out_put;
@@ -1541,6 +2304,12 @@ asmlinkage long sys_getpeername(int fd, 
 	char address[MAX_SOCK_ADDR];
 	int len, err, fput_needed;
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target = T_NONE;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	sock = sockfd_lookup_light(fd, &err, &fput_needed);
 	if (sock != NULL) {
 		err = security_socket_getpeername(sock);
@@ -1549,6 +2318,50 @@ asmlinkage long sys_getpeername(int fd, 
 			return err;
 		}
 
+	        /* RSBAC */
+	        #if defined(CONFIG_RSBAC)
+		rsbac_pr_debug(aef, "calling ADF\n");
+	        if(   sock->ops
+	           && (sock->ops->family == AF_UNIX)
+	           && sock->file
+	           && sock->file->f_dentry
+	           && sock->file->f_dentry->d_inode
+	          )
+	          {
+	            if (sock->file->f_dentry->d_sb->s_magic == SOCKFS_MAGIC) {
+	                  rsbac_target = T_IPC;
+	                  rsbac_target_id.ipc.type = I_anonunix;
+	                  rsbac_target_id.ipc.id.id_nr = sock->file->f_dentry->d_inode->i_ino;
+	            } else {
+			rsbac_target = T_UNIXSOCK;
+			rsbac_target_id.unixsock.device = sock->file->f_dentry->d_sb->s_dev;
+			rsbac_target_id.unixsock.inode  = sock->file->f_dentry->d_inode->i_ino;
+			rsbac_target_id.unixsock.dentry_p = sock->file->f_dentry;
+	            }
+	          }
+                #ifdef CONFIG_RSBAC_NET_OBJ
+                else {
+			rsbac_target = T_NETOBJ;
+			rsbac_target_id.netobj.sock_p = sock;
+			rsbac_target_id.netobj.local_addr = NULL;
+			rsbac_target_id.netobj.local_len = 0;
+			rsbac_target_id.netobj.remote_addr = NULL;
+			rsbac_target_id.netobj.remote_len = 0;
+		}
+		#endif
+		rsbac_attribute_value.sock_type = sock->type;
+		if (   (rsbac_target != T_NONE)
+		    && !rsbac_adf_request(R_GET_STATUS_DATA,
+					current->pid,
+					rsbac_target,
+					rsbac_target_id,
+					A_sock_type,
+					rsbac_attribute_value)) {
+			fput_light(sock->file, fput_needed);
+			return -EPERM;
+		}
+	        #endif
+
 		err =
 		    sock->ops->getname(sock, (struct sockaddr *)address, &len,
 				       1);
@@ -1692,6 +2505,13 @@ asmlinkage long sys_setsockopt(int fd, i
 	int err, fput_needed;
 	struct socket *sock;
 
+        /* RSBAC  */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (optlen < 0)
 		return -EINVAL;
 
@@ -1701,6 +2521,50 @@ asmlinkage long sys_setsockopt(int fd, i
 		if (err)
 			goto out_put;
 
+	        /* RSBAC */
+	        #if defined(CONFIG_RSBAC)
+		rsbac_pr_debug(aef, "calling ADF\n");
+	        if(   sock->ops
+	           && (sock->ops->family == AF_UNIX)
+	           && sock->file
+	           && sock->file->f_dentry
+	           && sock->file->f_dentry->d_inode
+	          )
+	          {
+	            if (sock->file->f_dentry->d_sb->s_magic == SOCKFS_MAGIC) {
+	                  rsbac_target = T_IPC;
+	                  rsbac_target_id.ipc.type = I_anonunix;
+	                  rsbac_target_id.ipc.id.id_nr = sock->file->f_dentry->d_inode->i_ino;
+	            } else {
+		          rsbac_target = T_UNIXSOCK;
+	                  rsbac_target_id.unixsock.device = sock->file->f_dentry->d_sb->s_dev;
+	                  rsbac_target_id.unixsock.inode  = sock->file->f_dentry->d_inode->i_ino;
+	                  rsbac_target_id.unixsock.dentry_p = sock->file->f_dentry;
+	            }
+	          }
+                #ifdef CONFIG_RSBAC_NET_OBJ
+                else {
+			rsbac_target = T_NETOBJ;
+			rsbac_target_id.netobj.sock_p = sock;
+			rsbac_target_id.netobj.local_addr = NULL;
+			rsbac_target_id.netobj.local_len = 0;
+			rsbac_target_id.netobj.remote_addr = NULL;
+			rsbac_target_id.netobj.remote_len = 0;
+		}
+		#endif
+		rsbac_attribute_value.setsockopt_level = level;
+		if (   (rsbac_target != T_NONE)
+		    && !rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+					current->pid,
+					rsbac_target,
+					rsbac_target_id,
+					A_setsockopt_level,
+					rsbac_attribute_value)) {
+			err = -EPERM;
+			goto out_put;
+		}
+	        #endif
+
 		if (level == SOL_SOCKET)
 			err =
 			    sock_setsockopt(sock, level, optname, optval,
@@ -1726,12 +2590,64 @@ asmlinkage long sys_getsockopt(int fd, i
 	int err, fput_needed;
 	struct socket *sock;
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target = T_NONE;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	sock = sockfd_lookup_light(fd, &err, &fput_needed);
 	if (sock != NULL) {
 		err = security_socket_getsockopt(sock, level, optname);
 		if (err)
 			goto out_put;
 
+#if defined(CONFIG_RSBAC)
+		rsbac_pr_debug(aef, "calling ADF\n");
+		if(   sock->ops
+				&& (sock->ops->family == AF_UNIX)
+				&& sock->file
+				&& sock->file->f_dentry
+				&& sock->file->f_dentry->d_inode
+				&& sock->file->f_dentry->d_inode->i_ino
+				&& sock->file->f_dentry->d_sb
+				&& sock->file->f_dentry->d_sb->s_dev
+		  )
+		{
+			if (sock->file->f_dentry->d_sb->s_magic == SOCKFS_MAGIC) {
+				rsbac_target = T_IPC;
+				rsbac_target_id.ipc.type = I_anonunix;
+				rsbac_target_id.ipc.id.id_nr = sock->file->f_dentry->d_inode->i_ino;
+			} else {
+				rsbac_target = T_UNIXSOCK;
+				rsbac_target_id.unixsock.device = sock->file->f_dentry->d_sb->s_dev;
+				rsbac_target_id.unixsock.inode  = sock->file->f_dentry->d_inode->i_ino;
+				rsbac_target_id.unixsock.dentry_p = sock->file->f_dentry;
+			}
+		}
+#ifdef CONFIG_RSBAC_NET_OBJ
+		else {
+			rsbac_target = T_NETOBJ;
+			rsbac_target_id.netobj.sock_p = sock;
+			rsbac_target_id.netobj.local_addr = NULL;
+			rsbac_target_id.netobj.local_len = 0;
+			rsbac_target_id.netobj.remote_addr = NULL;
+			rsbac_target_id.netobj.remote_len = 0;
+		}
+#endif
+		rsbac_attribute_value.sock_type = sock->type;
+		if ((rsbac_target != T_NONE)
+				&& !rsbac_adf_request(R_GET_STATUS_DATA,
+					current->pid,
+					rsbac_target,
+					rsbac_target_id,
+					A_sock_type,
+					rsbac_attribute_value)) {
+			err = -EPERM;
+			goto out_put;
+		}
+#endif
+
 		if (level == SOL_SOCKET)
 			err =
 			    sock_getsockopt(sock, level, optname, optval,
@@ -1755,11 +2671,86 @@ asmlinkage long sys_shutdown(int fd, int
 	int err, fput_needed;
 	struct socket *sock;
 
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target = T_NONE;
+	union rsbac_target_id_t       rsbac_target_id;
+#ifdef CONFIG_RSBAC_NET_OBJ
+	union rsbac_target_id_t       rsbac_new_target_id;
+#endif
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	sock = sockfd_lookup_light(fd, &err, &fput_needed);
 	if (sock != NULL) {
 		err = security_socket_shutdown(sock, how);
+
+#ifdef CONFIG_RSBAC
+		rsbac_pr_debug(aef, "[sys_socketcall()]: calling ADF\n");
+		if(   sock->ops
+				&& (sock->ops->family == AF_UNIX)
+				&& sock->file
+				&& sock->file->f_dentry
+				&& sock->file->f_dentry->d_inode
+		  )
+		{
+			if (sock->file->f_dentry->d_sb->s_magic == SOCKFS_MAGIC) {
+				rsbac_target = T_IPC;
+				rsbac_target_id.ipc.type = I_anonunix;
+				rsbac_target_id.ipc.id.id_nr = sock->file->f_dentry->d_inode->i_ino;
+			} else {
+				rsbac_target = T_UNIXSOCK;
+				rsbac_target_id.unixsock.device = sock->file->f_dentry->d_sb->s_dev;
+				rsbac_target_id.unixsock.inode  = sock->file->f_dentry->d_inode->i_ino;
+				rsbac_target_id.unixsock.dentry_p = sock->file->f_dentry;
+			}
+		}
+#ifdef CONFIG_RSBAC_NET_OBJ
+		else {
+			rsbac_target = T_NETOBJ;
+			rsbac_target_id.netobj.sock_p = sock;
+			rsbac_target_id.netobj.local_addr = NULL;
+			rsbac_target_id.netobj.local_len = 0;
+			rsbac_target_id.netobj.remote_addr = NULL;
+			rsbac_target_id.netobj.remote_len = 0;
+		}
+#endif
+		rsbac_attribute_value.sock_type = sock->type;
+		if (   (rsbac_target != T_NONE)
+				&& !rsbac_adf_request(R_NET_SHUTDOWN,
+					current->pid,
+					rsbac_target,
+					rsbac_target_id,
+					A_sock_type,
+					rsbac_attribute_value)) {
+			err = -EPERM;
+		}
+#endif
+
 		if (!err)
 			err = sock->ops->shutdown(sock, how);
+
+		/* RSBAC: notifying adf / socket */
+#ifdef CONFIG_RSBAC_NET_OBJ
+		if(!err && (rsbac_target != T_NONE))
+		{
+			rsbac_pr_debug(aef, "calling rsbac_adf_set_attr() for NET_SHUTDOWN on netobj\n");
+			rsbac_new_target_id.dummy = 0;
+			rsbac_attribute_value.dummy = 0;
+			if (rsbac_adf_set_attr(R_NET_SHUTDOWN,
+						current->pid,
+						rsbac_target,
+						rsbac_target_id,
+						T_NONE,
+						rsbac_new_target_id,
+						A_sock_type,
+						rsbac_attribute_value))
+			{
+				rsbac_printk(KERN_WARNING 
+						"sys_shutdown(): rsbac_adf_set_attr() for NET_SHUTDOWN on socket returned error\n");
+			}
+		}
+#endif
+
 		fput_light(sock->file, fput_needed);
 	}
 	return err;
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/net/unix/af_unix.c linux-2.6.23.14-rsbac-1.3.7/net/unix/af_unix.c
--- trunk/net/unix/af_unix.c	2008-02-13 16:23:28.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/net/unix/af_unix.c	2008-02-13 13:20:49.000000000 +0100
@@ -116,6 +116,8 @@
 #include <net/checksum.h>
 #include <linux/security.h>
 
+#include <rsbac/hooks.h>
+
 int sysctl_unix_max_dgram_qlen __read_mostly = 10;
 
 static struct hlist_head unix_socket_table[UNIX_HASH_SIZE + 1];
@@ -829,6 +831,13 @@ static int unix_bind(struct socket *sock
 		if (IS_ERR(dentry))
 			goto out_mknod_unlock;
 
+#ifdef CONFIG_RSBAC
+		/* RSBAC add: set credentials so connect and send can copy them */
+		sk->sk_peercred.pid	= current->tgid;
+		sk->sk_peercred.uid	= current->euid;
+		sk->sk_peercred.gid	= current->egid;
+#endif
+
 		/*
 		 * All right, let's create it.
 		 */
@@ -919,6 +928,15 @@ static int unix_dgram_connect(struct soc
 	unsigned hash;
 	int err;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC
+	enum rsbac_target_t           rsbac_target = T_NONE;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+        enum  rsbac_attribute_t       rsbac_attribute = A_none;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+	#endif
+
 	if (addr->sa_family != AF_UNSPEC) {
 		err = unix_mkname(sunaddr, alen, &hash);
 		if (err < 0)
@@ -934,6 +952,42 @@ restart:
 		if (!other)
 			goto out;
 
+#ifdef CONFIG_RSBAC
+		rsbac_pr_debug(aef, "[sys_connect() [sys_socketcall()]]: calling ADF\n");
+		/* Named socket? */
+		if(sunaddr->sun_path[0]) {
+			rsbac_target = T_UNIXSOCK;
+			rsbac_target_id.unixsock.device = unix_sk(other)->dentry->d_sb->s_dev;
+			rsbac_target_id.unixsock.inode  = unix_sk(other)->dentry->d_inode->i_ino;
+			rsbac_target_id.unixsock.dentry_p = unix_sk(other)->dentry;
+		} else {
+			rsbac_target = T_IPC;
+			rsbac_target_id.ipc.type = I_anonunix;
+			rsbac_target_id.ipc.id.id_nr = unix_sk(other)->dentry->d_inode->i_ino;
+		}
+		if (other->sk_peercred.pid) {
+			rsbac_attribute = A_process;
+			rsbac_attribute_value.process = other->sk_peercred.pid;
+		} else if (sk->sk_peercred.pid) {
+			rsbac_attribute = A_process;
+			rsbac_attribute_value.process = sk->sk_peercred.pid;
+		} else {
+			rsbac_attribute = A_sock_type;
+			rsbac_attribute_value.sock_type = sock->type;
+		}
+		if (!rsbac_adf_request(R_CONNECT,
+					current->pid,
+					rsbac_target,
+					rsbac_target_id,
+					rsbac_attribute,
+					rsbac_attribute_value)) {
+			rsbac_pr_debug(aef, "[sys_connect() [sys_socketcall()]]: ADF returned NOT_GRANTED\n");
+			err = -EPERM;
+			sock_put(other);
+			goto out;
+		}
+#endif
+
 		unix_state_double_lock(sk, other);
 
 		/* Apparently VFS overslept socket death. Retry. */
@@ -974,6 +1028,23 @@ restart:
 		unix_peer(sk)=other;
 		unix_state_double_unlock(sk, other);
 	}
+
+#ifdef CONFIG_RSBAC
+	if(rsbac_target != T_NONE) {
+		rsbac_new_target_id.dummy = 0;
+		if (rsbac_adf_set_attr(R_CONNECT,
+					current->pid,
+					rsbac_target,
+					rsbac_target_id,
+					T_NONE,
+					rsbac_new_target_id,
+					rsbac_attribute,
+					rsbac_attribute_value))
+			rsbac_printk(KERN_WARNING
+					"unix_dgram_connect() [sys_connect() [sys_socketcall()]]: rsbac_adf_set_attr() returned error\n");
+	}
+        #endif
+
 	return 0;
 
 out_unlock:
@@ -1019,6 +1090,15 @@ static int unix_stream_connect(struct so
 	int err;
 	long timeo;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC
+	enum rsbac_target_t           rsbac_target = T_NONE;
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+        enum  rsbac_attribute_t       rsbac_attribute = A_none;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+	#endif
+
 	err = unix_mkname(sunaddr, addr_len, &hash);
 	if (err < 0)
 		goto out;
@@ -1053,6 +1133,46 @@ restart:
 	if (!other)
 		goto out;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC
+	if(unix_sk(other)->dentry && unix_sk(other)->dentry->d_inode) {
+		rsbac_pr_debug(aef, "[sys_connect() [sys_socketcall()]]: calling ADF\n");
+		/* Named socket? */
+		if(sunaddr->sun_path[0]) {
+			rsbac_target = T_UNIXSOCK;
+			rsbac_target_id.unixsock.device = unix_sk(other)->dentry->d_sb->s_dev;
+			rsbac_target_id.unixsock.inode  = unix_sk(other)->dentry->d_inode->i_ino;
+			rsbac_target_id.unixsock.dentry_p = unix_sk(other)->dentry;
+		} else {
+			rsbac_target = T_IPC;
+			rsbac_target_id.ipc.type = I_anonunix;
+			rsbac_target_id.ipc.id.id_nr = unix_sk(other)->dentry->d_inode->i_ino;
+		}
+		if (other->sk_peercred.pid) {
+		   	rsbac_attribute = A_process;
+		   	rsbac_attribute_value.process = other->sk_peercred.pid;
+		} else if (sk->sk_peercred.pid) {
+		   	rsbac_attribute = A_process;
+		   	rsbac_attribute_value.process = sk->sk_peercred.pid;
+		} else {
+			rsbac_attribute = A_sock_type;
+			rsbac_attribute_value.sock_type = sock->type;
+		}
+		if (!rsbac_adf_request(R_CONNECT,
+					current->pid,
+					rsbac_target,
+					rsbac_target_id,
+					rsbac_attribute,
+					rsbac_attribute_value)) {
+			rsbac_pr_debug(aef, "[sys_connect() [sys_socketcall()]]:"
+					    " ADF returned NOT_GRANTED\n");
+			err = -EPERM;
+			sock_put(other);
+			goto out;
+		}
+	}
+	#endif
+
 	/* Latch state of peer */
 	unix_state_lock(other);
 
@@ -1164,6 +1284,24 @@ restart:
 	spin_unlock(&other->sk_receive_queue.lock);
 	unix_state_unlock(other);
 	other->sk_data_ready(other, 0);
+
+	/* RSBAC: notify adf */
+	#ifdef CONFIG_RSBAC
+	if(rsbac_target != T_NONE) {
+		rsbac_new_target_id.dummy = 0;
+		if (rsbac_adf_set_attr(R_CONNECT,
+					current->pid,
+					rsbac_target,
+					rsbac_target_id,
+					T_NONE,
+					rsbac_new_target_id,
+					rsbac_attribute,
+					rsbac_attribute_value))
+			rsbac_printk(KERN_WARNING
+				"unix_stream_connect() [sys_connect() [sys_socketcall()]]: rsbac_adf_set_attr() returned error\n");
+	}
+        #endif
+
 	sock_put(other);
 	return 0;
 
diff -urpN -x rsbac -x autoconf.h -x .config -x .gitignore trunk/net/wireless/wext.c linux-2.6.23.14-rsbac-1.3.7/net/wireless/wext.c
--- trunk/net/wireless/wext.c	2008-02-13 16:23:57.000000000 +0100
+++ linux-2.6.23.14-rsbac-1.3.7/net/wireless/wext.c	2008-02-13 13:21:42.000000000 +0100
@@ -101,6 +101,8 @@
 
 #include <asm/uaccess.h>		/* copy_to_user() */
 
+#include <rsbac/hooks.h>
+
 /************************* GLOBAL VARIABLES *************************/
 /*
  * You should not use global variables, because of re-entrancy.
@@ -1058,6 +1060,11 @@ int wext_handle_ioctl(struct ifreq *ifr,
 {
 	int ret;
 
+#ifdef CONFIG_RSBAC_NET_DEV
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
 	/* If command is `set a parameter', or
 	 * `get the encoding parameters', check if
 	 * the user has the right to do it */
@@ -1065,6 +1072,19 @@ int wext_handle_ioctl(struct ifreq *ifr,
 	    && !capable(CAP_NET_ADMIN))
 		return -EPERM;
 
+#ifdef CONFIG_RSBAC_NET_DEV
+	rsbac_pr_debug(aef, " calling ADF\n");
+	rsbac_attribute_value.dummy = 0;
+
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_NETDEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+		return -EPERM;
+#endif
+
 	dev_load(ifr->ifr_name);
 	rtnl_lock();
 	ret = wireless_process_ioctl(ifr, cmd);
