From: Greg Kroah-Hartman <gregkh@suse.de>
Subject: Linux 2.6.34.4
Patch-mainline: 2.6.34.4


Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

Automatically created from "patches.kernel.org/patch-2.6.34.3-4" by xen-port-patches.py

--- 11.3-2010-08-16.orig/arch/x86/mm/fault-xen.c	2010-03-24 16:00:05.000000000 +0100
+++ 11.3-2010-08-16/arch/x86/mm/fault-xen.c	2010-08-16 14:42:50.000000000 +0200
@@ -810,8 +810,10 @@ do_sigbus(struct pt_regs *regs, unsigned
 	up_read(&mm->mmap_sem);
 
 	/* Kernel mode? Handle exceptions or die: */
-	if (!(error_code & PF_USER))
+	if (!(error_code & PF_USER)) {
 		no_context(regs, error_code, address);
+		return;
+	}
 
 	/* User-space => ok to do another page fault: */
 	if (is_prefetch(regs, error_code, address))
--- 11.3-2010-08-16.orig/drivers/xen/netfront/netfront.c	2010-03-24 15:32:27.000000000 +0100
+++ 11.3-2010-08-16/drivers/xen/netfront/netfront.c	2010-08-16 14:49:33.000000000 +0200
@@ -50,7 +50,6 @@
 #include <linux/moduleparam.h>
 #include <net/sock.h>
 #include <net/pkt_sched.h>
-#include <net/arp.h>
 #include <net/route.h>
 #include <asm/uaccess.h>
 #include <xen/evtchn.h>
@@ -220,7 +219,6 @@ static void netif_disconnect_backend(str
 static int network_connect(struct net_device *);
 static void network_tx_buf_gc(struct net_device *);
 static void network_alloc_rx_buffers(struct net_device *);
-static void send_fake_arp(struct net_device *);
 
 static irqreturn_t netif_int(int irq, void *dev_id);
 
@@ -552,7 +550,7 @@ static void backend_changed(struct xenbu
 		if (network_connect(netdev) != 0)
 			break;
 		xenbus_switch_state(dev, XenbusStateConnected);
-		send_fake_arp(netdev);
+		netif_notify_peers(netdev);
 		break;
 
 	case XenbusStateClosing:
@@ -561,36 +559,6 @@ static void backend_changed(struct xenbu
 	}
 }
 
-/** Send a packet on a net device to encourage switches to learn the
- * MAC. We send a fake ARP request.
- *
- * @param dev device
- * @return 0 on success, error code otherwise
- */
-static void send_fake_arp(struct net_device *dev)
-{
-#ifdef CONFIG_INET
-	struct sk_buff *skb;
-	u32             src_ip, dst_ip;
-
-	dst_ip = INADDR_BROADCAST;
-	src_ip = inet_select_addr(dev, dst_ip, RT_SCOPE_LINK);
-
-	/* No IP? Then nothing to do. */
-	if (src_ip == 0)
-		return;
-
-	skb = arp_create(ARPOP_REPLY, ETH_P_ARP,
-			 dst_ip, dev, src_ip,
-			 /*dst_hw*/ NULL, /*src_hw*/ NULL,
-			 /*target_hw*/ dev->dev_addr);
-	if (skb == NULL)
-		return;
-
-	dev_queue_xmit(skb);
-#endif
-}
-
 static inline int netfront_tx_slot_available(struct netfront_info *np)
 {
 	return ((np->tx.req_prod_pvt - np->tx.rsp_cons) <
@@ -2110,32 +2078,6 @@ static struct net_device * __devinit cre
 	return ERR_PTR(err);
 }
 
-#ifdef CONFIG_INET
-/*
- * We use this notifier to send out a fake ARP reply to reset switches and
- * router ARP caches when an IP interface is brought up on a VIF.
- */
-static int
-inetdev_notify(struct notifier_block *this, unsigned long event, void *ptr)
-{
-	struct in_ifaddr  *ifa = (struct in_ifaddr *)ptr;
-	struct net_device *dev = ifa->ifa_dev->dev;
-
-	/* UP event and is it one of our devices? */
-	if (event == NETDEV_UP && dev->netdev_ops->ndo_open == network_open)
-		send_fake_arp(dev);
-
-	return NOTIFY_DONE;
-}
-
-static struct notifier_block notifier_inetdev = {
-	.notifier_call  = inetdev_notify,
-	.next           = NULL,
-	.priority       = 0
-};
-#endif
-
-
 static void netif_disconnect_backend(struct netfront_info *info)
 {
 	/* Stop old i/f to prevent errors whilst we rebuild the state. */
@@ -2189,8 +2131,6 @@ static struct xenbus_driver netfront_dri
 
 static int __init netif_init(void)
 {
-	int err;
-
 	if (!is_running_on_xen())
 		return -ENODEV;
 
@@ -2208,26 +2148,13 @@ static int __init netif_init(void)
 
 	IPRINTK("Initialising virtual ethernet driver.\n");
 
-#ifdef CONFIG_INET
-	(void)register_inetaddr_notifier(&notifier_inetdev);
-#endif
-
-	err = xenbus_register_frontend(&netfront_driver);
-	if (err) {
-#ifdef CONFIG_INET
-		unregister_inetaddr_notifier(&notifier_inetdev);
-#endif
-	}
-	return err;
+	return xenbus_register_frontend(&netfront_driver);
 }
 module_init(netif_init);
 
 
 static void __exit netif_exit(void)
 {
-#ifdef CONFIG_INET
-	unregister_inetaddr_notifier(&notifier_inetdev);
-#endif
 	xenbus_unregister_driver(&netfront_driver);
 
 	netif_exit_accel();
