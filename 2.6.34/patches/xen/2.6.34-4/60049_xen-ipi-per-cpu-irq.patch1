From: jbeulich@novell.com
Subject: fold IPIs onto a single IRQ each
Patch-mainline: n/a

--- 11.3-2010-07-06.orig/arch/x86/include/asm/hw_irq.h	2010-03-24 16:00:05.000000000 +0100
+++ 11.3-2010-07-06/arch/x86/include/asm/hw_irq.h	2010-05-28 16:03:32.000000000 +0200
@@ -123,7 +123,6 @@ extern void smp_error_interrupt(struct p
 extern asmlinkage void smp_irq_move_cleanup_interrupt(void);
 #endif
 #ifdef CONFIG_SMP
-#ifndef CONFIG_XEN
 extern void smp_reschedule_interrupt(struct pt_regs *);
 extern void smp_call_function_interrupt(struct pt_regs *);
 extern void smp_call_function_single_interrupt(struct pt_regs *);
@@ -132,12 +131,8 @@ extern void smp_invalidate_interrupt(str
 #else
 extern asmlinkage void smp_invalidate_interrupt(struct pt_regs *);
 #endif
-#else
-#include <linux/irqreturn.h>
-extern irqreturn_t smp_reschedule_interrupt(int, void *);
-extern irqreturn_t smp_call_function_interrupt(int, void *);
-extern irqreturn_t smp_call_function_single_interrupt(int, void *);
-extern irqreturn_t smp_reboot_interrupt(int, void *);
+#ifdef CONFIG_XEN
+extern void smp_reboot_interrupt(struct pt_regs *);
 #endif
 #endif
 
--- 11.3-2010-07-06.orig/arch/x86/kernel/apic/ipi-xen.c	2010-03-24 15:25:06.000000000 +0100
+++ 11.3-2010-07-06/arch/x86/kernel/apic/ipi-xen.c	2010-01-25 13:46:29.000000000 +0100
@@ -21,31 +21,22 @@
 
 #include <xen/evtchn.h>
 
-DECLARE_PER_CPU(int, ipi_to_irq[NR_IPIS]);
-
-static inline void __send_IPI_one(unsigned int cpu, int vector)
-{
-	int irq = per_cpu(ipi_to_irq, cpu)[vector];
-	BUG_ON(irq < 0);
-	notify_remote_via_irq(irq);
-}
-
 static void __send_IPI_shortcut(unsigned int shortcut, int vector)
 {
 	unsigned int cpu;
 
 	switch (shortcut) {
 	case APIC_DEST_SELF:
-		__send_IPI_one(smp_processor_id(), vector);
+		notify_remote_via_ipi(vector, smp_processor_id());
 		break;
 	case APIC_DEST_ALLBUT:
 		for_each_online_cpu(cpu)
 			if (cpu != smp_processor_id())
-				__send_IPI_one(cpu, vector);
+				notify_remote_via_ipi(vector, cpu);
 		break;
 	case APIC_DEST_ALLINC:
 		for_each_online_cpu(cpu)
-			__send_IPI_one(cpu, vector);
+			notify_remote_via_ipi(vector, cpu);
 		break;
 	default:
 		printk("XXXXXX __send_IPI_shortcut %08x vector %d\n", shortcut,
@@ -63,7 +54,7 @@ void xen_send_IPI_mask_allbutself(const 
 	WARN_ON(!cpumask_subset(cpumask, cpu_online_mask));
 	for_each_cpu_and(cpu, cpumask, cpu_online_mask)
 		if (cpu != smp_processor_id())
-			__send_IPI_one(cpu, vector);
+			notify_remote_via_ipi(vector, cpu);
 	local_irq_restore(flags);
 }
 
@@ -75,7 +66,7 @@ void xen_send_IPI_mask(const struct cpum
 	local_irq_save(flags);
 	WARN_ON(!cpumask_subset(cpumask, cpu_online_mask));
 	for_each_cpu_and(cpu, cpumask, cpu_online_mask)
-		__send_IPI_one(cpu, vector);
+		notify_remote_via_ipi(vector, cpu);
 	local_irq_restore(flags);
 }
 
--- 11.3-2010-07-06.orig/arch/x86/kernel/irq-xen.c	2010-07-05 10:08:29.000000000 +0200
+++ 11.3-2010-07-06/arch/x86/kernel/irq-xen.c	2010-07-05 10:56:03.000000000 +0200
@@ -319,6 +319,7 @@ void fixup_irqs(void)
 
 		affinity = desc->affinity;
 		if (!irq_has_action(irq) ||
+		    (desc->status & IRQ_PER_CPU) ||
 		    cpumask_subset(affinity, cpu_online_mask)) {
 			raw_spin_unlock(&desc->lock);
 			continue;
--- 11.3-2010-07-06.orig/arch/x86/kernel/smp-xen.c	2010-05-28 16:25:19.000000000 +0200
+++ 11.3-2010-07-06/arch/x86/kernel/smp-xen.c	2010-05-28 17:06:43.000000000 +0200
@@ -136,11 +136,9 @@ void xen_send_call_func_ipi(const struct
  * this function calls the 'stop' function on all other CPUs in the system.
  */
 
-irqreturn_t smp_reboot_interrupt(int irq, void *dev_id)
+void smp_reboot_interrupt(struct pt_regs *regs)
 {
 	stop_this_cpu(NULL);
-
-	return IRQ_HANDLED;
 }
 
 void xen_smp_send_stop(void)
@@ -176,24 +174,19 @@ void xen_smp_send_stop(void)
  * all the work is done automatically when
  * we return from the interrupt.
  */
-irqreturn_t smp_reschedule_interrupt(int irq, void *dev_id)
+void smp_reschedule_interrupt(struct pt_regs *regs)
 {
 	inc_irq_stat(irq_resched_count);
-	return IRQ_HANDLED;
 }
 
-irqreturn_t smp_call_function_interrupt(int irq, void *dev_id)
+void smp_call_function_interrupt(struct pt_regs *regs)
 {
 	generic_smp_call_function_interrupt();
 	inc_irq_stat(irq_call_count);
-
-	return IRQ_HANDLED;
 }
 
-irqreturn_t smp_call_function_single_interrupt(int irq, void *dev_id)
+void smp_call_function_single_interrupt(struct pt_regs *regs)
 {
 	generic_smp_call_function_single_interrupt();
 	inc_irq_stat(irq_call_count);
-
-	return IRQ_HANDLED;
 }
--- 11.3-2010-07-06.orig/drivers/xen/Kconfig	2010-06-02 11:48:59.000000000 +0200
+++ 11.3-2010-07-06/drivers/xen/Kconfig	2010-06-02 11:49:49.000000000 +0200
@@ -4,6 +4,7 @@
 
 config XEN
 	bool
+	select IRQ_PER_CPU if SMP
 
 if XEN
 config XEN_INTERFACE_VERSION
@@ -355,6 +356,9 @@ endmenu
 config HAVE_IRQ_IGNORE_UNHANDLED
 	def_bool y
 
+config IRQ_PER_CPU
+	bool
+
 config NO_IDLE_HZ
 	def_bool y
 
--- 11.3-2010-07-06.orig/drivers/xen/core/evtchn.c	2010-07-06 11:08:14.000000000 +0200
+++ 11.3-2010-07-06/drivers/xen/core/evtchn.c	2010-07-06 11:10:42.000000000 +0200
@@ -58,6 +58,20 @@ static DEFINE_SPINLOCK(irq_mapping_updat
 static int evtchn_to_irq[NR_EVENT_CHANNELS] = {
 	[0 ...  NR_EVENT_CHANNELS-1] = -1 };
 
+/* IRQ <-> IPI mapping. */
+#if defined(CONFIG_SMP) && defined(CONFIG_X86)
+static int __read_mostly ipi_irq = -1;
+DEFINE_PER_CPU(DECLARE_BITMAP(, NR_IPIS), ipi_pending);
+static DEFINE_PER_CPU(evtchn_port_t, ipi_evtchn);
+#else
+#define PER_CPU_IPI_IRQ
+#endif
+#if !defined(CONFIG_SMP) || !defined(PER_CPU_IPI_IRQ)
+#define BUG_IF_IPI(irq) BUG_ON(type_from_irq(irq) == IRQT_IPI)
+#else
+#define BUG_IF_IPI(irq) ((void)(irq))
+#endif
+
 /* Binding types. */
 enum {
 	IRQT_UNBOUND,
@@ -104,7 +118,9 @@ static inline u32 mk_irq_info(u32 type, 
 
 	BUILD_BUG_ON(NR_PIRQS > (1U << _INDEX_BITS));
 	BUILD_BUG_ON(NR_VIRQS > (1U << _INDEX_BITS));
+#if defined(PER_CPU_IPI_IRQ) && defined(NR_IPIS)
 	BUILD_BUG_ON(NR_IPIS > (1U << _INDEX_BITS));
+#endif
 	BUG_ON(index >> _INDEX_BITS);
 
 	BUILD_BUG_ON(NR_EVENT_CHANNELS > (1U << _EVTCHN_BITS));
@@ -116,12 +132,14 @@ static inline u32 mk_irq_info(u32 type, 
  * Accessors for packed IRQ information.
  */
 
+#ifdef PER_CPU_IPI_IRQ
 static inline unsigned int evtchn_from_irq(int irq)
 {
 	const struct irq_cfg *cfg = irq_cfg(irq);
 
 	return cfg ? cfg->info & ((1U << _EVTCHN_BITS) - 1) : 0;
 }
+#endif
 
 static inline unsigned int index_from_irq(int irq)
 {
@@ -138,6 +156,25 @@ static inline unsigned int type_from_irq
 	return cfg ? cfg->info >> (32 - _IRQT_BITS) : IRQT_UNBOUND;
 }
 
+#ifndef PER_CPU_IPI_IRQ
+static inline unsigned int evtchn_from_per_cpu_irq(unsigned int irq,
+						    unsigned int cpu)
+{
+	BUG_ON(type_from_irq(irq) != IRQT_IPI);
+	return per_cpu(ipi_evtchn, cpu);
+}
+
+static inline unsigned int evtchn_from_irq(unsigned int irq)
+{
+	if (type_from_irq(irq) != IRQT_IPI) {
+		const struct irq_cfg *cfg = irq_cfg(irq);
+
+		return cfg ? cfg->info & ((1U << _EVTCHN_BITS) - 1) : 0;
+	}
+	return evtchn_from_per_cpu_irq(irq, smp_processor_id());
+}
+#endif
+
 unsigned int irq_from_evtchn(unsigned int port)
 {
 	return evtchn_to_irq[port];
@@ -147,11 +184,13 @@ EXPORT_SYMBOL_GPL(irq_from_evtchn);
 /* IRQ <-> VIRQ mapping. */
 DEFINE_PER_CPU(int[NR_VIRQS], virq_to_irq) = {[0 ... NR_VIRQS-1] = -1};
 
+#if defined(CONFIG_SMP) && defined(PER_CPU_IPI_IRQ)
 /* IRQ <-> IPI mapping. */
 #ifndef NR_IPIS
 #define NR_IPIS 1
 #endif
 DEFINE_PER_CPU(int[NR_IPIS], ipi_to_irq) = {[0 ... NR_IPIS-1] = -1};
+#endif
 
 #ifdef CONFIG_SMP
 
@@ -175,8 +214,14 @@ static void bind_evtchn_to_cpu(unsigned 
 
 	BUG_ON(!test_bit(chn, s->evtchn_mask));
 
-	if (irq != -1)
-		cpumask_copy(irq_to_desc(irq)->affinity, cpumask_of(cpu));
+	if (irq != -1) {
+		struct irq_desc *desc = irq_to_desc(irq);
+
+		if (!(desc->status & IRQ_PER_CPU))
+			cpumask_copy(desc->affinity, cpumask_of(cpu));
+		else
+			cpumask_set_cpu(cpu, desc->affinity);
+	}
 
 	clear_bit(chn, per_cpu(cpu_evtchn_mask, cpu_evtchn[chn]));
 	set_bit(chn, per_cpu(cpu_evtchn_mask, cpu));
@@ -349,7 +394,7 @@ asmlinkage void __irq_entry evtchn_do_up
 
 static struct irq_chip dynirq_chip;
 
-static int find_unbound_irq(unsigned int cpu)
+static int find_unbound_irq(unsigned int cpu, bool percpu)
 {
 	static int warned;
 	int irq;
@@ -359,10 +404,19 @@ static int find_unbound_irq(unsigned int
 		struct irq_cfg *cfg = desc->chip_data;
 
 		if (!cfg->bindcount) {
+			irq_flow_handler_t handle;
+			const char *name;
+
 			desc->status |= IRQ_NOPROBE;
+			if (!percpu) {
+				handle = handle_level_irq;
+				name = "level";
+			} else {
+				handle = handle_percpu_irq;
+				name = "percpu";
+			}
 			set_irq_chip_and_handler_name(irq, &dynirq_chip,
-						      handle_level_irq,
-						      "level");
+						      handle, name);
 			return irq;
 		}
 	}
@@ -383,7 +437,7 @@ static int bind_caller_port_to_irq(unsig
 	spin_lock(&irq_mapping_update_lock);
 
 	if ((irq = evtchn_to_irq[caller_port]) == -1) {
-		if ((irq = find_unbound_irq(smp_processor_id())) < 0)
+		if ((irq = find_unbound_irq(smp_processor_id(), false)) < 0)
 			goto out;
 
 		evtchn_to_irq[caller_port] = irq;
@@ -406,7 +460,7 @@ static int bind_local_port_to_irq(unsign
 
 	BUG_ON(evtchn_to_irq[local_port] != -1);
 
-	if ((irq = find_unbound_irq(smp_processor_id())) < 0) {
+	if ((irq = find_unbound_irq(smp_processor_id(), false)) < 0) {
 		if (close_evtchn(local_port))
 			BUG();
 		goto out;
@@ -458,7 +512,7 @@ static int bind_virq_to_irq(unsigned int
 	spin_lock(&irq_mapping_update_lock);
 
 	if ((irq = per_cpu(virq_to_irq, cpu)[virq]) == -1) {
-		if ((irq = find_unbound_irq(cpu)) < 0)
+		if ((irq = find_unbound_irq(cpu, false)) < 0)
 			goto out;
 
 		bind_virq.virq = virq;
@@ -483,6 +537,7 @@ static int bind_virq_to_irq(unsigned int
 	return irq;
 }
 
+#if defined(CONFIG_SMP) && defined(PER_CPU_IPI_IRQ)
 static int bind_ipi_to_irq(unsigned int ipi, unsigned int cpu)
 {
 	struct evtchn_bind_ipi bind_ipi;
@@ -491,7 +546,7 @@ static int bind_ipi_to_irq(unsigned int 
 	spin_lock(&irq_mapping_update_lock);
 
 	if ((irq = per_cpu(ipi_to_irq, cpu)[ipi]) == -1) {
-		if ((irq = find_unbound_irq(cpu)) < 0)
+		if ((irq = find_unbound_irq(cpu, false)) < 0)
 			goto out;
 
 		bind_ipi.vcpu = cpu;
@@ -514,12 +569,14 @@ static int bind_ipi_to_irq(unsigned int 
 	spin_unlock(&irq_mapping_update_lock);
 	return irq;
 }
+#endif
 
 static void unbind_from_irq(unsigned int irq)
 {
 	unsigned int cpu;
 	int evtchn = evtchn_from_irq(irq);
 
+	BUG_IF_IPI(irq);
 	spin_lock(&irq_mapping_update_lock);
 
 	if (!--irq_cfg(irq)->bindcount && VALID_EVTCHN(evtchn)) {
@@ -532,10 +589,12 @@ static void unbind_from_irq(unsigned int
 			per_cpu(virq_to_irq, cpu_from_evtchn(evtchn))
 				[index_from_irq(irq)] = -1;
 			break;
+#if defined(CONFIG_SMP) && defined(PER_CPU_IPI_IRQ)
 		case IRQT_IPI:
 			per_cpu(ipi_to_irq, cpu_from_evtchn(evtchn))
 				[index_from_irq(irq)] = -1;
 			break;
+#endif
 		default:
 			break;
 		}
@@ -558,6 +617,46 @@ static void unbind_from_irq(unsigned int
 	spin_unlock(&irq_mapping_update_lock);
 }
 
+#if defined(CONFIG_SMP) && !defined(PER_CPU_IPI_IRQ)
+void unbind_from_per_cpu_irq(unsigned int irq, unsigned int cpu)
+{
+	struct evtchn_close close;
+	int evtchn = evtchn_from_per_cpu_irq(irq, cpu);
+
+	spin_lock(&irq_mapping_update_lock);
+
+	if (VALID_EVTCHN(evtchn)) {
+		struct irq_desc *desc = irq_to_desc(irq);
+
+		mask_evtchn(evtchn);
+
+		BUG_ON(irq_cfg(irq)->bindcount <= 1);
+		irq_cfg(irq)->bindcount--;
+		cpumask_clear_cpu(cpu, desc->affinity);
+
+		close.port = evtchn;
+		if (HYPERVISOR_event_channel_op(EVTCHNOP_close, &close))
+			BUG();
+
+		switch (type_from_irq(irq)) {
+		case IRQT_IPI:
+			per_cpu(ipi_evtchn, cpu) = 0;
+			break;
+		default:
+			BUG();
+			break;
+		}
+
+		/* Closed ports are implicitly re-bound to VCPU0. */
+		bind_evtchn_to_cpu(evtchn, 0);
+
+		evtchn_to_irq[evtchn] = -1;
+	}
+
+	spin_unlock(&irq_mapping_update_lock);
+}
+#endif /* CONFIG_SMP && !PER_CPU_IPI_IRQ */
+
 int bind_caller_port_to_irqhandler(
 	unsigned int caller_port,
 	irq_handler_t handler,
@@ -652,6 +751,8 @@ int bind_virq_to_irqhandler(
 }
 EXPORT_SYMBOL_GPL(bind_virq_to_irqhandler);
 
+#ifdef CONFIG_SMP
+#ifdef PER_CPU_IPI_IRQ
 int bind_ipi_to_irqhandler(
 	unsigned int ipi,
 	unsigned int cpu,
@@ -675,7 +776,68 @@ int bind_ipi_to_irqhandler(
 
 	return irq;
 }
-EXPORT_SYMBOL_GPL(bind_ipi_to_irqhandler);
+#else
+int __cpuinit bind_ipi_to_irqaction(
+	unsigned int cpu,
+	struct irqaction *action)
+{
+	struct evtchn_bind_ipi bind_ipi;
+	int evtchn, retval = 0;
+
+	spin_lock(&irq_mapping_update_lock);
+
+	if (VALID_EVTCHN(per_cpu(ipi_evtchn, cpu))) {
+		spin_unlock(&irq_mapping_update_lock);
+		return -EBUSY;
+	}
+
+	if (ipi_irq < 0) {
+		if ((ipi_irq = find_unbound_irq(cpu, true)) < 0) {
+			spin_unlock(&irq_mapping_update_lock);
+			return ipi_irq;
+		}
+
+		/* Extra reference so count will never drop to zero. */
+		irq_cfg(ipi_irq)->bindcount++;
+
+		irq_cfg(ipi_irq)->info = mk_irq_info(IRQT_IPI, 0, 0);
+		retval = 1;
+	}
+
+	bind_ipi.vcpu = cpu;
+	if (HYPERVISOR_event_channel_op(EVTCHNOP_bind_ipi, &bind_ipi))
+		BUG();
+
+	evtchn = bind_ipi.port;
+	evtchn_to_irq[evtchn] = ipi_irq;
+	per_cpu(ipi_evtchn, cpu) = evtchn;
+
+	bind_evtchn_to_cpu(evtchn, cpu);
+
+	irq_cfg(ipi_irq)->bindcount++;
+
+	spin_unlock(&irq_mapping_update_lock);
+
+	if (retval == 0) {
+		unsigned long flags;
+
+		local_irq_save(flags);
+		unmask_evtchn(evtchn);
+		local_irq_restore(flags);
+	} else {
+		action->flags |= IRQF_PERCPU | IRQF_NO_SUSPEND;
+		retval = setup_irq(ipi_irq, action);
+		if (retval) {
+			unbind_from_per_cpu_irq(ipi_irq, cpu);
+			BUG_ON(retval > 0);
+			ipi_irq = retval;
+		}
+	}
+
+	return ipi_irq;
+}
+#endif /* PER_CPU_IPI_IRQ */
+#endif /* CONFIG_SMP */
 
 void unbind_from_irqhandler(unsigned int irq, void *dev_id)
 {
@@ -701,6 +863,7 @@ static void rebind_irq_to_cpu(unsigned i
 {
 	int evtchn = evtchn_from_irq(irq);
 
+	BUG_IF_IPI(irq);
 	if (VALID_EVTCHN(evtchn))
 		rebind_evtchn_to_cpu(evtchn, tcpu);
 }
@@ -959,10 +1122,22 @@ int irq_ignore_unhandled(unsigned int ir
 	return !!(irq_status.flags & XENIRQSTAT_shared);
 }
 
+#if defined(CONFIG_SMP) && !defined(PER_CPU_IPI_IRQ)
+void notify_remote_via_ipi(unsigned int ipi, unsigned int cpu)
+{
+	int evtchn = per_cpu(ipi_evtchn, cpu);
+
+	if (VALID_EVTCHN(evtchn)
+	    && !test_and_set_bit(ipi, per_cpu(ipi_pending, cpu)))
+		notify_remote_via_evtchn(evtchn);
+}
+#endif
+
 void notify_remote_via_irq(int irq)
 {
 	int evtchn = evtchn_from_irq(irq);
 
+	BUG_IF_IPI(irq);
 	if (VALID_EVTCHN(evtchn))
 		notify_remote_via_evtchn(evtchn);
 }
@@ -970,6 +1145,7 @@ EXPORT_SYMBOL_GPL(notify_remote_via_irq)
 
 int irq_to_evtchn_port(int irq)
 {
+	BUG_IF_IPI(irq);
 	return evtchn_from_irq(irq);
 }
 EXPORT_SYMBOL_GPL(irq_to_evtchn_port);
@@ -1058,12 +1234,22 @@ static void restore_cpu_virqs(unsigned i
 
 static void restore_cpu_ipis(unsigned int cpu)
 {
+#ifdef CONFIG_SMP
 	struct evtchn_bind_ipi bind_ipi;
-	int ipi, irq, evtchn;
+	int evtchn;
+#ifdef PER_CPU_IPI_IRQ
+	int ipi, irq;
 
 	for (ipi = 0; ipi < NR_IPIS; ipi++) {
 		if ((irq = per_cpu(ipi_to_irq, cpu)[ipi]) == -1)
 			continue;
+#else
+#define ipi 0
+#define irq ipi_irq
+		if (irq == -1
+		    || !VALID_EVTCHN(per_cpu(ipi_evtchn, cpu)))
+			return;
+#endif
 
 		BUG_ON(irq_cfg(irq)->info != mk_irq_info(IRQT_IPI, ipi, 0));
 
@@ -1076,13 +1262,23 @@ static void restore_cpu_ipis(unsigned in
 
 		/* Record the new mapping. */
 		evtchn_to_irq[evtchn] = irq;
+#ifdef PER_CPU_IPI_IRQ
 		irq_cfg(irq)->info = mk_irq_info(IRQT_IPI, ipi, evtchn);
+#else
+		per_cpu(ipi_evtchn, cpu) = evtchn;
+#endif
 		bind_evtchn_to_cpu(evtchn, cpu);
 
 		/* Ready for use. */
 		if (!(irq_to_desc(irq)->status & IRQ_DISABLED))
 			unmask_evtchn(evtchn);
+#ifdef PER_CPU_IPI_IRQ
 	}
+#else
+#undef irq
+#undef ipi
+#endif
+#endif
 }
 
 static int evtchn_resume(struct sys_device *dev)
--- 11.3-2010-07-06.orig/drivers/xen/core/smpboot.c	2010-03-19 15:20:15.000000000 +0100
+++ 11.3-2010-07-06/drivers/xen/core/smpboot.c	2010-05-28 16:28:24.000000000 +0200
@@ -40,14 +40,7 @@ cpumask_var_t vcpu_initialized_mask;
 DEFINE_PER_CPU(struct cpuinfo_x86, cpu_info);
 EXPORT_PER_CPU_SYMBOL(cpu_info);
 
-static DEFINE_PER_CPU(int, resched_irq);
-static DEFINE_PER_CPU(int, callfunc_irq);
-static DEFINE_PER_CPU(int, call1func_irq);
-static DEFINE_PER_CPU(int, reboot_irq);
-static char resched_name[NR_CPUS][15];
-static char callfunc_name[NR_CPUS][15];
-static char call1func_name[NR_CPUS][15];
-static char reboot_name[NR_CPUS][15];
+static int __read_mostly ipi_irq = -1;
 
 #ifdef CONFIG_X86_LOCAL_APIC
 #define set_cpu_to_apicid(cpu, apicid) (per_cpu(x86_cpu_to_apicid, cpu) = (apicid))
@@ -107,60 +100,52 @@ remove_siblinginfo(unsigned int cpu)
 	cpu_data(cpu).booted_cores = 0;
 }
 
-static int __cpuinit xen_smp_intr_init(unsigned int cpu)
+static irqreturn_t ipi_interrupt(int irq, void *dev_id)
 {
-	int rc;
-
-	per_cpu(resched_irq, cpu) = per_cpu(callfunc_irq, cpu) =
-		per_cpu(call1func_irq, cpu) = per_cpu(reboot_irq, cpu) = -1;
-
-	sprintf(resched_name[cpu], "resched%u", cpu);
-	rc = bind_ipi_to_irqhandler(RESCHEDULE_VECTOR,
-				    cpu,
-				    smp_reschedule_interrupt,
-				    IRQF_DISABLED|IRQF_NOBALANCING,
-				    resched_name[cpu],
-				    NULL);
-	if (rc < 0)
-		goto fail;
-	per_cpu(resched_irq, cpu) = rc;
+	static void(*const handlers[])(struct pt_regs *) = {
+		[RESCHEDULE_VECTOR] = smp_reschedule_interrupt,
+		[CALL_FUNCTION_VECTOR] = smp_call_function_interrupt,
+		[CALL_FUNC_SINGLE_VECTOR] = smp_call_function_single_interrupt,
+		[REBOOT_VECTOR] = smp_reboot_interrupt,
+	};
+	unsigned long *pending = __get_cpu_var(ipi_pending);
+	unsigned int ipi = find_first_bit(pending, NR_IPIS);
+	struct pt_regs *regs = get_irq_regs();
+	irqreturn_t ret = IRQ_NONE;
+
+	while (ipi < NR_IPIS) {
+		clear_bit(ipi, pending);
+		handlers[ipi](regs);
+		ret = IRQ_HANDLED;
+
+		ipi = find_next_bit(pending, NR_IPIS, ipi);
+		if (unlikely(ipi >= NR_IPIS))
+			ipi = find_first_bit(pending, NR_IPIS);
+	}
 
-	sprintf(callfunc_name[cpu], "callfunc%u", cpu);
-	rc = bind_ipi_to_irqhandler(CALL_FUNCTION_VECTOR,
-				    cpu,
-				    smp_call_function_interrupt,
-				    IRQF_DISABLED|IRQF_NOBALANCING,
-				    callfunc_name[cpu],
-				    NULL);
-	if (rc < 0)
-		goto fail;
-	per_cpu(callfunc_irq, cpu) = rc;
+	return ret;
+}
 
-	sprintf(call1func_name[cpu], "call1func%u", cpu);
-	rc = bind_ipi_to_irqhandler(CALL_FUNC_SINGLE_VECTOR,
-				    cpu,
-				    smp_call_function_single_interrupt,
-				    IRQF_DISABLED|IRQF_NOBALANCING,
-				    call1func_name[cpu],
-				    NULL);
-	if (rc < 0)
-		goto fail;
-	per_cpu(call1func_irq, cpu) = rc;
+static int __cpuinit xen_smp_intr_init(unsigned int cpu)
+{
+	static struct irqaction ipi_action = {
+		.handler = ipi_interrupt,
+		.flags   = IRQF_DISABLED,
+		.name    = "ipi"
+	};
+	int rc;
 
-	sprintf(reboot_name[cpu], "reboot%u", cpu);
-	rc = bind_ipi_to_irqhandler(REBOOT_VECTOR,
-				    cpu,
-				    smp_reboot_interrupt,
-				    IRQF_DISABLED|IRQF_NOBALANCING,
-				    reboot_name[cpu],
-				    NULL);
+	rc = bind_ipi_to_irqaction(cpu, &ipi_action);
 	if (rc < 0)
-		goto fail;
-	per_cpu(reboot_irq, cpu) = rc;
+		return rc;
+	if (ipi_irq < 0)
+		ipi_irq = rc;
+	else
+		BUG_ON(ipi_irq != rc);
 
 	rc = xen_spinlock_init(cpu);
 	if (rc < 0)
-		goto fail;
+		goto unbind_ipi;
 
 	if ((cpu != 0) && ((rc = local_setup_timer(cpu)) != 0))
 		goto fail;
@@ -168,15 +153,9 @@ static int __cpuinit xen_smp_intr_init(u
 	return 0;
 
  fail:
-	if (per_cpu(resched_irq, cpu) >= 0)
-		unbind_from_irqhandler(per_cpu(resched_irq, cpu), NULL);
-	if (per_cpu(callfunc_irq, cpu) >= 0)
-		unbind_from_irqhandler(per_cpu(callfunc_irq, cpu), NULL);
-	if (per_cpu(call1func_irq, cpu) >= 0)
-		unbind_from_irqhandler(per_cpu(call1func_irq, cpu), NULL);
-	if (per_cpu(reboot_irq, cpu) >= 0)
-		unbind_from_irqhandler(per_cpu(reboot_irq, cpu), NULL);
 	xen_spinlock_cleanup(cpu);
+ unbind_ipi:
+	unbind_from_per_cpu_irq(ipi_irq, cpu);
 	return rc;
 }
 
@@ -186,10 +165,7 @@ static void __cpuinit xen_smp_intr_exit(
 	if (cpu != 0)
 		local_teardown_timer(cpu);
 
-	unbind_from_irqhandler(per_cpu(resched_irq, cpu), NULL);
-	unbind_from_irqhandler(per_cpu(callfunc_irq, cpu), NULL);
-	unbind_from_irqhandler(per_cpu(call1func_irq, cpu), NULL);
-	unbind_from_irqhandler(per_cpu(reboot_irq, cpu), NULL);
+	unbind_from_per_cpu_irq(ipi_irq, cpu);
 	xen_spinlock_cleanup(cpu);
 }
 #endif
--- 11.3-2010-07-06.orig/include/xen/evtchn.h	2010-05-26 17:03:36.000000000 +0200
+++ 11.3-2010-07-06/include/xen/evtchn.h	2010-07-06 11:10:52.000000000 +0200
@@ -93,6 +93,8 @@ int bind_virq_to_irqhandler(
 	unsigned long irqflags,
 	const char *devname,
 	void *dev_id);
+#if defined(CONFIG_SMP) && !defined(MODULE)
+#ifndef CONFIG_X86
 int bind_ipi_to_irqhandler(
 	unsigned int ipi,
 	unsigned int cpu,
@@ -100,6 +102,13 @@ int bind_ipi_to_irqhandler(
 	unsigned long irqflags,
 	const char *devname,
 	void *dev_id);
+#else
+int bind_ipi_to_irqaction(
+	unsigned int cpu,
+	struct irqaction *action);
+DECLARE_PER_CPU(DECLARE_BITMAP(, NR_IPIS), ipi_pending);
+#endif
+#endif
 
 /*
  * Common unbind function for all event sources. Takes IRQ to unbind from.
@@ -108,6 +117,11 @@ int bind_ipi_to_irqhandler(
  */
 void unbind_from_irqhandler(unsigned int irq, void *dev_id);
 
+#if defined(CONFIG_SMP) && !defined(MODULE) && defined(CONFIG_X86)
+/* Specialized unbind function for per-CPU IRQs. */
+void unbind_from_per_cpu_irq(unsigned int irq, unsigned int cpu);
+#endif
+
 #ifndef CONFIG_XEN
 void irq_resume(void);
 #endif
@@ -179,5 +193,9 @@ int xen_test_irq_pending(int irq);
 void notify_remote_via_irq(int irq);
 int irq_to_evtchn_port(int irq);
 
+#if defined(CONFIG_SMP) && !defined(MODULE) && defined(CONFIG_X86)
+void notify_remote_via_ipi(unsigned int ipi, unsigned int cpu);
+#endif
+
 #endif /* __ASM_EVTCHN_H__ */
 #endif /* CONFIG_PARAVIRT_XEN */
